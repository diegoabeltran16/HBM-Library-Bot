{
  "title": "tests_test_logger.py",
  "text": "## [[Tags]]\n[[Python]]\n\n```python\n# tests/test_logger.py\n\nimport os\nimport json\nimport pytest\nimport sys\nfrom pathlib import Path\nfrom pathlib import Path\nfrom src.logger import log_evento\n\n# üîß Asegura que src/ sea visible desde cualquier entorno\nsys.path.append(str(Path(__file__).resolve().parents[1]))\n\n# üåç Forzar idioma en pruebas\nos.environ[\"LANG\"] = \"es\"\n\n@pytest.fixture\ndef ruta_dummy(tmp_path):\n    archivo = tmp_path / \"demo_test.pdf\"\n    archivo.write_text(\"Contenido simulado para logging.\")\n    return str(archivo)\n\ndef test_log_evento_clasificado_en_consola_y_jsonl(ruta_dummy):\n    mensaje = log_evento(\"clasificado\", archivo=ruta_dummy, categoria=\"Ciencias\", dewey=\"500\")\n    assert \"üìñ Clasificado como: Ciencias (500)\" in mensaje\n\n    # ‚úÖ Persistencia .jsonl\n    logs_dir = Path(\"output/logs\")\n    jsonl_logs = list(logs_dir.glob(\"run_*.jsonl\"))\n    assert jsonl_logs, \"No se gener√≥ archivo .jsonl\"\n\n    eventos = []\n    with open(jsonl_logs[-1], encoding=\"utf-8\") as f:\n        for line in f:\n            try:\n                data = json.loads(line)\n                if data.get(\"evento\") == \"clasificado\":\n                    eventos.append(data)\n            except json.JSONDecodeError:\n                continue  # L√≠nea corrupta o mal formada\n\n    assert eventos, \"No se encontr√≥ el evento 'clasificado'\"\n    assert eventos[-1][\"categoria\"] == \"Ciencias\"\n    assert eventos[-1][\"dewey\"] == \"500\"\n    assert eventos[-1][\"nivel\"] == \"INFO\"\n\n\n\ndef test_log_warning_texto_corto(ruta_dummy):\n    mensaje = log_evento(\"warning_texto_corto\", archivo=ruta_dummy, nivel=\"WARNING\")\n    assert \"‚ö†Ô∏è Texto extra√≠do demasiado corto\" in mensaje\n\ndef test_log_error_parse(ruta_dummy):\n    mensaje = log_evento(\"error_parse\", archivo=ruta_dummy, nivel=\"ERROR\")\n    assert \"‚ùå Error procesando archivo\" in mensaje\n\ndef test_log_individual_por_pdf(ruta_dummy):\n    log_evento(\"procesar\", archivo=ruta_dummy)\n\n    logs_dir = Path(\"output/logs\")\n    nombre_pdf = Path(ruta_dummy).stem\n    archivo_log = logs_dir / f\"{nombre_pdf}.log\"\n\n    assert archivo_log.exists(), f\"No se cre√≥ log individual: {archivo_log}\"\n\n    with open(archivo_log, encoding=\"utf-8\") as f:\n        contenido = f.read()\n        assert \"üìò\" in contenido or \"PROCESAR\" in contenido.upper()\n\n```",
  "tags": "[[Python]]",
  "type": "text/markdown",
  "created": "20250422211125738",
  "modified": "20250422211125738"
}