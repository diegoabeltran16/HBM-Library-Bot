{
  "title": "-src_classifier.py",
  "text": "## [[Tags]]\nPython -src_classifier.py [[--- Codigo]]\n\n```python\n# src/classifier.py\n\nfrom .utils import normalizar_texto\nimport re\n\n# ===============================\n# Diccionario de categorías Dewey\n# ===============================\nCATEGORIAS_DEWEY = {\n    \"General Works\": ([\"encyclopedia\", \"news\", \"summary\"], \"000\"),\n    \"Philosophy and Psychology\": ([\"ethics\", \"logic\", \"psychology\", \"epistemology\"], \"100\"),\n    \"Religion\": ([\"bible\", \"god\", \"theology\", \"religion\"], \"200\"),\n    \"Social Sciences\": ([\"economy\", \"education\", \"law\", \"government\", \"sociology\"], \"300\"),\n    \"Language\": ([\"grammar\", \"linguistics\", \"translation\", \"language\"], \"400\"),\n    \"Natural Sciences and Mathematics\": ([\"mathematics\", \"physics\", \"biology\", \"chemistry\", \"science\",\"física\", \"biología\", \"química\", \"ciencia\",\"mathematics\", \"physics\", \"biology\", \"chemistry\", \"science\",\n        \"fisica\", \"biologia\", \"quimica\", \"ciencia\", \"cuantica\"], \"500\"),\n    \"Technology\": ([\"engineering\", \"medicine\", \"software\", \"ai\", \"agriculture\"], \"600\"),\n    \"The Arts\": ([\"music\", \"drawing\", \"photography\", \"design\", \"sports\"], \"700\"),\n    \"Literature\": ([\"poetry\", \"novel\", \"fiction\", \"essay\", \"drama\"], \"800\"),\n    \"History and Geography\": ([\"history\", \"war\", \"civilizations\", \"travel\", \"biography\"], \"900\")\n}\n\n\ndef clasificar_documento(texto: str) -> dict:\n    \"\"\"\n    Clasifica un texto según la clasificación Dewey,\n    y extrae metadatos básicos (título, autor).\n    \"\"\"\n    categoria, dewey = clasificar_tematica(texto)\n    titulo = extraer_titulo(texto)\n    autor = extraer_autor(texto)\n\n    return {\n        \"categoria\": categoria,\n        \"dewey\": dewey,\n        \"titulo\": titulo,\n        \"autor\": autor\n    }\n\n\ndef clasificar_tematica(texto: str) -> tuple:\n    texto = normalizar_texto(texto)\n\n    for categoria, (palabras, codigo) in CATEGORIAS_DEWEY.items():\n        for palabra in palabras:\n            if re.search(rf\"\\b{palabra}\\b\", texto):\n                return categoria, codigo\n\n    return \"General Works\", \"000\"\n\n\n\ndef extraer_titulo(texto: str) -> str:\n    \"\"\"\n    Retorna la primera línea que parece título (no autor).\n    \"\"\"\n    for linea in texto.splitlines()[:10]:\n        if len(linea.strip()) > 10 and not re.search(r\"\\b(by|autor:|escrito por)\\b\", linea, re.IGNORECASE):\n            return linea.strip()\n    return \"Sin título\"\n\n\ndef extraer_autor(texto: str) -> str:\n    \"\"\"\n    Busca patrones comunes de autoría.\n    \"\"\"\n    patrones = [\n        r\"by ([A-ZÁÉÍÓÚÑ][a-záéíóúñ]+(?: [A-ZÁÉÍÓÚÑ][a-záéíóúñ]+)*)\",\n        r\"autor: ([A-ZÁÉÍÓÚÑ][a-záéíóúñ]+(?: [A-ZÁÉÍÓÚÑ][a-záéíóúñ]+)*)\",\n        r\"escrito por:? ([A-ZÁÉÍÓÚÑ][a-záéíóúñ]+(?: [A-ZÁÉÍÓÚÑ][a-záéíóúñ]+)*)\"\n    ]\n\n    for patron in patrones:\n        match = re.search(patron, texto, re.IGNORECASE)\n        if match:\n            return match.group(1)\n\n    return \"Autor desconocido\"\n\n```",
  "tags": "Python -src_classifier.py [[--- Codigo]]",
  "type": "text/markdown",
  "created": "20250423165831826",
  "modified": "20250423165831826"
}