{
  "title": "main.py",
  "text": "## [[Tags]]\n[[Python]]\n\n```python\n# main.py\n\n\"\"\"\nScript principal del Dewey Pipeline üß†üìò\nProcesa todos los archivos PDF dentro de /input/** y genera salidas en /output\n\"\"\"\n\nimport os\nfrom pathlib import Path\n\nfrom src.parser import extract_text\nfrom src.cleaner import limpiar_texto_completo\nfrom src.classifier import clasificar_documento\nfrom src.exporter import exportar_archivos\nfrom src.logger import log_evento\nfrom src.validator import validar_documento\n\n# Forzar idioma visual en consola\nos.environ[\"LANG\"] = \"es\"\n\nINPUT_DIR = \"input\"\n\ndef main():\n    print(\"üöÄ Iniciando Dewey Pipeline...\")\n\n    archivos_pdf = list(Path(INPUT_DIR).rglob(\"*.pdf\"))\n    if not archivos_pdf:\n        print(\"‚ö†Ô∏è  No se encontraron archivos PDF en la carpeta 'input/'\")\n        return\n\n    print(f\"üîç Se encontraron {len(archivos_pdf)} archivos para procesar.\")\n\n    resumen = {\n        \"procesados\": 0,\n        \"omitidos\": 0,\n        \"errores\": 0\n    }\n\n    for archivo in archivos_pdf:\n        ruta = str(archivo)\n        nombre_archivo = archivo.stem\n        tipo = Path(archivo).parent.name  # Carpeta como tipo (Book, Essay, etc.)\n\n        try:\n            # 1Ô∏è‚É£ Extraer texto\n            texto_crudo = extract_text(ruta)\n            log_evento(\"procesar\", archivo=ruta)\n\n            # 2Ô∏è‚É£ Limpiar texto\n            texto_limpio = limpiar_texto_completo(texto_crudo, modo_md=True)\n\n            # 3Ô∏è‚É£ Clasificar\n            resultado = clasificar_documento(texto_limpio)\n            categoria = resultado.get(\"categoria\")\n            dewey = resultado.get(\"dewey\")\n            titulo = resultado.get(\"titulo\")\n            autor = resultado.get(\"autor\")\n\n            # 4Ô∏è‚É£ Validar documento completo\n            es_valido, info = validar_documento(texto_limpio, titulo, autor)\n            if not es_valido:\n                log_evento(\"warning_meta\", archivo=ruta, nivel=\"WARNING\")\n                print(f\"‚ö†Ô∏è  Documento omitido: {info.get('razones', [])}\")\n                resumen[\"omitidos\"] += 1\n                continue\n\n            # 5Ô∏è‚É£ Exportar\n            exportar_archivos(tipo, titulo, texto_limpio, categoria, dewey, autor)\n\n            # 6Ô∏è‚É£ Logging visual + estructurado\n            log_evento(\"clasificado\", archivo=ruta, categoria=categoria, dewey=dewey)\n            log_evento(\"export_ok\", archivo=ruta, categoria=categoria, dewey=dewey)\n            resumen[\"procesados\"] += 1\n\n        except Exception as e:\n            log_evento(\"error_parse\", archivo=ruta, nivel=\"ERROR\")\n            print(f\"‚ùå Error procesando {ruta}: {e}\")\n            resumen[\"errores\"] += 1\n\n    print(f\"\"\"\n    Resumen del Pipeline:\n          ‚úîÔ∏è Procesados: {resumen['procesados']}\n          ‚ö†Ô∏è Omitidos: {resumen['omitidos']}\n          ‚ùå Errores: {resumen['errores']}\n\"\"\")\n\nif __name__ == \"__main__\":\n    main()\n\n```",
  "tags": "[[Python]]",
  "type": "text/markdown",
  "created": "20250422015630456",
  "modified": "20250422015630456"
}