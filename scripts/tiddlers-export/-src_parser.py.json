{
  "title": "-src_parser.py",
  "text": "## [[Tags]]\nPython -src_parser.py [[--- Codigo]]\n\n```python\n# src/parser.py\n\n\"\"\"\nEste módulo se encarga de extraer texto de archivos PDF usando la librería más adecuada\nsegún su estructura. Integra PyMuPDF para PDFs simples y pdfplumber para casos complejos.\nTambién filtra bloques sospechosos como fórmulas matemáticas o imágenes.\n\"\"\"\n\nfrom .cleaner import limpiar_texto\nfrom .utils import es_pdf_complejo, contiene_formula\n\ndef extract_text(ruta_pdf):\n    \"\"\"\n    Punto de entrada principal del parser. Decide el extractor adecuado\n    y retorna el texto limpio y usable.\n    \"\"\"\n    if es_pdf_complejo(ruta_pdf):\n        texto_crudo = extract_with_pdfplumber(ruta_pdf)\n    else:\n        texto_crudo = extract_with_pymupdf(ruta_pdf)\n\n    return limpiar_texto(texto_crudo)\n\n\ndef extract_with_pymupdf(ruta_pdf):\n    \"\"\"\n    Extrae texto con PyMuPDF, ideal para PDFs simples y rápidos.\n    Filtra bloques vacíos y con símbolos sospechosos.\n    \"\"\"\n    import fitz\n    texto = []\n    doc = fitz.open(ruta_pdf)\n\n    for page in doc:\n        contenido = page.get_text()\n        if contiene_formula(contenido):\n            continue\n        texto.append(contenido)\n\n    doc.close()\n    return \"\\n\".join(texto)\n\n\ndef extract_with_pdfplumber(ruta_pdf):\n    \"\"\"\n    Extrae texto con pdfplumber, más robusto para PDFs con múltiples columnas o tablas.\n    También filtra fórmulas y bloques sospechosos.\n    \"\"\"\n    import pdfplumber\n    texto = []\n\n    with pdfplumber.open(ruta_pdf) as pdf:\n        for page in pdf.pages:\n            contenido = page.extract_text()\n            if contiene_formula(contenido):\n                continue\n            texto.append(contenido)\n\n    return \"\\n\".join(texto)\n\n```",
  "tags": "Python -src_parser.py [[--- Codigo]]",
  "type": "text/markdown",
  "created": "20250423165831841",
  "modified": "20250423165831841"
}