{
  "title": "src_cleaner.py",
  "text": "## [[Tags]]\n[[Python]]\n\n```python\n# src/cleaner.py\n\nimport re\nimport unicodedata\n\n# 游댢 Lista de s칤mbolos decorativos considerados como \"ruido visual\"\nSIMBOLOS_RUIDO = {'----', '***', '///', '...', '__', '==', '~~~', '====='}\n\n# 游댳 1. Normaliza caracteres Unicode a forma NFC\ndef normalizar_unicode(texto):\n    \"\"\"\n    Normaliza caracteres a una forma est치ndar para evitar errores de codificaci칩n.\n    \"\"\"\n    return unicodedata.normalize(\"NFC\", texto)\n\n# 游댳 2. Elimina l칤neas vac칤as o compuestas solo por s칤mbolos decorativos\ndef eliminar_lineas_ruido(texto):\n    \"\"\"\n    Filtra l칤neas que son solo s칤mbolos, guiones, etc.\n    \"\"\"\n    lineas_limpias = []\n    for linea in texto.split('\\n'):\n        strip = linea.strip()\n        if not strip:\n            continue\n        if strip in SIMBOLOS_RUIDO:\n            continue\n        if re.match(r'^[\\-\\*\\.\\|\\\\_=~]{3,}$', strip):\n            continue\n        if len(strip) < 3 and not strip.isalpha():\n            continue\n        lineas_limpias.append(linea)\n    return '\\n'.join(lineas_limpias)\n\n# 游댳 3. Heur칤stica b치sica para detectar encabezados o t칤tulos\ndef detectar_encabezado(linea):\n    \"\"\"\n    Detecta si una l칤nea es un encabezado usando heur칤sticas comunes.\n    \"\"\"\n    if linea.isupper() and len(linea.split()) < 10:\n        return True\n    if re.match(r'^\\d+(\\.\\d+)*\\s+', linea):\n        return True\n    if re.search(r'\\b(Resumen|Introducci칩n|Conclusi칩n|Referencias)\\b', linea, re.IGNORECASE):\n        return True\n    return False\n\n# 游댳 4. Marca l칤neas detectadas como encabezados con sintaxis Markdown (##)\ndef agregar_markdown_headers(texto):\n    \"\"\"\n    Convierte encabezados detectados en encabezados Markdown (nivel 2).\n    \"\"\"\n    lineas = texto.split('\\n')\n    nuevas = []\n    for linea in lineas:\n        if detectar_encabezado(linea):\n            nuevas.append(f\"## {linea.strip()}\")\n        else:\n            nuevas.append(linea)\n    return '\\n'.join(nuevas)\n\n# 游댳 5. Limpieza general: saltos, espacios y saltos sem치nticos entre p치rrafos\ndef limpiar_texto(texto):\n    \"\"\"\n    Elimina saltos de l칤nea innecesarios, normaliza espacios y mejora legibilidad.\n    \"\"\"\n    texto = texto.replace('\\r\\n', '\\n')\n    texto = re.sub(r'(?<=[a-z0-9\\.\\)])\\n(?=[A-Z])', '\\n\\n', texto)  # salto entre frases conectadas\n    texto = re.sub(r'\\n{3,}', '\\n\\n', texto)  # m치ximo 2 saltos seguidos\n    texto = re.sub(r'[ \\t]+', ' ', texto)\n    texto = re.sub(r' *\\n *', '\\n', texto)\n    return texto.strip()\n\n# 游댳 6. Pipeline principal de limpieza, configurable por flags\ndef limpiar_texto_completo(texto, modo_md=False, filtrar_ruido=True):\n    \"\"\"\n    Ejecuta la limpieza completa con opciones para markdown y filtrado de ruido.\n\n    Args:\n        texto (str): El texto a limpiar.\n        modo_md (bool): Si True, convierte encabezados en ## estilo Markdown.\n        filtrar_ruido (bool): Si True, elimina l칤neas de bajo valor visual.\n\n    Returns:\n        str: El texto limpio y procesado.\n    \"\"\"\n    texto = normalizar_unicode(texto)\n    if filtrar_ruido:\n        texto = eliminar_lineas_ruido(texto)\n    texto = limpiar_texto(texto)\n    if modo_md:\n        texto = agregar_markdown_headers(texto)\n    return texto\n\n```",
  "tags": "[[Python]]",
  "type": "text/markdown",
  "created": "20250422015630459",
  "modified": "20250422015630459"
}