{
  "title": "-src_ocr.py",
  "text": "## [[Tags]]\n-src_ocr.py [[--- Codigo]] [[--üß¨ src/]]\n\n```python\n# üëÅÔ∏è src/ocr.py ‚Äì Gen Visual OCR Inteligente\n\n# ---\n# Este m√≥dulo es responsable de transformar PDFs escaneados en texto legible\n# usando Tesseract OCR. Se plantea como un gen especializado, activado solo si\n# el sistema detecta que el PDF no contiene texto extra√≠ble directamente.\n#\n# üí¨ Reflexi√≥n: ¬øQu√© pasa si la calidad de imagen es mala? ¬øY si las p√°ginas tienen rotaci√≥n?\n# ¬øDeber√≠amos permitir preprocesamiento (contraste, binarizaci√≥n)? Eso puede ser una Vuelta 3...\n\nfrom pdf2image import convert_from_path\nfrom pdf2image.exceptions import PDFInfoNotInstalledError\nfrom PIL import Image\nimport pytesseract\nimport os\nimport shutil\nimport fitz  # PyMuPDF como alternativa\nfrom pathlib import Path\n\n# ‚úÖ Ruta local esperada donde se instal√≥ Tesseract\nTESSERACT_LOCAL_PATH = Path.home() / \"AppData\" / \"Local\" / \"Programs\" / \"Tesseract-OCR\" / \"tesseract.exe\"\nif TESSERACT_LOCAL_PATH.exists():\n    pytesseract.pytesseract.tesseract_cmd = str(TESSERACT_LOCAL_PATH)\n    print(f\"‚úÖ Tesseract detectado en: {TESSERACT_LOCAL_PATH}\")\nelse:\n    print(\"‚ö†Ô∏è No se encontr√≥ tesseract.exe en la ruta local esperada.\")\n\n# ‚úÖ Ruta local esperada para Poppler (solo Windows)\nPOPPLER_LOCAL_PATH = Path.home() / \"AppData\" / \"Local\" / \"Programs\" / \"poppler-24.08.0\" / \"Library\" / \"bin\"\nif not POPPLER_LOCAL_PATH.exists():\n    POPPLER_LOCAL_PATH = None\n    print(\"‚ö†Ô∏è No se encontr√≥ Poppler en la ruta local esperada.\")\nelse:\n    print(f\"‚úÖ Poppler detectado en: {POPPLER_LOCAL_PATH}\")\n\n# üìÅ Carpeta temporal para im√°genes OCR\nCARPETA_TEMP = \"temp_ocr\"\n\n\ndef convertir_pdf_a_imagenes(pdf_path: str, poppler_path=POPPLER_LOCAL_PATH) -> list[Image.Image]:\n    \"\"\"\n    Convierte cada p√°gina del PDF en una imagen (formato PNG), usando pdf2image.\n    Si Poppler no est√° disponible, lanza excepci√≥n que puede ser manejada por fallback.\n    \"\"\"\n    os.makedirs(CARPETA_TEMP, exist_ok=True)\n    try:\n        imagenes = convert_from_path(pdf_path, poppler_path=poppler_path)\n        rutas_imagenes = []\n        for i, imagen in enumerate(imagenes):\n            ruta = os.path.join(CARPETA_TEMP, f\"pagina_{i+1}.png\")\n            imagen.save(ruta, \"PNG\")\n            rutas_imagenes.append(ruta)\n        return [Image.open(ruta) for ruta in rutas_imagenes]\n    except PDFInfoNotInstalledError:\n        raise\n\n\ndef convertir_pdf_con_fitzz(pdf_path: str) -> list[Image.Image]:\n    \"\"\"\n    Conversi√≥n alternativa: rasteriza el PDF usando PyMuPDF.\n    üî¨ Menor calidad que Poppler, pero √∫til cuando este no est√° disponible.\n    \"\"\"\n    doc = fitz.open(pdf_path)\n    imagenes = []\n    for page in doc:\n        pix = page.get_pixmap(matrix=fitz.Matrix(2, 2))\n        img = Image.frombytes(\"RGB\", [pix.width, pix.height], pix.samples)\n        imagenes.append(img)\n    return imagenes\n\n\ndef extraer_texto_ocr(imagen: Image.Image, lang: str = 'eng') -> str:\n    return pytesseract.image_to_string(imagen, lang=lang)\n\n\ndef borrar_temporales():\n    if os.path.exists(CARPETA_TEMP):\n        shutil.rmtree(CARPETA_TEMP)\n\n\ndef ocr_completo(pdf_path: str, lang: str = \"eng\") -> str:\n    imagenes = convertir_pdf_a_imagenes(pdf_path)\n    texto_total = []\n    for idx, imagen in enumerate(imagenes):\n        texto = extraer_texto_ocr(imagen, lang=lang)\n        print(f\"[OCR] P√°gina {idx + 1} procesada\")\n        texto_total.append(texto)\n    borrar_temporales()\n    return \"\\n\".join(texto_total)\n\n\ndef ocr_completo_inteligente(pdf_path: str, lang: str = \"eng\") -> str:\n    \"\"\"\n    Versi√≥n tolerante del OCR: usa Poppler si est√° disponible, y fallback con PyMuPDF si no.\n\n    üìö Ideal para facilitar pruebas locales, sin obligar a instalar binarios externos.\n    \"\"\"\n    try:\n        return ocr_completo(pdf_path, lang=lang)\n    except PDFInfoNotInstalledError:\n        print(\"‚ö†Ô∏è Poppler no disponible. Usando modo OCR Lite (calidad reducida).\")\n        imagenes = convertir_pdf_con_fitzz(pdf_path)\n        texto_total = []\n        for idx, imagen in enumerate(imagenes):\n            texto = extraer_texto_ocr(imagen, lang=lang)\n            print(f\"[OCR Lite] P√°gina {idx + 1} procesada\")\n            texto_total.append(texto)\n        return \"\\n\".join(texto_total)\n\n```",
  "tags": "-src_ocr.py [[--- Codigo]] [[--üß¨ src/]]",
  "type": "text/markdown",
  "created": "20250424205039121",
  "modified": "20250424205039121"
}