{
  "title": "-src_utils.py",
  "text": "## [[Tags]]\nPython -src_utils.py [[--- Codigo]]\n\n```python\n\"\"\"\nFunciones auxiliares para soporte al parser:\n- Evaluación de complejidad estructural de un PDF\n- Detección de fórmulas matemáticas u objetos sospechosos\n- Normalización de texto para búsqueda semántica\n- Cálculo de hash MD5 para trazabilidad genética de documentos\n\"\"\"\n\nfrom unidecode import unidecode\nimport fitz\nimport re\nimport hashlib\n\ndef es_pdf_complejo(ruta_pdf, max_paginas=3, umbral=8):\n    \"\"\"\n    Determina si un PDF es complejo por su estructura visual:\n    - Muchos bloques (columnas, tablas, secciones)\n    - O bien, sin bloques (imagen o escaneado)\n\n    Esto permite activar estrategias especiales como OCR o fallback.\n\n    Retorna:\n    - True si el PDF es complejo por layout o ausencia de texto\n    \"\"\"\n    doc = fitz.open(ruta_pdf)\n    paginas = min(len(doc), max_paginas)\n    total_bloques = 0\n\n    for i in range(paginas):\n        bloques = doc[i].get_text(\"blocks\")\n        total_bloques += len(bloques)\n\n    doc.close()\n\n    if total_bloques == 0:\n        return True  # Escaneado o sin texto detectable\n\n    promedio = total_bloques / paginas\n    return promedio > umbral\n\ndef contiene_formula(texto):\n    \"\"\"\n    Detecta líneas con alta densidad de símbolos matemáticos.\n    También filtra entradas muy cortas (probables imágenes).\n    \"\"\"\n    if not texto or len(texto.strip()) < 10:\n        return True\n\n    simbolos = re.findall(r\"[^a-zA-Z0-9\\s]\", texto)\n    proporcion = len(simbolos) / len(texto)\n\n    return proporcion > 0.3\n\ndef normalizar_texto(texto: str) -> str:\n    \"\"\"\n    Convierte a minúsculas y remueve acentos. Ideal para matching.\n    \"\"\"\n    return unidecode(texto.lower())\n\ndef calcular_hash_md5(path_pdf: str) -> str:\n    \"\"\"\n    Calcula un hash MD5 del contenido binario del archivo PDF.\n    Este hash actúa como identificador único del documento.\n    \"\"\"\n    with open(path_pdf, 'rb') as f:\n        contenido = f.read()\n        hash_md5 = hashlib.md5(contenido).hexdigest()\n    return hash_md5\n```",
  "tags": "Python -src_utils.py [[--- Codigo]]",
  "type": "text/markdown",
  "created": "20250424161220332",
  "modified": "20250424161220332"
}