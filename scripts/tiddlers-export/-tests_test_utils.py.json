{
  "title": "-tests_test_utils.py",
  "text": "## [[Tags]]\n-tests_test_utils.py [[--- Codigo]] [[--🧪 tests/]] -src_utils.py\n\n```python\nimport sys\nfrom pathlib import Path\nimport pytest\n\n# 🔧 Asegura visibilidad del módulo src/\nsys.path.append(str(Path(__file__).resolve().parents[1]))\n\nfrom src.utils import (\n    es_pdf_complejo,\n    contiene_formula,\n    normalizar_texto,\n    calcular_hash_md5\n)\n\n# ─────────────────────────────────────────────────────────────\n# Tests de evaluación estructural de PDF\n# ─────────────────────────────────────────────────────────────\n\ndef test_es_pdf_complejo_true():\n    # Este PDF tiene múltiples bloques → considerado complejo\n    ruta = \"tests/fixtures/pdf_simple.pdf\"\n    assert es_pdf_complejo(ruta, umbral=6) is True\n\ndef test_es_pdf_complejo_false():\n    # Este PDF no tiene bloques → ahora también se considera complejo\n    ruta = \"tests/fixtures/pdf_formula.pdf\"\n    assert es_pdf_complejo(ruta, umbral=6) is True  # Se considera complejo si no hay texto\n\n# ─────────────────────────────────────────────────────────────\n# Tests de heurística sobre fórmulas\n# ─────────────────────────────────────────────────────────────\n\ndef test_contiene_formula_true():\n    texto = \"∫(x) dx + ∑(n=1)^∞\"\n    assert contiene_formula(texto) is True\n\ndef test_contiene_formula_false():\n    texto = \"Este es un texto normal, sin símbolos matemáticos raros.\"\n    assert contiene_formula(texto) is False\n\n# ─────────────────────────────────────────────────────────────\n# Tests de normalización semántica\n# ─────────────────────────────────────────────────────────────\n\ndef test_normalizar_texto():\n    texto = \"Árbol Con Raíces y NÚMEROS\"\n    resultado = normalizar_texto(texto)\n    assert resultado == \"arbol con raices y numeros\"\n\n# ─────────────────────────────────────────────────────────────\n# Test de trazabilidad genética (hashing)\n# ─────────────────────────────────────────────────────────────\n\ndef test_calcular_hash_md5(tmp_path):\n    # Creamos un PDF mínimo simulado\n    archivo = tmp_path / \"mini.pdf\"\n    archivo.write_bytes(b\"%PDF-1.4\\n%EOF\")\n\n    hash_val = calcular_hash_md5(str(archivo))\n    assert isinstance(hash_val, str)\n    assert len(hash_val) == 32  # Longitud típica del hash MD5\n\n```",
  "tags": "-tests_test_utils.py [[--- Codigo]] [[--🧪 tests/]] -src_utils.py",
  "type": "text/markdown",
  "created": "20250424205039151",
  "modified": "20250424205039151"
}