{
  "title": "-tests_test_parser.py",
  "text": "## [[Tags]]\n-tests_test_parser.py [[--- Codigo]] [[--ðŸ§ª tests/]] -src_parser.py\n\n```python\nimport sys\nfrom pathlib import Path\nimport pytest\n\n# ðŸ”§ Asegura que src/ sea visible desde cualquier entorno\nsys.path.append(str(Path(__file__).resolve().parents[1]))\n\nfrom src.parser import extract_text, es_pdf_complejo\n\n# ---\n# ðŸ§ª test_parser.py â€“ Pruebas integradas del mÃ³dulo de parsing\n#\n# Incluye tests para:\n# - PDFs normales (texto extraÃ­ble directamente)\n# - PDFs escaneados (requieren OCR)\n# - ValidaciÃ³n de la heurÃ­stica `es_pdf_complejo`\n# - Comportamiento de limpieza semÃ¡ntica\n\n\ndef test_extraccion_pdf_simple():\n    texto = extract_text(\"tests/fixtures/pdf_simple.pdf\")\n    assert len(texto) > 100  # Texto mÃ­nimo esperado\n\n\ndef test_descarta_formula():\n    texto = extract_text(\"tests/fixtures/pdf_formula.pdf\")\n    assert \"âˆ«\" not in texto  # Esperamos limpieza de caracteres simbÃ³licos si estÃ¡n mal interpretados\n\n\ndef test_pdf_texto_normal():\n    texto = extract_text(\"tests/fixtures/pdf_textual.pdf\")\n    assert isinstance(texto, str)\n    assert len(texto) > 50\n    assert \"introducciÃ³n\" in texto.lower()\n\n\ndef test_pdf_necesita_ocr():\n    texto = extract_text(\"tests/fixtures/pdf_escaneado.pdf\")\n    assert isinstance(texto, str)\n    assert len(texto.strip()) > 20\n\n\ndef test_heuristica_es_pdf_complejo():\n    assert es_pdf_complejo(\"tests/fixtures/pdf_escaneado.pdf\") is True\n    assert es_pdf_complejo(\"tests/fixtures/pdf_textual.pdf\") is False\n\n```",
  "tags": "-tests_test_parser.py [[--- Codigo]] [[--ðŸ§ª tests/]] -src_parser.py",
  "type": "text/markdown",
  "created": "20250424205039145",
  "modified": "20250424205039145"
}