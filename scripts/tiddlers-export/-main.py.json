{
  "title": "-main.py",
  "text": "## [[Tags]]\n-main.py [[--- Codigo]] [[--üß¨ src/]]\n\n```python\nimport os\nimport argparse\nfrom pathlib import Path\n\nfrom src.parser import extract_text\nfrom src.cleaner import limpiar_texto_completo\nfrom src.enhancer import enriquecer_texto\nfrom src.classifier import clasificar_documento\nfrom src.exporter import exportar_archivos\nfrom src.logger import log_evento\nfrom src.validator import validar_documento\nfrom src.utils import calcular_hash_md5  # Para trazabilidad √∫nica del documento\n\n# Forzar idioma visual en consola a espa√±ol\nos.environ[\"LANG\"] = \"es\"\n\nINPUT_DIR = \"input\"\n\ndef main(debug: bool = False):\n    print(\"üöÄ Iniciando Dewey Pipeline...\")\n\n    archivos_pdf = list(Path(INPUT_DIR).rglob(\"*.pdf\"))\n    if not archivos_pdf:\n        print(\"‚ö†Ô∏è No se encontraron archivos PDF en la carpeta 'input/'\")\n        return\n\n    total = len(archivos_pdf)\n    errores = 0\n    procesados = 0\n\n    if debug:\n        print(f\"üîç Se encontraron {total} archivos para procesar.\")\n\n    for archivo in archivos_pdf:\n        ruta = str(archivo)\n        try:\n            # Extracci√≥n y logging inicial\n            if debug:\n                print(f\"\\nüìò Procesando: {ruta}\")\n            texto_crudo = extract_text(ruta)\n            log_evento(\"procesar\", archivo=ruta)\n\n            # Limpieza y enriquecimiento\n            texto_limpio = limpiar_texto_completo(texto_crudo, modo_md=True)\n            texto_enriquecido = enriquecer_texto(texto_limpio, archivo=ruta, debug=debug)\n\n            # Clasificaci√≥n\n            resultado = clasificar_documento(texto_enriquecido)\n            categoria = resultado.get(\"categoria\")\n            dewey = resultado.get(\"dewey\")\n            titulo = resultado.get(\"titulo\")\n            autor = resultado.get(\"autor\")\n            print(f\"üìñ Clasificado como: {categoria} ({dewey})\")\n            print(f\"üìù T√≠tulo: {titulo or '[Sin t√≠tulo]'} | Autor: {autor or '[Sin autor]'}\")\n\n            # Hash para trazabilidad\n            hash_doc = calcular_hash_md5(ruta)\n\n            # Validaci√≥n sem√°ntica (solo logging, no omitir)\n            es_valido, info = validar_documento(texto_enriquecido, ruta, hash_doc)\n            if debug and info.get('razones'):\n                for razon in info['razones']:\n                    print(f\"‚ö†Ô∏è {razon}\")\n\n            # Exportar siempre\n            exportar_archivos(\n                tipo=Path(archivo).parent.name,\n                titulo=titulo,\n                texto=texto_enriquecido,\n                categoria=categoria,\n                dewey=dewey,\n                autor=autor,\n                hash_doc=hash_doc\n            )\n\n            # Logging final\n            log_evento(\"clasificado\", archivo=ruta, categoria=categoria, dewey=dewey)\n            log_evento(\"export_ok\", archivo=ruta, categoria=categoria, dewey=dewey)\n            procesados += 1\n\n        except Exception as e:\n            errores += 1\n            log_evento(\"error_parse\", archivo=ruta, nivel=\"ERROR\", mensaje=str(e))\n            if debug:\n                print(f\"‚ùå Error procesando {ruta}: {e}\")\n\n    # Resumen final en estilo multilinea\n    print(f\"\"\"\nüìä Resumen del Pipeline:\n  ‚úîÔ∏è Procesados: {procesados}\n  ‚ùå Errores: {errores}\n\"\"\")\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Dewey Pipeline ‚Äì Procesador de PDFs enriquecidos\")\n    parser.add_argument(\n        \"--debug\", action=\"store_true\",\n        help=\"Muestra detalles de cada paso del pipeline\"\n    )\n    args = parser.parse_args()\n\n    main(debug=args.debug)\n\n```",
  "tags": "-main.py [[--- Codigo]] [[--üß¨ src/]]",
  "type": "text/markdown",
  "created": "20250424205039058",
  "modified": "20250424205039058"
}