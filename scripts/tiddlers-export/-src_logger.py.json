{
  "title": "-src_logger.py",
  "text": "## [[Tags]]\nPython -src_logger.py -tests_test_logger.py [[--- Codigo]]\n\n```python\n# src/logger.py\n\n\"\"\"\nüìò Logger persistente para Dewey Pipeline\nRegistra eventos con formato estructurado (.log y .jsonl) y visual (emoji).\nCompatible con trazabilidad por corrida e integraci√≥n futura.\n\nüß± Estructura del JSON generado (1 l√≠nea por evento):\n{\n    \"timestamp\": \"2025-04-10T15:42:21.543Z\",\n    \"ejecucion\": \"c78fbccbeed045b5919e8a7e79dd4d73\",\n    \"evento\": \"clasificado\",\n    \"archivo\": \"input/Libro.pdf\",\n    \"categoria\": \"Tecnolog√≠a\",\n    \"dewey\": \"600\",\n    \"nivel\": \"INFO\"\n}\n\"\"\"\n\nimport os\nimport json\nimport uuid\nfrom datetime import datetime\nfrom pathlib import Path\nfrom loguru import logger\n\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n# üåç Diccionario multilenguaje con emojis\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nMENSAJES = {\n    \"procesar\": {\n        \"es\": \"üìò Procesando: {archivo}\",\n        \"en\": \"üìò Processing: {archivo}\"\n    },\n    \"clasificado\": {\n        \"es\": \"üìñ Clasificado como: {categoria} ({dewey})\",\n        \"en\": \"üìñ Classified as: {categoria} ({dewey})\"\n    },\n    \"export_ok\": {\n        \"es\": \"‚úîÔ∏è Exportaci√≥n completa: [{archivo}]\",\n        \"en\": \"‚úîÔ∏è Export completed: [{archivo}]\"\n    },\n    \"warning_meta\": {\n        \"es\": \"‚ö†Ô∏è Metadatos incompletos o inv√°lidos\",\n        \"en\": \"‚ö†Ô∏è Incomplete or invalid metadata\"\n    },\n    \"warning_texto_corto\": {\n        \"es\": \"‚ö†Ô∏è Texto extra√≠do demasiado corto. Archivo omitido.\",\n        \"en\": \"‚ö†Ô∏è Extracted text too short. Skipping file.\"\n    },\n    \"error_parse\": {\n        \"es\": \"‚ùå Error procesando archivo: {archivo}\",\n        \"en\": \"‚ùå Error processing file: {archivo}\"\n    },\n    \"archivo_inaccesible\": {\n        \"es\": \"‚ùå Archivo inaccesible o corrupto: {archivo}\",\n        \"en\": \"‚ùå Unreadable or corrupt file: {archivo}\"\n    }\n}\n\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n# ‚öôÔ∏è Configuraci√≥n global y persistencia\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nLANG = os.getenv(\"LANG\", \"es\")\nLOG_LEVEL = os.getenv(\"LOG_LEVEL\", \"INFO\").upper()\nEXECUTION_ID = os.getenv(\"EXECUTION_ID\", uuid.uuid4().hex)\n\nLOGS_DIR = Path(\"output/logs\")\nLOGS_DIR.mkdir(parents=True, exist_ok=True)\n\ntimestamp = datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\nglobal_log_txt = LOGS_DIR / f\"run_{timestamp}.log\"\nglobal_log_jsonl = LOGS_DIR / f\"run_{timestamp}.jsonl\"\n\nlogger.remove()\nlogger.add(global_log_txt, level=LOG_LEVEL, format=\"{time} | {level} | {message}\")\nlogger.add(global_log_jsonl, serialize=True, level=LOG_LEVEL)\n\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n# üß© Funci√≥n principal de logging\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\ndef log_evento(evento: str, archivo: str = \"\", categoria: str = \"\", dewey: str = \"\", nivel: str = \"INFO\") -> str:\n    global LANG\n    LANG = os.getenv(\"LANG\", \"es\")\n    idioma = MENSAJES.get(evento, {}).get(LANG, evento)\n    mensaje = idioma.format(archivo=archivo, categoria=categoria, dewey=dewey)\n    \n    # Visual amigable (terminal)\n    print(mensaje)\n\n    # Entrada estructurada\n    log_data = {\n        \"timestamp\": datetime.now().isoformat(),\n        \"ejecucion\": EXECUTION_ID,\n        \"evento\": evento,\n        \"archivo\": archivo,\n        \"categoria\": categoria,\n        \"dewey\": dewey,\n        \"nivel\": nivel.upper(),\n    }\n\n    # Log .log plano\n    try:\n        logger.log(nivel.upper(), mensaje)\n    except Exception as e:\n        print(f\"‚ùå Error escribiendo en log plano: {e}\")\n\n    # Log .jsonl\n    try:\n        with open(global_log_jsonl, \"a\", encoding=\"utf-8\") as f:\n            f.write(json.dumps(log_data) + \"\\n\")\n    except Exception as e:\n        print(f\"‚ùå Error escribiendo en log JSONL: {e}\")\n\n    # Log individual por archivo\n    if archivo:\n        try:\n            archivo_log = LOGS_DIR / f\"{Path(archivo).stem}.log\"\n            with open(archivo_log, \"a\", encoding=\"utf-8\") as f:\n                f.write(f\"{log_data['timestamp']} | {evento.upper()} | {mensaje}\\n\")\n        except Exception as e:\n            print(f\"‚ùå Error escribiendo log individual: {e}\")\n\n    return mensaje\n\n```",
  "tags": "Python -src_logger.py -tests_test_logger.py [[--- Codigo]]",
  "type": "text/markdown",
  "created": "20250423165831841",
  "modified": "20250423165831841"
}