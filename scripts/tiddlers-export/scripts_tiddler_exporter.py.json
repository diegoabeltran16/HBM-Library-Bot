{
  "title": "scripts_tiddler_exporter.py",
  "text": "## [[Tags]]\n[[Python]]\n\n```python\n\"\"\"\nüì¶ Tiddler Exporter ‚Äì scripts/tiddler_exporter.py\n\nEste m√≥dulo recorre los archivos fuente del proyecto, detecta cambios mediante hashes,\nextrae etiquetas (tags) autom√°ticamente en base a la ruta y extensi√≥n, y exporta un archivo\npor cada entrada como tiddler individual en formato JSON, listo para importar en TiddlyWiki.\n\nüîí 100% en Python, sin dependencias externas. Ideal para documentaci√≥n viva, visual y offline.\n\"\"\"\n\nimport os\nimport json\nimport hashlib\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import List\n\n# ==========================\n# ‚öôÔ∏è CONFIGURACI√ìN GENERAL\n# ==========================\n\nROOT_DIR = Path(__file__).resolve().parents[1]  # ra√≠z del proyecto\nSCRIPT_DIR = Path(__file__).parent\nOUTPUT_DIR = SCRIPT_DIR / \"tiddlers-export\"\nHASH_FILE = SCRIPT_DIR / \".hashes.json\"\n\nVALID_EXTENSIONS = ['.py', '.md', '.json', '.sh', '.html', '.css']\nIGNORE_DIRS = ['.git', '__pycache__', 'venv', 'dist', 'node_modules', 'output', 'tests']\n\nLANGUAGE_MAP = {\n    '.py': 'python',\n    '.md': 'markdown',\n    '.json': 'json',\n    '.sh': 'bash',\n    '.html': 'html',\n    '.css': 'css'\n}\n\nTAG_MAP = [\n    {\"dir\": \"src\", \"tag\": \"[[--- Codigo]]\"},\n    {\"dir\": \"tests\", \"tag\": \"[[--- Test]]\"},\n    {\"dir\": \"scripts\", \"tag\": \"[[--- Automatizacion]]\"},\n    {\"ext\": \".md\", \"tag\": \"[[--- Documentacion]]\"},\n    {\"ext\": \".py\", \"tag\": \"[[Python]]\"},\n    {\"ext\": \".json\", \"tag\": \"[[JSON]]\"},\n    {\"ext\": \".sh\", \"tag\": \"[[Shell]]\"},\n]\n\n# ==============================\n# üîé FUNCIONES AUXILIARES\n# ==============================\n\ndef get_all_files(directory: Path) -> List[Path]:\n    \"\"\"Recorre recursivamente el proyecto y devuelve los archivos v√°lidos.\"\"\"\n    all_files = []\n    for root, dirs, files in os.walk(directory):\n        # Ignorar carpetas no deseadas\n        dirs[:] = [d for d in dirs if d not in IGNORE_DIRS]\n        for file in files:\n            ext = Path(file).suffix\n            if ext in VALID_EXTENSIONS:\n                all_files.append(Path(root) / file)\n    return all_files\n\ndef get_hash(content: str) -> str:\n    return hashlib.sha1(content.encode('utf-8')).hexdigest()\n\ndef detect_tags(file_path: Path) -> List[str]:\n    \"\"\"Asigna tags autom√°ticamente seg√∫n carpeta o extensi√≥n.\"\"\"\n    tags = []\n    rel_path = str(file_path.relative_to(ROOT_DIR))\n    for rule in TAG_MAP:\n        if rule.get(\"dir\") and f\"/{rule['dir']}/\" in rel_path:\n            tags.append(rule[\"tag\"])\n        if rule.get(\"ext\") and rel_path.endswith(rule[\"ext\"]):\n            tags.append(rule[\"tag\"])\n    return list(set(tags))  # evitar duplicados\n\ndef safe_title(path: Path) -> str:\n    \"\"\"Convierte la ruta del archivo en un t√≠tulo v√°lido para TiddlyWiki.\"\"\"\n    return str(path.relative_to(ROOT_DIR)).replace(os.sep, '_')\n\n# ==============================\n# üöÄ EXPORTADOR PRINCIPAL\n# ==============================\n\ndef export_tiddlers(dry_run=False):\n    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)\n    if HASH_FILE.exists():\n        with open(HASH_FILE, 'r', encoding='utf-8') as f:\n            old_hashes = json.load(f)\n    else:\n        old_hashes = {}\n\n    new_hashes = {}\n    changed_files = []\n\n    for file_path in get_all_files(ROOT_DIR):\n        rel_path = str(file_path.relative_to(ROOT_DIR))\n        ext = file_path.suffix\n        lang = LANGUAGE_MAP.get(ext, 'text')\n        content = file_path.read_text(encoding='utf-8')\n        hash_now = get_hash(content)\n        new_hashes[rel_path] = hash_now\n\n        if old_hashes.get(rel_path) == hash_now:\n            continue  # sin cambios\n\n        tags = detect_tags(file_path)\n        title = safe_title(file_path)\n\n        # üß† Contenido markdown con tags visuales arriba\n        text_block = f\"## [[Tags]]\\n{' '.join(tags)}\\n\\n```{lang}\\n{content}\\n```\"\n\n        tiddler = {\n            \"title\": title,\n            \"text\": text_block,\n            \"tags\": ' '.join(tags),\n            \"type\": \"text/markdown\",\n            \"created\": datetime.utcnow().strftime('%Y%m%d%H%M%S%f')[:17],\n            \"modified\": datetime.utcnow().strftime('%Y%m%d%H%M%S%f')[:17],\n        }\n\n        if dry_run:\n            print(f\"[dry-run] Detectado cambio en: {rel_path}\")\n            continue\n\n        out_file = OUTPUT_DIR / f\"{title}.json\"\n        with open(out_file, 'w', encoding='utf-8') as f:\n            json.dump(tiddler, f, indent=2, ensure_ascii=False)\n\n        changed_files.append(rel_path)\n\n    if not dry_run:\n        with open(HASH_FILE, 'w', encoding='utf-8') as f:\n            json.dump(new_hashes, f, indent=2)\n\n    print(f\"\\nüì¶ Archivos modificados: {len(changed_files)}\")\n    if changed_files:\n        for path in changed_files:\n            print(f\"  ‚úÖ Exportado: {path}\")\n    else:\n        print(\"  üîÅ Sin cambios detectados.\")\n\n# ==============================\n# üß™ ENTRADA DIRECTA (CLI SIMPLE)\n# ==============================\n\nif __name__ == \"__main__\":\n    import sys\n    dry = '--dry-run' in sys.argv\n    export_tiddlers(dry_run=dry)\n\n```",
  "tags": "[[Python]]",
  "type": "text/markdown",
  "created": "20250422015630457",
  "modified": "20250422015630457"
}