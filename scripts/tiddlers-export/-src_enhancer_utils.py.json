{
  "title": "-src_enhancer_utils.py",
  "text": "## [[Tags]]\n[[--- ðŸ§¬ Por Clasificar]]\n\n```python\n\"\"\"\nðŸ“˜ enhancer_utils.py â€“ Funciones auxiliares para el gen enhancer\n\nðŸ§  PropÃ³sito del mÃ³dulo:\nEste archivo actÃºa como un gen auxiliar especializado para `enhancer.py`, y contiene funciones de soporte\nligadas a:\n- AcumulaciÃ³n de estadÃ­sticas de reparaciÃ³n\n- AplicaciÃ³n de diccionarios OCR personalizados\n- Futuras reglas heurÃ­sticas o nlp ligeras\n\nEsta separaciÃ³n refuerza el principio de modularidad semÃ¡ntica y trazabilidad helicoidal.\n\"\"\"\n\nfrom typing import Dict, Tuple\nimport re\n\n# â†’ Esta funciÃ³n permite combinar los resultados de varias reparaciones\n# sin sobreescribir las claves, acumulando los valores numÃ©ricos.\ndef acumular_stats(global_stats: Dict[str, float], nuevos_stats: Dict[str, float]) -> Dict[str, float]:\n    \"\"\"\n    ðŸ”¢ Acumulador de estadÃ­sticas numÃ©ricas de funciones correctoras.\n\n    Ideal para contar cuÃ¡ntas correcciones se han hecho en total al texto.\n    No modifica valores no numÃ©ricos.\n    \"\"\"\n    for clave, valor in nuevos_stats.items():\n        if isinstance(valor, (int, float)):\n            global_stats[clave] = global_stats.get(clave, 0) + valor\n    return global_stats\n\n# â†’ Esta funciÃ³n aplica un diccionario de reemplazos OCR comunes\n# El diccionario puede ser cargado desde un JSON externo (ej: \"ocr_dict.json\")\ndef aplicar_diccionario(texto: str, diccionario: Dict[str, str]) -> Tuple[str, Dict[str, int]]:\n    \"\"\"\n    ðŸ“– Aplica un diccionario de reemplazos sobre el texto.\n\n    Ideal para limpiar errores de OCR conocidos como:\n    - \"rn\" por \"m\"\n    - \"1ntroducciÃ³n\" por \"IntroducciÃ³n\"\n\n    Args:\n        texto: Texto a procesar\n        diccionario: Diccionario con pares {\"mal\": \"bien\"}\n\n    Returns:\n        texto corregido y stats con cantidad de reemplazos\n    \"\"\"\n    reemplazos = 0\n    for clave, valor in diccionario.items():\n        if clave in texto:\n            ocurrencias = texto.count(clave)\n            texto = texto.replace(clave, valor)\n            reemplazos += ocurrencias\n\n    return texto, {\"reemplazos_dict\": reemplazos}\n```",
  "tags": "[[--- ðŸ§¬ Por Clasificar]]",
  "type": "text/markdown",
  "created": "20250424205039111",
  "modified": "20250424205039111"
}