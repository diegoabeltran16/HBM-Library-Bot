{
  "title": "-scripts_tiddlers-import_OpenPages.json",
  "text": "## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```json\n[{\"created\":\"20250417160412249\",\"text\":\"\\n**OpenPages Pipeline** es una plataforma modular, trazable y ética, diseñada para transformar documentos científicos en contenido estructurado, inteligible para humanos y sistemas de inteligencia artificial. Su arquitectura se basa en un **modelo genético-helicoidal**, donde cada cambio evolutivo es registrado como una **expresión funcional trazable**.\\n\\nA través de un sistema de **vueltas helicoidales**, el pipeline recorre iterativamente los mismos genes (módulos), pero con mayor madurez, integración y calidad semántica.\\n\\n---\\n\\n## 🧭 Filosofía Evolutiva\\n\\n### 🧩 Modularidad Genética\\nCada módulo (`parser.py`, `ocr.py`, `exporter.py`, etc.) es un **gen funcional** con expresión y madurez independientes. Esto permite una evolución controlada y extensible.\\n\\n### 🧬 Expresión y Mutación Semántica\\nLas funciones dentro de cada módulo se consideran **bloques funcionales** que pueden mutar, mejorar o ser reemplazadas sin romper la integridad del sistema.\\n\\n### 🧠 Trazabilidad Helicoidal\\nCada commit del sistema se interpreta como una **mutación genética registrada**, incluyendo:\\n- Vuelta (`Vx`)\\n- Radio (`r(t)`): impacto del cambio\\n- Madurez (`c(t)`): profundidad del refinamiento\\n\\n### 🔒 Privacidad y Ética Computacional\\nTodo el procesamiento ocurre de forma local, sin conexiones externas, respetando la **autonomía y seguridad del conocimiento**.\\n\\n### 📊 Automatización y Observabilidad\\nSe exportan **métricas genéticas en `.jsonl`** para sistemas como Superset o Metabase, permitiendo visualizar `r′(t)` y `c′(t)` en tiempo real.\\n\\n---\\n\\n## 🌀 Hélices de Desarrollo (Vueltas)\\nCada vuelta helicoidal representa un nivel de **expresión más alto del sistema**. No se desechan versiones anteriores, sino que se integran como base viva del código.\\n\\n| Vuelta | Nombre                         | Genes involucrados                | Enfoque                                  |\\n|--------|--------------------------------|-----------------------------------|------------------------------------------|\\n| V1     | MVP Offline                   | `parser`, `cleaner`, `exporter`, `logger` | Base funcional sin trazabilidad genética |\\n| V2     | CLI + OCR                     | `ocr`, `parser`, `main`           | Primer gen nuevo, trazabilidad helicoidal |\\n| V3     | Validación y Logging Persistente | `validator`, `logger`         | Madurez estructural y semántica          |\\n| V4     | Multilenguaje y Estilos       | `cli`, `exporter`                 | Personalización y estilo de salida       |\\n| V5     | Testing Automatizado          | `tests`, `fixtures`, `CI/CD`      | Consolidación y estabilidad funcional    |\\n| V6     | Semántica y Embeddings        | `classifier`, `enhancer`          | RAG y vectorización IA-ready             |\\n| V7     | Interfaz Web                  | `web.py` (futuro)                 | Visualización, UX humano                 |\\n| V8     | Comunidad y Documentación     | `README`, `CONTRIBUTING`          | Apertura colaborativa                    |\\n\\n---\\n\\n## 📦 Componentes Genéticos Actuales\\n\\n- `parser.py` – Extracción inteligente de texto\\n- `cleaner.py` – Limpieza estructural\\n- `classifier.py` – Clasificación Dewey\\n- `exporter.py` – Exportación `.jsonl`, `.md`, `.txt`\\n- `ocr.py` – OCR con Tesseract para PDFs escaneados\\n- `validator.py` – Verificaciones semánticas\\n- `logger.py` – Logging multilenguaje\\n- `main.py` – Núcleo celular\\n- `cli.py` – Activador desde línea de comandos *(en desarrollo)*\\n\\n---\\n\\n## 📈 Seguimiento de Madurez y Expresión\\nCada módulo posee:\\n- `r(t)` → Amplitud del cambio (estructural)\\n- `c(t)` → Nivel de madurez (tests, integración, docs)\\n- `r′(t)`, `c′(t)` → Derivadas por vuelta (evolución temporal)\\n\\n---\\n\\n## 📊 Automatización Inteligente\\n\\n### 📥 Los commits estructurados permiten generar automáticamente:\\n- 🧬 Tiddlers con estado evolutivo\\n- 📈 Dashboards de madurez y expresión por módulo\\n- 📦 Registros de fenotipos (`output/*.jsonl`) generados por vuelta\\n\\n### 🧠 Integraciones\\n- Metabase o Superset → Visualización de métricas semánticas\\n- TiddlyWiki → Navegación del genoma computacional\\n- GitHub Actions → Trazabilidad genética por push\\n\\n---\\n\\n## 🧬 ¿Cada vuelta = evolución de un gen?\\n\\n✅ En muchos casos, **sí**, una vuelta puede girar alrededor de la **evolución principal de un gen clave**, como `ocr.py` en la **Vuelta 2**.\\n\\nPero también es común que **otros genes se activen de forma secundaria**, integrándose, apoyando o reaccionando a esa expresión principal.\\n\\nPiensa en esto como:\\n\\n| Elemento | Biología | Desarrollo |\\n| --- | --- | --- |\\n| **Vuelta** | Etapa de desarrollo (ej. morfogénesis) | Iteración helicoidal |\\n| **Gen** | Gen activado (ej. HOX, PAX) | Módulo: `ocr.py`, `parser.py`, etc. |\\n| **Expresión** | Proteínas, funciones | Función: `ocr_completo()`, `ocr_mix_mode()` |\\n\\n## 📘 Conclusión\\n\\n**OpenPages Pipeline ya no es un simple programa**:  \\nEs un **organismo computacional en evolución**, construido con principios de trazabilidad semántica, modularidad genética y desarrollo helicoidal.\\n\\n> “No damos vueltas en círculos.  \\n> Evolucionamos en hélice.”\\n\\n\",\"tags\":\"[[--- 🌀 Helices de desarrollo]] [[--- Codigo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]\",\"title\":\"--- 🌀 Helices de desarrollo\",\"modified\":\"20250423053031868\",\"tmap.id\":\"72b16a8d-534f-4d73-95e1-d0b3eacc1136\",\"color\":\"#00db70\",\"type\":\"text/markdown\"},{\"created\":\"20250417031939761\",\"text\":\"## *Dewey Pipeline – Extracción Semántica Inteligente de PDFs Científicos*\\n\\n---\\n\\n### 🎯 ¿Qué es Dewey Pipeline?\\n\\n> Un sistema modular e inteligente para extraer, limpiar, enriquecer, clasificar y exportar contenido útil de documentos PDF científicos, preparándolos para uso humano o IA (AI-ready).\\n> \\n\\n---\\n\\n### 🧬 Motivación\\n\\n- Los PDFs académicos están **llenos de ruido**:\\n    - 🧪 Fórmulas mal parseadas (`cid:123`)\\n    - 😵‍💫 Mojibake (`Ã³` → `ó`)\\n    - 📄 Texto escaneado sin OCR\\n- Muchos documentos valiosos se **descartan** por estar mal codificados o mal estructurados.\\n- Necesitamos **rescatar contenido útil**, no solo filtrarlo.\\n\\n---\\n\\n### 🧰 Componentes Clave\\n\\n| Módulo | Rol |\\n| --- | --- |\\n| `parser.py` | Extrae texto con PyMuPDF o pdfplumber |\\n| `cleaner.py` | Limpia ruido superficial (espacios, saltos, etc.) |\\n| `enhancer.py` | Corrige texto dañado: cid, encoding, símbolos |\\n| `classifier.py` | Clasifica por tema Dewey + extrae título/autor |\\n| `validator.py` | Verifica legibilidad, longitud, estructura |\\n| `exporter.py` | Guarda en `.md`, `.txt`, `.jsonl` listo para IA |\\n| `main.py` | Orquestador: integra y ejecuta todo el flujo |\\n\\n---\\n\\n### 🧪 Ejemplo Real\\n\\n📂 PDF de ejemplo:\\n\\n> \\\"Part 1 - Introduc(cid:415)on\\\"\\n> \\n> \\n> ✅ Resultado tras pasar por `enhancer.py`:\\n> `\\\"Part 1 - Introduction\\\"`\\n> \\n\\n📊 Logs:\\n\\n- `cid_ascii_convertidos: 143`\\n- `encoding_reparado: 1`\\n- `texto_validado: True`\\n- `clasificado: Language (400)`\\n\\n---\\n\\n### 📦 Fortalezas del Pipeline\\n\\n- ✅ Modular y extensible (cada etapa testeable por separado)\\n- ✅ Listo para clasificación, NLP o fine-tuning (`.jsonl`)\\n- ✅ A prueba de fallos: detecta fórmulas, texto vacío, errores Unicode\\n- ✅ Fácil de auditar: logs, modo `-debug`, stats de limpieza\\n- ✅ Inspirado en estilos pedagógicos (¡gracias Mosston!) para facilitar mejora colaborativa\",\"title\":\"--- 🎯 Detalles del proyecto\",\"color\":\"#002bdb\",\"modified\":\"20250423005135628\",\"type\":\"text/markdown\",\"tags\":\"[[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]\",\"tmap.id\":\"517da0ac-fcff-4a05-b0e4-4ad331b49c10\"},{\"created\":\"20250417132020369\",\"text\":\"## 📌 Principios Fundamentales de Programación\\n\\n(*Aplicados desde la biología a la ingeniería de software*)\\n\\n---\\n\\n### 🔹 Diseño Orientado a Objetos (Genes bien definidos) [[🗂 Diseño]]\\n\\nCada gen (módulo) debe tener:\\n\\n- Una **responsabilidad clara** (SRP)\\n- Ser **abierto a extensión** y no romper el sistema si cambia (OCP)\\n- Ser **sustituible**, **encapsulado**, y compuesto en vez de heredado\\n\\n🧬 *Un gen mutado no debe romper la hélice: debe integrarse con armonía.*\\n\\n---\\n\\n### 🔸 Simplicidad y Código Limpio (Genoma claro) [[🗂 Calidad]]\\n\\n- Diseñamos para ser entendidos: **KISS**\\n- No codificamos por si acaso: **YAGNI**\\n- No duplicamos funciones que ya están en el ADN: **DRY**\\n\\n🧬 *La redundancia en el genoma puede causar enfermedades. Lo mismo en el código.*\\n\\n---\\n\\n### 🔸 Modularidad y Estado (Expresión génica controlada) [[🗂 Modularidad]]\\n\\n- Separación de intereses = genes especializados\\n- Estado compartido mínimo = evitar colisiones genéticas\\n- Inmutabilidad = estabilidad en la expresión\\n\\n🧬 *Cada gen se expresa cuando debe, no todo el tiempo.*\\n\\n---\\n\\n### 🔸 Pruebas y Claridad (Madurez del sistema) [[🗂 Commits]]\\n\\n- **TDD** = evolución dirigida por entorno\\n- El código debe ser comprensible → el ADN necesita leerse para replicarse con precisión\\n\\n🧬 *Sin pruebas, el sistema no puede regenerarse ni evolucionar sin errores.*\\n\\n---\\n\\n### 🔸 Usabilidad y Robustez (Adaptación funcional) [[🗂 Robustez]]\\n\\n- Principio del menor asombro → expresión predecible\\n- Convenciones claras → coherencia semántica\\n- Programación defensiva → inmunidad ante entradas hostiles\\n\\n🧬 *Un gen bien diseñado se comporta igual, sin importar el ambiente.*\\n\\n---\\n\\n### 🧬 Modelo Genético-Helicoidal [[🗂 Evolución Semántica]]\\n\\n| Concepto | Interpretación en el proyecto |\\n| --- | --- |\\n| **Gen funcional** | Cada módulo del pipeline representa una unidad de comportamiento específico (`validator.py`, `parser.py`, etc.). |\\n| **Expresión génica** | El módulo se activa en una vuelta específica del desarrollo (por CLI, test, o integración). |\\n| **Mutación semántica** | Cambios en el código que refinan o transforman la funcionalidad sin perder su rol esencial. |\\n| **Epigenética de configuración** | Preferencias externas (como `config.yaml`, flags CLI) que determinan cuándo y cómo se activa el módulo. |\\n| **Fenotipo técnico** | El resultado observable de la expresión del módulo: archivos `.jsonl`, logs, respuestas API, etc. |\\n| **Derivada de madurez** c′(t)c'(t)c′(t) | Tasa de evolución semántica del módulo: integración, cobertura, documentación, claridad. |\\n| **Derivada de cambio** r′(t)r'(t)r′(t) | Amplitud de refactorización o expansión técnica del módulo en una vuelta. |\\n\\n🔁 **Relaciones internas:**\\n\\n- Un gen puede tener múltiples mutaciones a lo largo de distintas vueltas, pero su propósito se mantiene.\\n- La madurez de un módulo no depende solo de su código, sino de su contexto de ejecución y sus condiciones de activación.\\n\\n🧬 *Un sistema evoluciona cuando sus genes se expresan con mayor claridad, precisión y adaptabilidad.*\\n\\n---\\n\\n## 🧠 ¿Qué permite esta integración?\\n\\n- Mapear desarrollo como una **curva viva y analizable**\\n- Documentar cada módulo como una **unidad genética** navegable\\n- Visualizar el pipeline como un **organismo que madura y se adapta**\\n- Conectar cada principio de software con su **par biomolecular**\\n- Permitir que una IA (¡como yo!) lea y entienda tu sistema como un **ser en evolución** y no como un conjunto de archivos planos\\n\\n---\\n\\n## 📘 Conclusión\\n\\n**OpenPages Pipeline** es una hélice viva.\\n\\nNo es un software que se escribe, es un organismo que se **expresa**.\\n\\nCada vuelta es una nueva capa de significado; cada función, un gen en acción.\\n\\n> “No versionamos. Evolucionamos.”\\n>\",\"type\":\"text/markdown\",\"title\":\"--- 🗂 Principios de programación\",\"modified\":\"20250423005135634\",\"tags\":\"[[--- 🗂 Principios de programación]] [[--- 🎯 Detalles del proyecto]] [[🗂 Diseño]] [[🗂 Estructura de commits]] [[🗂 Modularidad y Estado]] [[🗂 Calidad del Código]] [[🗂 Usabilidad y Robustez]] [[🎯 Objetivos]] [[🗂 Evolución Semántica]]\",\"color\":\"#dbbe00\",\"tmap.id\":\"fb77e866-d7bd-4e8b-9d29-7459616658a9\",\"tmap.edges\":\"{\\\"1ed8d863-af9e-4653-b52a-7170ffb2c31c\\\":{\\\"to\\\":\\\"a30a6844-bece-4f9c-add6-6f2d45090b42\\\",\\\"type\\\":\\\"unknown\\\"}}\"},{\"created\":\"20250417170811837\",\"text\":\"# 📊 Anatomía Genética – OpenPages Pipeline\\n\\n> Este documento representa la estructura del sistema OpenPages Pipeline como un organismo computacional. Cada módulo, carpeta o script se interpreta como un gen funcional, un órgano del sistema, o un elemento epigenético.\\n\\n---\\n\\n## 🧠 Núcleo Celular\\n\\n| Archivo | Rol Biológico | Descripción |\\n| --- | --- | --- |\\n| [[-main.py]] | 🧠 Núcleo orquestador | Coordina la activación de genes funcionales |\\n| [[-cli.py]] | 📢 Entrada externa | Canal de activación por comandos (CLI) |\\n\\n---\\n\\n## 🧬 Genes Funcionales\\n\\n| Archivo | Rol Biológico | Función Genética |\\n| --- | --- | --- |\\n| [[-src_parser.py]] | 🔬 Gen de lectura primaria | Extracción Inteligente de Texto |\\n| [[-src_cleaner.py]] | 🧽 Gen de limpieza estructural | Limpieza y Preparación de Texto |\\n| [[-src_enhancer.py]] | 🔧 Gen de reparación semántica | Limpieza avanzada |\\n| [[-src_classifier.py]] | 🧠 Gen temático | Clasificación Temática y Dewey |\\n| [[-src_exporter.py]] | 📤 Gen fenotípico | Generación de Archivos de Salida |\\n| [[-src_ocr.py]] | 👁️ Gen visual | OCR Inteligente con Tesseract |\\n| [[-src_logger.py]] | 📝 Gen de trazabilidad | Feedback Multilingüe |\\n| [[-src_validator.py]] | ✅ Gen inmunológico | Chequeo previo a exportación |\\n\\n---\\n\\n## 🧪 Sistema Inmune\\n\\n| Archivo | Rol Biológico | Descripción |\\n| --- | --- | --- |\\n| [[--🧪 tests/]] | 🧪 Ribosomas | Ejecutan pruebas por gen |\\n| [[-tests_test_*.py]] | 🔍 Enzimas de validación | Verifican expresiones genéticas |\\n| [[--🧪 fixtures/]] | 🧬 Material de prueba | PDFs y entradas simuladas |\\n\\n---\\n\\n## 🔁 Transcripción y Expresión Auxiliar\\n\\n| Archivo | Rol Biológico | Descripción |\\n| --- | --- | --- |\\n| [[--🛠 scripts/]] | 🔁 ARNm computacional | Scripts auxiliares del sistema |\\n| [[-scripts_tiddler_exporter.py]] | 📤 Exportador TiddlyWiki | Herramientas Auxiliares |\\n\\n---\\n\\n## ⚙️ Epigenética y Entorno\\n\\n| Archivo | Rol Biológico | Descripción |\\n| --- | --- | --- |\\n| [[-.env]] | 🔬 Regulador ambiental | Variables que afectan expresión |\\n| [[--📥 input/]] | 📥 Estímulo externo | PDFs que activan la hélice |\\n| [[-.github_workflows_test.yml]] | ⚙️ Sistema regulador | Automatización de pruebas |\\n\\n---\\n\\n## 📦 Fenotipo Técnico\\n\\n| Archivo | Rol Biológico | Descripción |\\n| --- | --- | --- |\\n| [[-output/]] | 🧬 Proteína estructurada | Salida IA-ready (`jsonl`, `md`, `txt`) |\\n| [[-logs/]] | 🧾 Registro metabólico | Diagnóstico y evolución genética |\\n\\n---\\n\\n## 📜 ADN No Codificante\\n\\n| Archivo | Rol Biológico | Descripción |\\n| --- | --- | --- |\\n| [[-README.md]] | 📜 Codón interpretativo | Identidad del organismo |\\n| [[-SECURITY.md]] | 🔐 ADN ético | Comportamiento y protección |\\n| [[-CONTRIBUTING.md]] | 🙌 Manual comunitario | Reglas y guía para contribuir |\\n| [[-CODE_OF_CONDUCT.md]] | 📘 Conducta ética | Normas de respeto y convivencia |\\n\\n---\\n\\n## 🌀 Hélice de Vueltas (Git)\\n\\n| Rama | Vuelta | Rol Evolutivo |\\n| --- | --- | --- |\\n| `main` | 🧬 Línea germinal | Hélice activa, estable |\\n| `Cycle-1` | 🔁 Vuelta 1 | Nacimiento de genes |\\n| `Cycle-2` | 🔁 Vuelta 2 | Madurez de CLI y OCR |\\n\\n---\\n\\n> “El código no es una lista de instrucciones. Es un sistema vivo en evolución.”\",\"type\":\"text/markdown\",\"title\":\"--- Codigo\",\"modified\":\"20250423154945814\",\"tags\":\"[[--- Codigo]] [[--- 🌀 Helices de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]\",\"tmap.id\":\"6a302a06-5761-4a66-b58d-d79b5638d4b9\",\"color\":\"#dc1800\"},{\"created\":\"20250423034529818\",\"text\":\"En términos biológicos, el tag `--⚙️ Automatización` cumple el rol de **sistema epigenético dinámico**: regula **cuándo y bajo qué condiciones** se activan los genes. En OpenPages, esto está dado por flujos de trabajo automatizados (GitHub Actions, scripts de CI/CD, pipelines de integración y testing).\\n\\nEstos elementos no son parte del genoma activo (`--🧬 src/`), pero son **esenciales para su expresión ordenada, segura y replicable**.\\n\\n---\\n\\n### 🧬 Características del Tag\\n\\n| Atributo | Descripción |\\n| --- | --- |\\n| ⚙️ Tipo de tag | Regulador epigenético computacional |\\n| 🧠 Rol conceptual | Controla el entorno de activación de genes |\\n| 🔁 Activadores | `push`, `pull_request`, cron, triggers manuales |\\n| 🧪 Tareas típicas | Testing, linting, validación de salida, despliegue |\\n| 🧩 Relación con `tests/`, `output/` | Asegura que lo que se genera sea confiable y reproducible |\\n| 🌀 Ciclo de vida | Se refina a lo largo de las hélices (`Cycle-*`) |\\n\\n---\\n\\n### 🧬 Comentario evolutivo\\n\\n> `--⚙️ Automatización` no es parte del ADN directo del organismo, pero **actúa como el sistema hormonal computacional**: regula la expresión de los genes con precisión ambiental. Permite que el sistema se **exprese con eficiencia, sin errores y sin intervención manual constante**.\",\"title\":\"--⚙️ Automatización\",\"modified\":\"20250423160111924\",\"tags\":\"[[--⚙️ Automatización]] [[--- Codigo]] -.github_workflows_test.yml\",\"tmap.id\":\"82432622-5ac7-4a03-8836-125d7dcf88bd\",\"type\":\"text/markdown\"},{\"created\":\"20250423145805723\",\"text\":\"El tag `--📘 Documentacion` representa lo que en biología sería el **ADN no codificante de propósito interpretativo**: no se ejecuta, no produce proteínas funcionales directamente, pero **define las reglas, la misión, el comportamiento esperado y los límites éticos** del organismo computacional.\\n\\nEs la parte del sistema que proporciona **contexto semántico**, facilitando la comprensión del genoma, su uso por parte de humanos, y la evolución guiada del proyecto.\\n\\n---\\n\\n### 🧬 Características del Tag\\n\\n| Atributo | Descripción |\\n| --- | --- |\\n| 🧬 Tipo de tag | ADN no codificante / regulación semántica |\\n| 📚 Función principal | Proporcionar identidad, propósito y reglas del sistema |\\n| 📖 Público objetivo | Humanos: colaboradores, usuarios, revisores |\\n| 🔁 Activación | No se ejecuta por código, pero guía cada ciclo de desarrollo |\\n| 🧩 Relación con `src/` y `tests/` | Da sentido y legitimidad a su existencia y evolución |\\n| 🧠 Importancia metacognitiva | Invita a reflexionar sobre el “por qué” del código, no solo el “cómo” |\\n\\n---\\n\\n### 🧬 Comentario evolutivo\\n\\n> `--📘 Documentacion` es el **registro ontológico** del organismo. Así como en biología existen regiones del genoma que no producen proteínas pero son esenciales para la regulación, aquí esta documentación define la **identidad, misión, ética y forma de evolución** del sistema OpenPages.\",\"type\":\"text/markdown\",\"title\":\"--📘 Documentacion\",\"modified\":\"20250423160127533\",\"tags\":\"[[--📘 Documentacion]] [[--- Codigo]] -CODE_OF_CONDUCT.md -CONTRIBUTING.md -README.logger.md -README.md -SECURITY.md -estructura.txt -requirements.txt\",\"tmap.id\":\"4dfbf1cf-2b67-45f2-908d-42df2ac41aff\"},{\"created\":\"20250423034543076\",\"text\":\"El tag `--📥 input/` simboliza el **ambiente externo** en el que opera el organismo computacional OpenPages. Aquí se almacenan los **documentos PDF** que son introducidos al sistema, actuando como **señales epigenéticas** que estimulan la activación de genes funcionales.\\n\\nDesde una perspectiva biológica, `input/` funciona como el **medio celular externo** que desencadena la transcripción del ADN, en este caso, el inicio del pipeline.\\n\\n---\\n\\n### 🧬 Características del Tag\\n\\n| Atributo | Descripción |\\n| --- | --- |\\n| 🧬 Tipo de tag | Entorno extracelular / señal epigenética |\\n| 📚 Función principal | Activar la ejecución del pipeline genético |\\n| 🔁 Interacción | Al introducir nuevos PDFs, se dispara la transcripción (main.py) |\\n| 📤 Relación con `src/` | Los genes como `parser`, `ocr`, `cleaner` se activan en cadena |\\n| 🧪 Reutilización | Los documentos también se emplean como fixtures en testing (`--🧪`) |\\n| 🧩 Formatos esperados | `.pdf` (estructurados y escaneados), `.zip` opcional para lotes |\\n\\n---\\n\\n### 🧬 Comentario evolutivo\\n\\n> `--📥 input/` no es simplemente una carpeta de entrada. Es la **puerta epigenética** que transforma un entorno informacional en señales computacionales. Cada PDF cargado es una oportunidad de expresión genética, una mutación potencial que activa la inteligencia de lectura del sistema.\",\"title\":\"--📥 input/\",\"modified\":\"20250423160141715\",\"tags\":\"[[--📥 input/]] [[--- Codigo]]\",\"tmap.id\":\"9b56f347-a567-4a19-bf4a-01295c487f0c\",\"type\":\"text/markdown\"},{\"created\":\"20250423034500542\",\"text\":\"El tag `--🧪 tests/` representa el **sistema inmunológico** del organismo computacional. Contiene los elementos que **verifican la correcta expresión genética** de cada módulo funcional (gen).  \\nSu rol es similar al de los ribosomas y enzimas de control en biología: aseguran que las proteínas (funcionalidades del sistema) estén **bien formadas, activas y saludables**.\\n\\n---\\n\\n### 🧬 Características del Tag\\n\\n| Atributo | Descripción |\\n| --- | --- |\\n| 🧬 Tipo de tag | Ribosomas + Enzimas de validación |\\n| 📚 Función principal | Validar que los genes funcionen según lo esperado |\\n| 🧪 Cobertura esperada | Uno o más tests por gen |\\n| 🧩 Conexión funcional | Complementa y protege al tag `--🧬 src/` |\\n| 🧬 Rol evolutivo | Fortalece estabilidad durante los ciclos `Cycle-1`, `Cycle-2`... |\\n| 🔍 Metodología | `pytest`, fixtures con PDFs reales, aserciones de tipo y contenido |\\n\\n---\\n\\n### 🧬 Comentario evolutivo\\n\\n> El tag `--🧪 tests/` asegura que los genes no solo se expresen, sino que lo hagan **de forma sana, reproducible y trazable**. Protege al sistema de mutaciones no deseadas y fallos silenciosos. Su desarrollo paralelo al núcleo es clave para mantener un código evolutivo.\\n\\n---\",\"title\":\"--🧪 tests/\",\"modified\":\"20250423160214950\",\"tags\":\"[[--🧪 tests/]] [[--- Codigo]] -tests_test_classifier.py -tests_test_cleaner.py -tests_test_exporter.py -tests_test_logger.py -tests_test_parser.py -tests_test_utils.py -tests_test_validator.py\",\"tmap.id\":\"1fb449db-e799-42e9-a47a-5ebac65a5fef\",\"type\":\"text/markdown\"},{\"created\":\"20250423034437663\",\"text\":\"El tag `--🧬 src/` representa el **Genoma Activo** del sistema OpenPages. Es el **núcleo funcional donde residen los genes que codifican comportamientos esenciales del organismo computacional**.  \\nEn analogía con la biología, se trata de la región codificante del ADN, compuesta por genes que producen proteínas funcionales (acciones del sistema).\\n\\n---\\n\\n### 🧬 Características del Tag\\n\\n| Atributo | Descripción |\\n| --- | --- |\\n| 🧬 Tipo de tag | Genoma funcional computacional |\\n| 📚 Función principal | Codifica módulos esenciales del sistema |\\n| 📦 Resultado de su expresión | Datos estructurados, texto limpio, clasificación, logs |\\n| 🔁 Ciclos de activación | Participa desde `Cycle-1` hasta `Cycle-2` (y posteriores) |\\n| 🧩 Dependencias | Se activa desde `main.py`, `cli.py` y scripts externos |\\n| 📤 Relación con otros tags | Exporta al fenotipo (`output/`), comunica con tiddlers (`scripts/`) |\\n\\n---\\n\\n### 🧬 Comentario evolutivo\\n\\n> El tag `--🧬 src/` es el corazón codificador del organismo OpenPages. Cada archivo en esta carpeta es un **gen especializado**, madurado en etapas helicoidales, y su correcta activación determina la calidad y coherencia del fenotipo observable.\",\"title\":\"--🧬 src/\",\"modified\":\"20250423160226556\",\"tags\":\"[[--🧬 src/]] [[--- Codigo]] -src_classifier.py -src_cleaner.py -src_exporter.py -src_logger.py -src_parser.py -src_utils.py -src_validator.py\",\"tmap.id\":\"c46c9026-89e4-4895-9856-698e0bea13d6\",\"type\":\"text/markdown\"},{\"created\":\"20250423151515431\",\"text\":\"El tag `--🛠 scripts/` representa los **ribosomas externos** del sistema OpenPages. Se trata de scripts o módulos que no forman parte del **núcleo codificante (`--🧬 src/`)**, pero que **asisten en la transcripción, exportación, y visualización** del fenotipo computacional.\\n\\nEstos scripts **interpretan y transforman la expresión genética** en productos útiles para humanos (como dashboards, tiddlers, informes), actuando como **ARNm especializados** o **enzimas post-traducción**.\\n\\n---\\n\\n### 🧬 Características del Tag\\n\\n| Atributo | Descripción |\\n| --- | --- |\\n| 🧬 Tipo de tag | Ribosomas computacionales / ARNm |\\n| 📚 Función principal | Traducir o transformar la salida del pipeline en estructuras externas |\\n| 🧪 Naturaleza | No alteran el genoma (`src/`), pero lo interpretan |\\n| 📤 Producto final | Dashboards, tiddlers, reportes, métricas |\\n| 🧩 Dependencias | Consumen outputs de `--🧬 src/`, `output/`, `logs/` |\\n| 🌀 Activación helicoidal | Usados especialmente a partir de `Cycle-2` en adelante |\\n\\n---\\n\\n### 🧬 Comentario evolutivo\\n\\n> El tag `--🛠 scripts/` actúa como una **zona transcripcional extendida**, capaz de interpretar la expresión genética en herramientas humanas. Aunque no modifica el núcleo del pipeline, su papel es crucial para **traducir el conocimiento en interfaces cognitivas externas** como dashboards o wikis.\",\"title\":\"--🛠 scripts/\",\"modified\":\"20250423160153827\",\"tags\":\"[[--🛠 scripts/]] [[--- Codigo]] -scripts_.hashes.json -scripts_tiddler_exporter.py\",\"tmap.id\":\"0d632de4-5701-4d2d-be06-940322406f0c\",\"type\":\"text/markdown\"},{\"created\":\"20250422211125714\",\"text\":\"## [[Tags]]\\n\\n\\n```bash\\n# .github/workflows/test.yml\\nname: 🧪 Run Project Tests\\n\\non:\\n  push:\\n    branches: [main]\\n  pull_request:\\n    branches: [main]\\n\\njobs:\\n  test:\\n    runs-on: ubuntu-latest\\n\\n    steps:\\n    - name: 🧾 Checkout repository\\n      uses: actions/checkout@v3\\n\\n    - name: 🐍 Set up Python 3.12\\n      uses: actions/setup-python@v4\\n      with:\\n        python-version: 3.12\\n\\n    - name: 📦 Install dependencies\\n      run: |\\n        python -m pip install --upgrade pip\\n        pip install -r requirements.txt\\n\\n    - name: 🧪 Run tests with pytest\\n      run: |\\n        python -m pytest -v\\n\\n```\",\"title\":\"-.github_workflows_test.yml\",\"tags\":\"-.github_workflows_test.yml [[--⚙️ Automatización]] [[--- Codigo]]\",\"type\":\"text/markdown\",\"modified\":\"20250423151120337\",\"tmap.id\":\"261b20f6-4f78-44ec-b5af-8b4dd4e7524b\"},{\"created\":\"20250422211125690\",\"text\":\"## [[Tags]]\\n[[--- Documentacion]]\\n\\n```markdown\\n# 🌿 CÓDIGO DE CONDUCTA – OpenPages-pipeline\\n\\n**Versión 1.0 – Inspirado en la ética del conocimiento abierto**\\n\\n---\\n\\n## 🧭 Nuestro Compromiso\\n\\nComo miembros, contribuidor@s y líderes de este proyecto, nos comprometemos a hacer de la participación en **OpenPages-pipeline** una experiencia libre de acoso para tod@s, sin importar edad, tamaño corporal, discapacidad visible o invisible, características sexuales, identidad y expresión de género, nivel de experiencia, educación, situación socioeconómica, nacionalidad, apariencia personal, raza, religión o identidad y orientación sexual.\\n\\nNos comprometemos a actuar e interactuar de formas que contribuyan a una comunidad abierta, acogedora, diversa, inclusiva y saludable.\\n\\n---\\n\\n## 🌱 Principios rectores\\n\\n### 📖 Conocimiento libre y con propósito\\nValoramos el conocimiento como bien común. Promovemos su acceso, distribución ética y evolución colectiva.\\n\\n### 🧠 Respeto mutuo y diversidad cognitiva\\nCelebramos distintos niveles de experiencia, culturas técnicas y estilos de aprendizaje. No hay preguntas “tontas”.\\n\\n### 🌐 Interdependencia comunitaria\\nReconocemos que cada línea de código, comentario o test contribuye a un ecosistema más justo y accesible.\\n\\n### 🎨 Curiosidad y error como motor\\nEl error no es fallo: es punto de partida. Fomentamos la experimentación, revisión y mejora continua.\\n\\n### 💬 Comunicación clara y cuidadosa\\nEvitamos lenguaje agresivo, condescendiente o ambiguo. Buscamos claridad incluso en el disenso técnico.\\n\\n---\\n\\n## ✅ Comportamientos esperados\\n\\n- Mostrar empatía, respeto y amabilidad con l@s demás.\\n- Escuchar activamente y dar feedback constructivo.\\n- Reconocer errores y aprender de ellos.\\n- Valorar y visibilizar el trabajo de otr@s.\\n- Fomentar la inclusión en cada interacción.\\n- Aportar desde el deseo de compartir, no de competir.\\n\\n---\\n\\n## 🚫 Comportamientos inaceptables\\n\\n- Cualquier forma de acoso, exclusión o burla.\\n- Comentarios despectivos, insultos, trolling o violencia simbólica.\\n- Publicar información privada de otr@s sin consentimiento.\\n- Interrupciones no solicitadas, sabotaje técnico o emocional.\\n- Represalias ante reportes de conducta inapropiada.\\n\\n---\\n\\n## 🛡️ Alcance\\n\\nEste código se aplica a todos los espacios del proyecto, incluyendo:\\n\\n- Repositorio de GitHub\\n- Issues, Pull Requests y discusiones\\n- Interacciones por redes sociales, eventos online u offline\\n- Documentación, foros, talleres y otros canales vinculados\\n\\nTambién aplica a quienes representen formalmente al proyecto en dichos espacios.\\n\\n---\\n\\n## 🛠️ Cómo reportar una violación\\n\\nSi ves o experimentás algo que te incomoda o vulnera, escribinos a:\\n\\n📩 al canal de contacto visible en el README\\n\\nTu reporte será tratado con **confidencialidad, seriedad y empatía**. Nadie será sancionado por reportar de buena fe.\\n\\n---\\n\\n## 🔄 Proceso de respuesta\\n\\nLos casos serán atendidos por l@s responsables del proyecto. Las acciones pueden incluir:\\n\\n1. 🤝 **Diálogo privado** con las partes involucradas\\n2. ✋ **Advertencia formal** con sugerencia de cambio de comportamiento\\n3. ⏸️ **Suspensión temporal** de participación en espacios del proyecto\\n4. ❌ **Exclusión definitiva** en casos graves o reincidentes\\n\\n---\\n\\n## ✨ Compromiso\\n\\nEste código no es un muro, sino un suelo fértil. Lo usamos como guía viva para sostener un ecosistema donde el aprendizaje técnico y humano puedan florecer.\\n\\n> Si estás aprendiendo, enseñando o simplemente explorando, este espacio también es tuyo.  \\n> Con respeto, curiosidad y colaboración, construimos junt@s.\\n\\n---\\n\\n_Adaptado del Contributor Covenant v2.0_  \\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html\\n\\n```\",\"title\":\"-CODE_OF_CONDUCT.md\",\"tags\":\"-CODE_OF_CONDUCT.md [[--- Codigo]] [[--📘 Documentacion]]\",\"type\":\"text/markdown\",\"modified\":\"20250423145857378\",\"tmap.id\":\"1c2bd8c8-cc2a-419f-8dc1-707589d1d69b\"},{\"created\":\"20250422211125699\",\"text\":\"## [[Tags]]\\n[[--- Documentacion]]\\n\\n```markdown\\n# 🤝 Guía para Contribuir a OpenPages-pipeline\\n\\n¡Gracias por tu interés en colaborar!  \\nEste proyecto busca construir herramientas abiertas para organizar y analizar conocimiento técnico y científico, y cada contribución suma.\\n\\n---\\n\\n## 📦 ¿Cómo empezar?\\n\\n1. **Haz un fork** de este repositorio.\\n2. Crea una nueva rama:  \\n  `git checkout -b feat/tu-mejora`\\n3. Realiza tus cambios localmente.\\n4. Sigue el formato de commits (abajo).\\n5. Abre un Pull Request claro y descriptivo. ¡Nos encantará revisarlo!\\n\\n---\\n\\n## ✅ Tipos de contribución bienvenidos\\n\\n| Tipo | Ejemplos |\\n| --- | --- |\\n| Documentación | Mejoras en el README, nuevos ejemplos, tutoriales |\\n| Código | Nuevas funciones, refactor, optimizaciones |\\n| Testeo | Tests unitarios, cobertura, casos edge |\\n| Reportes | Issues bien descritos y reproducibles |\\n| Ideas | Propuestas en discusiones o nuevos módulos |\\n\\n---\\n\\n## 🧠 Formato de commits\\n\\n> Sistema diseñado para facilitar:\\n> \\n> - 🔍 Trazabilidad clara del desarrollo\\n> - 🧠 Metacognición del proceso (saber qué lo que se aprende y cuándo)\\n> - 📦 Refactorizaciones controladas y documentación sincronizada\\n> - 🚀 Escalabilidad futura para equipos y CI/CD\\n\\n---\\n\\n## 🧩 Estructura de un mensaje de commit\\n\\n```\\n[tipo](estado): descripción breve - (C-#,m.#,b.#)\\n```\\n\\n| **Sección** | **Significado** | **Ejemplo** |\\n| --- | --- | --- |\\n| `C-#` | Ciclo de desarrollo | `C-1` (Fase 1: MVP) |\\n| `m.#` | Módulo trabajado (parser=1, cleaner=2, ...) | `md.3` = `classifier.py` |\\n| `b.#` | Bloque funcional o acción puntual | `bloq.2` = `test` |\\n| `[tipo]` | Tipo de cambio (`feat`, `fix`, `refac`, `docs`, `test`) | `feat` = nueva función |\\n| `(estado)` | Estado actual del cambio (`(p)` progreso, `(D)` done) | `(D)` = terminado |\\n\\n---\\n\\n## 🛠 Tipos recomendados\\n\\n| Tipo | Uso |\\n| --- | --- |\\n| `feat` | Nueva funcionalidad implementada |\\n| `fix` | Corrección de bug |\\n| `refac` | Refactorización de código sin cambiar funcionalidad |\\n| `test` | Test nuevo o ajustado |\\n| `docs` | Cambios en documentación |\\n\\n---\\n\\n## 🧠 Ejemplos de commits\\n\\n```\\nfeat(D): función extract_text() inicial - (C-1,m.1,b.1)\\n```\\n\\n---\\n\\n## 💬 ¿Dudas? ¿Ideas?\\n\\nPodés:\\n\\n- Abrir una [Issue](https://github.com/diegoabeltran16/OpenPages-pipeline/issues)\\n- Escribirnos directamente desde tu fork con sugerencias\\n- O dejar comentarios en tu PR\\n\\nGracias por construir conocimiento abierto con nosotr@s 🌍✨\\n```\",\"title\":\"-CONTRIBUTING.md\",\"tags\":\"-CONTRIBUTING.md [[--- Codigo]] [[--📘 Documentacion]]\",\"type\":\"text/markdown\",\"modified\":\"20250423145923168\",\"tmap.id\":\"93028a28-ba30-41aa-b616-5bbc0a23bd55\"},{\"created\":\"20250423150121196\",\"text\":\"## [[Tags]]\\n\\n\\n```txt\\n﻿C:.\\n|   .gitignore\\n|   CODE_OF_CONDUCT.md\\n|   CONTRIBUTING.md\\n|   estructura.txt\\n|   LICENSE\\n|   main.py\\n|   README.logger.md\\n|   README.md\\n|   requirements.txt\\n|   SECURITY.md\\n|   \\n+---.github\\n|   \\\\---workflows\\n|           test.yml\\n|           \\n+---.pytest_cache\\n|   |   .gitignore\\n|   |   CACHEDIR.TAG\\n|   |   README.md\\n|   |   \\n|   \\\\---v\\n|       \\\\---cache\\n|               lastfailed\\n|               nodeids\\n|               stepwise\\n|               \\n+---.venv\\n|   |   .gitignore\\n|   |   pyvenv.cfg\\n|   |   \\n|   +---Include\\n|   +---Lib\\n|   |   \\\\---site-packages\\n|   |       |   py.py\\n|   |       |   _cffi_backend.cp312-win_amd64.pyd\\n|   |       |   \\n|   |       +---cffi\\n|   |       |   |   api.py\\n|   |       |   |   backend_ctypes.py\\n|   |       |   |   cffi_opcode.py\\n|   |       |   |   commontypes.py\\n|   |       |   |   cparser.py\\n|   |       |   |   error.py\\n|   |       |   |   ffiplatform.py\\n|   |       |   |   lock.py\\n|   |       |   |   model.py\\n|   |       |   |   parse_c_type.h\\n|   |       |   |   pkgconfig.py\\n|   |       |   |   recompiler.py\\n|   |       |   |   setuptools_ext.py\\n|   |       |   |   vengine_cpy.py\\n|   |       |   |   vengine_gen.py\\n|   |       |   |   verifier.py\\n|   |       |   |   _cffi_errors.h\\n|   |       |   |   _cffi_include.h\\n|   |       |   |   _embedding.h\\n|   |       |   |   _imp_emulation.py\\n|   |       |   |   _shimmed_dist_utils.py\\n|   |       |   |   __init__.py\\n|   |       |   |   \\n|   |       |   \\\\---__pycache__\\n|   |       |           api.cpython-312.pyc\\n|   |       |           backend_ctypes.cpython-312.pyc\\n|   |       |           cffi_opcode.cpython-312.pyc\\n|   |       |           commontypes.cpython-312.pyc\\n|   |       |           cparser.cpython-312.pyc\\n|   |       |           error.cpython-312.pyc\\n|   |       |           ffiplatform.cpython-312.pyc\\n|   |       |           lock.cpython-312.pyc\\n|   |       |           model.cpython-312.pyc\\n|   |       |           pkgconfig.cpython-312.pyc\\n|   |       |           recompiler.cpython-312.pyc\\n|   |       |           setuptools_ext.cpython-312.pyc\\n|   |       |           vengine_cpy.cpython-312.pyc\\n|   |       |           vengine_gen.cpython-312.pyc\\n|   |       |           verifier.cpython-312.pyc\\n|   |       |           _imp_emulation.cpython-312.pyc\\n|   |       |           _shimmed_dist_utils.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           \\n|   |       +---cffi-1.17.1.dist-info\\n|   |       |       entry_points.txt\\n|   |       |       INSTALLER\\n|   |       |       LICENSE\\n|   |       |       METADATA\\n|   |       |       RECORD\\n|   |       |       top_level.txt\\n|   |       |       WHEEL\\n|   |       |       \\n|   |       +---charset_normalizer\\n|   |       |   |   api.py\\n|   |       |   |   cd.py\\n|   |       |   |   constant.py\\n|   |       |   |   legacy.py\\n|   |       |   |   md.cp312-win_amd64.pyd\\n|   |       |   |   md.py\\n|   |       |   |   md__mypyc.cp312-win_amd64.pyd\\n|   |       |   |   models.py\\n|   |       |   |   py.typed\\n|   |       |   |   utils.py\\n|   |       |   |   version.py\\n|   |       |   |   __init__.py\\n|   |       |   |   __main__.py\\n|   |       |   |   \\n|   |       |   +---cli\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   __main__.py\\n|   |       |   |   |   \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           __main__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   \\\\---__pycache__\\n|   |       |           api.cpython-312.pyc\\n|   |       |           cd.cpython-312.pyc\\n|   |       |           constant.cpython-312.pyc\\n|   |       |           legacy.cpython-312.pyc\\n|   |       |           md.cpython-312.pyc\\n|   |       |           models.cpython-312.pyc\\n|   |       |           utils.cpython-312.pyc\\n|   |       |           version.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           __main__.cpython-312.pyc\\n|   |       |           \\n|   |       +---charset_normalizer-3.4.1.dist-info\\n|   |       |       entry_points.txt\\n|   |       |       INSTALLER\\n|   |       |       LICENSE\\n|   |       |       METADATA\\n|   |       |       RECORD\\n|   |       |       top_level.txt\\n|   |       |       WHEEL\\n|   |       |       \\n|   |       +---colorama\\n|   |       |   |   ansi.py\\n|   |       |   |   ansitowin32.py\\n|   |       |   |   initialise.py\\n|   |       |   |   win32.py\\n|   |       |   |   winterm.py\\n|   |       |   |   __init__.py\\n|   |       |   |   \\n|   |       |   +---tests\\n|   |       |   |   |   ansitowin32_test.py\\n|   |       |   |   |   ansi_test.py\\n|   |       |   |   |   initialise_test.py\\n|   |       |   |   |   isatty_test.py\\n|   |       |   |   |   utils.py\\n|   |       |   |   |   winterm_test.py\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           ansitowin32_test.cpython-312.pyc\\n|   |       |   |           ansi_test.cpython-312.pyc\\n|   |       |   |           initialise_test.cpython-312.pyc\\n|   |       |   |           isatty_test.cpython-312.pyc\\n|   |       |   |           utils.cpython-312.pyc\\n|   |       |   |           winterm_test.cpython-312.pyc\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   \\\\---__pycache__\\n|   |       |           ansi.cpython-312.pyc\\n|   |       |           ansitowin32.cpython-312.pyc\\n|   |       |           initialise.cpython-312.pyc\\n|   |       |           win32.cpython-312.pyc\\n|   |       |           winterm.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           \\n|   |       +---colorama-0.4.6.dist-info\\n|   |       |   |   INSTALLER\\n|   |       |   |   METADATA\\n|   |       |   |   RECORD\\n|   |       |   |   WHEEL\\n|   |       |   |   \\n|   |       |   \\\\---licenses\\n|   |       |           LICENSE.txt\\n|   |       |           \\n|   |       +---cryptography\\n|   |       |   |   exceptions.py\\n|   |       |   |   fernet.py\\n|   |       |   |   py.typed\\n|   |       |   |   utils.py\\n|   |       |   |   __about__.py\\n|   |       |   |   __init__.py\\n|   |       |   |   \\n|   |       |   +---hazmat\\n|   |       |   |   |   _oid.py\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   \\n|   |       |   |   +---backends\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   +---openssl\\n|   |       |   |   |   |   |   backend.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           backend.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---bindings\\n|   |       |   |   |   |   _rust.pyd\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   +---openssl\\n|   |       |   |   |   |   |   binding.py\\n|   |       |   |   |   |   |   _conditional.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           binding.cpython-312.pyc\\n|   |       |   |   |   |           _conditional.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   +---_rust\\n|   |       |   |   |   |   |   asn1.pyi\\n|   |       |   |   |   |   |   exceptions.pyi\\n|   |       |   |   |   |   |   ocsp.pyi\\n|   |       |   |   |   |   |   pkcs12.pyi\\n|   |       |   |   |   |   |   pkcs7.pyi\\n|   |       |   |   |   |   |   test_support.pyi\\n|   |       |   |   |   |   |   x509.pyi\\n|   |       |   |   |   |   |   _openssl.pyi\\n|   |       |   |   |   |   |   __init__.pyi\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---openssl\\n|   |       |   |   |   |           aead.pyi\\n|   |       |   |   |   |           ciphers.pyi\\n|   |       |   |   |   |           cmac.pyi\\n|   |       |   |   |   |           dh.pyi\\n|   |       |   |   |   |           dsa.pyi\\n|   |       |   |   |   |           ec.pyi\\n|   |       |   |   |   |           ed25519.pyi\\n|   |       |   |   |   |           ed448.pyi\\n|   |       |   |   |   |           hashes.pyi\\n|   |       |   |   |   |           hmac.pyi\\n|   |       |   |   |   |           kdf.pyi\\n|   |       |   |   |   |           keys.pyi\\n|   |       |   |   |   |           poly1305.pyi\\n|   |       |   |   |   |           rsa.pyi\\n|   |       |   |   |   |           x25519.pyi\\n|   |       |   |   |   |           x448.pyi\\n|   |       |   |   |   |           __init__.pyi\\n|   |       |   |   |   |           \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---decrepit\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   +---ciphers\\n|   |       |   |   |   |   |   algorithms.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           algorithms.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---primitives\\n|   |       |   |   |   |   cmac.py\\n|   |       |   |   |   |   constant_time.py\\n|   |       |   |   |   |   hashes.py\\n|   |       |   |   |   |   hmac.py\\n|   |       |   |   |   |   keywrap.py\\n|   |       |   |   |   |   padding.py\\n|   |       |   |   |   |   poly1305.py\\n|   |       |   |   |   |   _asymmetric.py\\n|   |       |   |   |   |   _cipheralgorithm.py\\n|   |       |   |   |   |   _serialization.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   +---asymmetric\\n|   |       |   |   |   |   |   dh.py\\n|   |       |   |   |   |   |   dsa.py\\n|   |       |   |   |   |   |   ec.py\\n|   |       |   |   |   |   |   ed25519.py\\n|   |       |   |   |   |   |   ed448.py\\n|   |       |   |   |   |   |   padding.py\\n|   |       |   |   |   |   |   rsa.py\\n|   |       |   |   |   |   |   types.py\\n|   |       |   |   |   |   |   utils.py\\n|   |       |   |   |   |   |   x25519.py\\n|   |       |   |   |   |   |   x448.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           dh.cpython-312.pyc\\n|   |       |   |   |   |           dsa.cpython-312.pyc\\n|   |       |   |   |   |           ec.cpython-312.pyc\\n|   |       |   |   |   |           ed25519.cpython-312.pyc\\n|   |       |   |   |   |           ed448.cpython-312.pyc\\n|   |       |   |   |   |           padding.cpython-312.pyc\\n|   |       |   |   |   |           rsa.cpython-312.pyc\\n|   |       |   |   |   |           types.cpython-312.pyc\\n|   |       |   |   |   |           utils.cpython-312.pyc\\n|   |       |   |   |   |           x25519.cpython-312.pyc\\n|   |       |   |   |   |           x448.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   +---ciphers\\n|   |       |   |   |   |   |   aead.py\\n|   |       |   |   |   |   |   algorithms.py\\n|   |       |   |   |   |   |   base.py\\n|   |       |   |   |   |   |   modes.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           aead.cpython-312.pyc\\n|   |       |   |   |   |           algorithms.cpython-312.pyc\\n|   |       |   |   |   |           base.cpython-312.pyc\\n|   |       |   |   |   |           modes.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   +---kdf\\n|   |       |   |   |   |   |   argon2.py\\n|   |       |   |   |   |   |   concatkdf.py\\n|   |       |   |   |   |   |   hkdf.py\\n|   |       |   |   |   |   |   kbkdf.py\\n|   |       |   |   |   |   |   pbkdf2.py\\n|   |       |   |   |   |   |   scrypt.py\\n|   |       |   |   |   |   |   x963kdf.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           argon2.cpython-312.pyc\\n|   |       |   |   |   |           concatkdf.cpython-312.pyc\\n|   |       |   |   |   |           hkdf.cpython-312.pyc\\n|   |       |   |   |   |           kbkdf.cpython-312.pyc\\n|   |       |   |   |   |           pbkdf2.cpython-312.pyc\\n|   |       |   |   |   |           scrypt.cpython-312.pyc\\n|   |       |   |   |   |           x963kdf.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   +---serialization\\n|   |       |   |   |   |   |   base.py\\n|   |       |   |   |   |   |   pkcs12.py\\n|   |       |   |   |   |   |   pkcs7.py\\n|   |       |   |   |   |   |   ssh.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           base.cpython-312.pyc\\n|   |       |   |   |   |           pkcs12.cpython-312.pyc\\n|   |       |   |   |   |           pkcs7.cpython-312.pyc\\n|   |       |   |   |   |           ssh.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   +---twofactor\\n|   |       |   |   |   |   |   hotp.py\\n|   |       |   |   |   |   |   totp.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           hotp.cpython-312.pyc\\n|   |       |   |   |   |           totp.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           cmac.cpython-312.pyc\\n|   |       |   |   |           constant_time.cpython-312.pyc\\n|   |       |   |   |           hashes.cpython-312.pyc\\n|   |       |   |   |           hmac.cpython-312.pyc\\n|   |       |   |   |           keywrap.cpython-312.pyc\\n|   |       |   |   |           padding.cpython-312.pyc\\n|   |       |   |   |           poly1305.cpython-312.pyc\\n|   |       |   |   |           _asymmetric.cpython-312.pyc\\n|   |       |   |   |           _cipheralgorithm.cpython-312.pyc\\n|   |       |   |   |           _serialization.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           _oid.cpython-312.pyc\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   +---x509\\n|   |       |   |   |   base.py\\n|   |       |   |   |   certificate_transparency.py\\n|   |       |   |   |   extensions.py\\n|   |       |   |   |   general_name.py\\n|   |       |   |   |   name.py\\n|   |       |   |   |   ocsp.py\\n|   |       |   |   |   oid.py\\n|   |       |   |   |   verification.py\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           base.cpython-312.pyc\\n|   |       |   |           certificate_transparency.cpython-312.pyc\\n|   |       |   |           extensions.cpython-312.pyc\\n|   |       |   |           general_name.cpython-312.pyc\\n|   |       |   |           name.cpython-312.pyc\\n|   |       |   |           ocsp.cpython-312.pyc\\n|   |       |   |           oid.cpython-312.pyc\\n|   |       |   |           verification.cpython-312.pyc\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   \\\\---__pycache__\\n|   |       |           exceptions.cpython-312.pyc\\n|   |       |           fernet.cpython-312.pyc\\n|   |       |           utils.cpython-312.pyc\\n|   |       |           __about__.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           \\n|   |       +---cryptography-44.0.2.dist-info\\n|   |       |   |   INSTALLER\\n|   |       |   |   METADATA\\n|   |       |   |   RECORD\\n|   |       |   |   WHEEL\\n|   |       |   |   \\n|   |       |   \\\\---licenses\\n|   |       |           LICENSE\\n|   |       |           LICENSE.APACHE\\n|   |       |           LICENSE.BSD\\n|   |       |           \\n|   |       +---fitz\\n|   |       |   |   table.py\\n|   |       |   |   utils.py\\n|   |       |   |   __init__.py\\n|   |       |   |   \\n|   |       |   \\\\---__pycache__\\n|   |       |           table.cpython-312.pyc\\n|   |       |           utils.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           \\n|   |       +---ftfy\\n|   |       |   |   badness.py\\n|   |       |   |   chardata.py\\n|   |       |   |   cli.py\\n|   |       |   |   fixes.py\\n|   |       |   |   formatting.py\\n|   |       |   |   py.typed\\n|   |       |   |   __init__.py\\n|   |       |   |   \\n|   |       |   +---bad_codecs\\n|   |       |   |   |   sloppy.py\\n|   |       |   |   |   utf8_variants.py\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           sloppy.cpython-312.pyc\\n|   |       |   |           utf8_variants.cpython-312.pyc\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   \\\\---__pycache__\\n|   |       |           badness.cpython-312.pyc\\n|   |       |           chardata.cpython-312.pyc\\n|   |       |           cli.cpython-312.pyc\\n|   |       |           fixes.cpython-312.pyc\\n|   |       |           formatting.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           \\n|   |       +---ftfy-6.3.1.dist-info\\n|   |       |   |   entry_points.txt\\n|   |       |   |   INSTALLER\\n|   |       |   |   METADATA\\n|   |       |   |   RECORD\\n|   |       |   |   REQUESTED\\n|   |       |   |   WHEEL\\n|   |       |   |   \\n|   |       |   \\\\---licenses\\n|   |       |           LICENSE.txt\\n|   |       |           \\n|   |       +---iniconfig\\n|   |       |   |   exceptions.py\\n|   |       |   |   py.typed\\n|   |       |   |   _parse.py\\n|   |       |   |   _version.py\\n|   |       |   |   __init__.py\\n|   |       |   |   \\n|   |       |   \\\\---__pycache__\\n|   |       |           exceptions.cpython-312.pyc\\n|   |       |           _parse.cpython-312.pyc\\n|   |       |           _version.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           \\n|   |       +---iniconfig-2.1.0.dist-info\\n|   |       |   |   INSTALLER\\n|   |       |   |   METADATA\\n|   |       |   |   RECORD\\n|   |       |   |   WHEEL\\n|   |       |   |   \\n|   |       |   \\\\---licenses\\n|   |       |           LICENSE\\n|   |       |           \\n|   |       +---loguru\\n|   |       |   |   py.typed\\n|   |       |   |   _asyncio_loop.py\\n|   |       |   |   _better_exceptions.py\\n|   |       |   |   _colorama.py\\n|   |       |   |   _colorizer.py\\n|   |       |   |   _contextvars.py\\n|   |       |   |   _ctime_functions.py\\n|   |       |   |   _datetime.py\\n|   |       |   |   _defaults.py\\n|   |       |   |   _error_interceptor.py\\n|   |       |   |   _file_sink.py\\n|   |       |   |   _filters.py\\n|   |       |   |   _get_frame.py\\n|   |       |   |   _handler.py\\n|   |       |   |   _locks_machinery.py\\n|   |       |   |   _logger.py\\n|   |       |   |   _recattrs.py\\n|   |       |   |   _simple_sinks.py\\n|   |       |   |   _string_parsers.py\\n|   |       |   |   __init__.py\\n|   |       |   |   __init__.pyi\\n|   |       |   |   \\n|   |       |   \\\\---__pycache__\\n|   |       |           _asyncio_loop.cpython-312.pyc\\n|   |       |           _better_exceptions.cpython-312.pyc\\n|   |       |           _colorama.cpython-312.pyc\\n|   |       |           _colorizer.cpython-312.pyc\\n|   |       |           _contextvars.cpython-312.pyc\\n|   |       |           _ctime_functions.cpython-312.pyc\\n|   |       |           _datetime.cpython-312.pyc\\n|   |       |           _defaults.cpython-312.pyc\\n|   |       |           _error_interceptor.cpython-312.pyc\\n|   |       |           _file_sink.cpython-312.pyc\\n|   |       |           _filters.cpython-312.pyc\\n|   |       |           _get_frame.cpython-312.pyc\\n|   |       |           _handler.cpython-312.pyc\\n|   |       |           _locks_machinery.cpython-312.pyc\\n|   |       |           _logger.cpython-312.pyc\\n|   |       |           _recattrs.cpython-312.pyc\\n|   |       |           _simple_sinks.cpython-312.pyc\\n|   |       |           _string_parsers.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           \\n|   |       +---loguru-0.7.3.dist-info\\n|   |       |       INSTALLER\\n|   |       |       METADATA\\n|   |       |       RECORD\\n|   |       |       REQUESTED\\n|   |       |       WHEEL\\n|   |       |       \\n|   |       +---packaging\\n|   |       |   |   markers.py\\n|   |       |   |   metadata.py\\n|   |       |   |   py.typed\\n|   |       |   |   requirements.py\\n|   |       |   |   specifiers.py\\n|   |       |   |   tags.py\\n|   |       |   |   utils.py\\n|   |       |   |   version.py\\n|   |       |   |   _elffile.py\\n|   |       |   |   _manylinux.py\\n|   |       |   |   _musllinux.py\\n|   |       |   |   _parser.py\\n|   |       |   |   _structures.py\\n|   |       |   |   _tokenizer.py\\n|   |       |   |   __init__.py\\n|   |       |   |   \\n|   |       |   +---licenses\\n|   |       |   |   |   _spdx.py\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           _spdx.cpython-312.pyc\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   \\\\---__pycache__\\n|   |       |           markers.cpython-312.pyc\\n|   |       |           metadata.cpython-312.pyc\\n|   |       |           requirements.cpython-312.pyc\\n|   |       |           specifiers.cpython-312.pyc\\n|   |       |           tags.cpython-312.pyc\\n|   |       |           utils.cpython-312.pyc\\n|   |       |           version.cpython-312.pyc\\n|   |       |           _elffile.cpython-312.pyc\\n|   |       |           _manylinux.cpython-312.pyc\\n|   |       |           _musllinux.cpython-312.pyc\\n|   |       |           _parser.cpython-312.pyc\\n|   |       |           _structures.cpython-312.pyc\\n|   |       |           _tokenizer.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           \\n|   |       +---packaging-24.2.dist-info\\n|   |       |       INSTALLER\\n|   |       |       LICENSE\\n|   |       |       LICENSE.APACHE\\n|   |       |       LICENSE.BSD\\n|   |       |       METADATA\\n|   |       |       RECORD\\n|   |       |       WHEEL\\n|   |       |       \\n|   |       +---pdfminer\\n|   |       |   |   arcfour.py\\n|   |       |   |   ascii85.py\\n|   |       |   |   casting.py\\n|   |       |   |   ccitt.py\\n|   |       |   |   cmapdb.py\\n|   |       |   |   converter.py\\n|   |       |   |   data_structures.py\\n|   |       |   |   encodingdb.py\\n|   |       |   |   fontmetrics.py\\n|   |       |   |   glyphlist.py\\n|   |       |   |   high_level.py\\n|   |       |   |   image.py\\n|   |       |   |   jbig2.py\\n|   |       |   |   latin_enc.py\\n|   |       |   |   layout.py\\n|   |       |   |   lzw.py\\n|   |       |   |   pdfcolor.py\\n|   |       |   |   pdfdevice.py\\n|   |       |   |   pdfdocument.py\\n|   |       |   |   pdfexceptions.py\\n|   |       |   |   pdffont.py\\n|   |       |   |   pdfinterp.py\\n|   |       |   |   pdfpage.py\\n|   |       |   |   pdfparser.py\\n|   |       |   |   pdftypes.py\\n|   |       |   |   psexceptions.py\\n|   |       |   |   psparser.py\\n|   |       |   |   py.typed\\n|   |       |   |   runlength.py\\n|   |       |   |   settings.py\\n|   |       |   |   utils.py\\n|   |       |   |   _saslprep.py\\n|   |       |   |   __init__.py\\n|   |       |   |   \\n|   |       |   +---cmap\\n|   |       |   |       78-EUC-H.pickle.gz\\n|   |       |   |       78-EUC-V.pickle.gz\\n|   |       |   |       78-H.pickle.gz\\n|   |       |   |       78-RKSJ-H.pickle.gz\\n|   |       |   |       78-RKSJ-V.pickle.gz\\n|   |       |   |       78-V.pickle.gz\\n|   |       |   |       78ms-RKSJ-H.pickle.gz\\n|   |       |   |       78ms-RKSJ-V.pickle.gz\\n|   |       |   |       83pv-RKSJ-H.pickle.gz\\n|   |       |   |       83pv-RKSJ-V.pickle.gz\\n|   |       |   |       90ms-RKSJ-H.pickle.gz\\n|   |       |   |       90ms-RKSJ-V.pickle.gz\\n|   |       |   |       90msp-RKSJ-H.pickle.gz\\n|   |       |   |       90msp-RKSJ-V.pickle.gz\\n|   |       |   |       90pv-RKSJ-H.pickle.gz\\n|   |       |   |       90pv-RKSJ-V.pickle.gz\\n|   |       |   |       Add-H.pickle.gz\\n|   |       |   |       Add-RKSJ-H.pickle.gz\\n|   |       |   |       Add-RKSJ-V.pickle.gz\\n|   |       |   |       Add-V.pickle.gz\\n|   |       |   |       B5-H.pickle.gz\\n|   |       |   |       B5-V.pickle.gz\\n|   |       |   |       B5pc-H.pickle.gz\\n|   |       |   |       B5pc-V.pickle.gz\\n|   |       |   |       CNS-EUC-H.pickle.gz\\n|   |       |   |       CNS-EUC-V.pickle.gz\\n|   |       |   |       CNS1-H.pickle.gz\\n|   |       |   |       CNS1-V.pickle.gz\\n|   |       |   |       CNS2-H.pickle.gz\\n|   |       |   |       CNS2-V.pickle.gz\\n|   |       |   |       ETen-B5-H.pickle.gz\\n|   |       |   |       ETen-B5-V.pickle.gz\\n|   |       |   |       ETenms-B5-H.pickle.gz\\n|   |       |   |       ETenms-B5-V.pickle.gz\\n|   |       |   |       ETHK-B5-H.pickle.gz\\n|   |       |   |       ETHK-B5-V.pickle.gz\\n|   |       |   |       EUC-H.pickle.gz\\n|   |       |   |       EUC-V.pickle.gz\\n|   |       |   |       Ext-H.pickle.gz\\n|   |       |   |       Ext-RKSJ-H.pickle.gz\\n|   |       |   |       Ext-RKSJ-V.pickle.gz\\n|   |       |   |       Ext-V.pickle.gz\\n|   |       |   |       GB-EUC-H.pickle.gz\\n|   |       |   |       GB-EUC-V.pickle.gz\\n|   |       |   |       GB-H.pickle.gz\\n|   |       |   |       GB-V.pickle.gz\\n|   |       |   |       GBK-EUC-H.pickle.gz\\n|   |       |   |       GBK-EUC-V.pickle.gz\\n|   |       |   |       GBK2K-H.pickle.gz\\n|   |       |   |       GBK2K-V.pickle.gz\\n|   |       |   |       GBKp-EUC-H.pickle.gz\\n|   |       |   |       GBKp-EUC-V.pickle.gz\\n|   |       |   |       GBpc-EUC-H.pickle.gz\\n|   |       |   |       GBpc-EUC-V.pickle.gz\\n|   |       |   |       GBT-EUC-H.pickle.gz\\n|   |       |   |       GBT-EUC-V.pickle.gz\\n|   |       |   |       GBT-H.pickle.gz\\n|   |       |   |       GBT-V.pickle.gz\\n|   |       |   |       GBTpc-EUC-H.pickle.gz\\n|   |       |   |       GBTpc-EUC-V.pickle.gz\\n|   |       |   |       H.pickle.gz\\n|   |       |   |       Hankaku-H.pickle.gz\\n|   |       |   |       Hankaku-V.pickle.gz\\n|   |       |   |       Hiragana-H.pickle.gz\\n|   |       |   |       Hiragana-V.pickle.gz\\n|   |       |   |       HKdla-B5-H.pickle.gz\\n|   |       |   |       HKdla-B5-V.pickle.gz\\n|   |       |   |       HKdlb-B5-H.pickle.gz\\n|   |       |   |       HKdlb-B5-V.pickle.gz\\n|   |       |   |       HKgccs-B5-H.pickle.gz\\n|   |       |   |       HKgccs-B5-V.pickle.gz\\n|   |       |   |       HKm314-B5-H.pickle.gz\\n|   |       |   |       HKm314-B5-V.pickle.gz\\n|   |       |   |       HKm471-B5-H.pickle.gz\\n|   |       |   |       HKm471-B5-V.pickle.gz\\n|   |       |   |       HKscs-B5-H.pickle.gz\\n|   |       |   |       HKscs-B5-V.pickle.gz\\n|   |       |   |       Katakana-H.pickle.gz\\n|   |       |   |       Katakana-V.pickle.gz\\n|   |       |   |       KSC-EUC-H.pickle.gz\\n|   |       |   |       KSC-EUC-V.pickle.gz\\n|   |       |   |       KSC-H.pickle.gz\\n|   |       |   |       KSC-Johab-H.pickle.gz\\n|   |       |   |       KSC-Johab-V.pickle.gz\\n|   |       |   |       KSC-V.pickle.gz\\n|   |       |   |       KSCms-UHC-H.pickle.gz\\n|   |       |   |       KSCms-UHC-HW-H.pickle.gz\\n|   |       |   |       KSCms-UHC-HW-V.pickle.gz\\n|   |       |   |       KSCms-UHC-V.pickle.gz\\n|   |       |   |       KSCpc-EUC-H.pickle.gz\\n|   |       |   |       KSCpc-EUC-V.pickle.gz\\n|   |       |   |       NWP-H.pickle.gz\\n|   |       |   |       NWP-V.pickle.gz\\n|   |       |   |       README.txt\\n|   |       |   |       RKSJ-H.pickle.gz\\n|   |       |   |       RKSJ-V.pickle.gz\\n|   |       |   |       Roman-H.pickle.gz\\n|   |       |   |       Roman-V.pickle.gz\\n|   |       |   |       to-unicode-Adobe-CNS1.pickle.gz\\n|   |       |   |       to-unicode-Adobe-GB1.pickle.gz\\n|   |       |   |       to-unicode-Adobe-Japan1.pickle.gz\\n|   |       |   |       to-unicode-Adobe-Korea1.pickle.gz\\n|   |       |   |       UniCNS-UCS2-H.pickle.gz\\n|   |       |   |       UniCNS-UCS2-V.pickle.gz\\n|   |       |   |       UniCNS-UTF16-H.pickle.gz\\n|   |       |   |       UniCNS-UTF16-V.pickle.gz\\n|   |       |   |       UniCNS-UTF32-H.pickle.gz\\n|   |       |   |       UniCNS-UTF32-V.pickle.gz\\n|   |       |   |       UniCNS-UTF8-H.pickle.gz\\n|   |       |   |       UniCNS-UTF8-V.pickle.gz\\n|   |       |   |       UniGB-UCS2-H.pickle.gz\\n|   |       |   |       UniGB-UCS2-V.pickle.gz\\n|   |       |   |       UniGB-UTF16-H.pickle.gz\\n|   |       |   |       UniGB-UTF16-V.pickle.gz\\n|   |       |   |       UniGB-UTF32-H.pickle.gz\\n|   |       |   |       UniGB-UTF32-V.pickle.gz\\n|   |       |   |       UniGB-UTF8-H.pickle.gz\\n|   |       |   |       UniGB-UTF8-V.pickle.gz\\n|   |       |   |       UniJIS-UCS2-H.pickle.gz\\n|   |       |   |       UniJIS-UCS2-HW-H.pickle.gz\\n|   |       |   |       UniJIS-UCS2-HW-V.pickle.gz\\n|   |       |   |       UniJIS-UCS2-V.pickle.gz\\n|   |       |   |       UniJIS-UTF16-H.pickle.gz\\n|   |       |   |       UniJIS-UTF16-V.pickle.gz\\n|   |       |   |       UniJIS-UTF32-H.pickle.gz\\n|   |       |   |       UniJIS-UTF32-V.pickle.gz\\n|   |       |   |       UniJIS-UTF8-H.pickle.gz\\n|   |       |   |       UniJIS-UTF8-V.pickle.gz\\n|   |       |   |       UniJIS2004-UTF16-H.pickle.gz\\n|   |       |   |       UniJIS2004-UTF16-V.pickle.gz\\n|   |       |   |       UniJIS2004-UTF32-H.pickle.gz\\n|   |       |   |       UniJIS2004-UTF32-V.pickle.gz\\n|   |       |   |       UniJIS2004-UTF8-H.pickle.gz\\n|   |       |   |       UniJIS2004-UTF8-V.pickle.gz\\n|   |       |   |       UniJISX0213-UTF32-H.pickle.gz\\n|   |       |   |       UniJISX0213-UTF32-V.pickle.gz\\n|   |       |   |       UniJISX02132004-UTF32-H.pickle.gz\\n|   |       |   |       UniJISX02132004-UTF32-V.pickle.gz\\n|   |       |   |       UniKS-UCS2-H.pickle.gz\\n|   |       |   |       UniKS-UCS2-V.pickle.gz\\n|   |       |   |       UniKS-UTF16-H.pickle.gz\\n|   |       |   |       UniKS-UTF16-V.pickle.gz\\n|   |       |   |       UniKS-UTF32-H.pickle.gz\\n|   |       |   |       UniKS-UTF32-V.pickle.gz\\n|   |       |   |       UniKS-UTF8-H.pickle.gz\\n|   |       |   |       UniKS-UTF8-V.pickle.gz\\n|   |       |   |       V.pickle.gz\\n|   |       |   |       WP-Symbol-H.pickle.gz\\n|   |       |   |       WP-Symbol-V.pickle.gz\\n|   |       |   |       \\n|   |       |   \\\\---__pycache__\\n|   |       |           arcfour.cpython-312.pyc\\n|   |       |           ascii85.cpython-312.pyc\\n|   |       |           casting.cpython-312.pyc\\n|   |       |           ccitt.cpython-312.pyc\\n|   |       |           cmapdb.cpython-312.pyc\\n|   |       |           converter.cpython-312.pyc\\n|   |       |           data_structures.cpython-312.pyc\\n|   |       |           encodingdb.cpython-312.pyc\\n|   |       |           fontmetrics.cpython-312.pyc\\n|   |       |           glyphlist.cpython-312.pyc\\n|   |       |           high_level.cpython-312.pyc\\n|   |       |           image.cpython-312.pyc\\n|   |       |           jbig2.cpython-312.pyc\\n|   |       |           latin_enc.cpython-312.pyc\\n|   |       |           layout.cpython-312.pyc\\n|   |       |           lzw.cpython-312.pyc\\n|   |       |           pdfcolor.cpython-312.pyc\\n|   |       |           pdfdevice.cpython-312.pyc\\n|   |       |           pdfdocument.cpython-312.pyc\\n|   |       |           pdfexceptions.cpython-312.pyc\\n|   |       |           pdffont.cpython-312.pyc\\n|   |       |           pdfinterp.cpython-312.pyc\\n|   |       |           pdfpage.cpython-312.pyc\\n|   |       |           pdfparser.cpython-312.pyc\\n|   |       |           pdftypes.cpython-312.pyc\\n|   |       |           psexceptions.cpython-312.pyc\\n|   |       |           psparser.cpython-312.pyc\\n|   |       |           runlength.cpython-312.pyc\\n|   |       |           settings.cpython-312.pyc\\n|   |       |           utils.cpython-312.pyc\\n|   |       |           _saslprep.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           \\n|   |       +---pdfminer_six-20250327.dist-info\\n|   |       |   |   INSTALLER\\n|   |       |   |   METADATA\\n|   |       |   |   RECORD\\n|   |       |   |   top_level.txt\\n|   |       |   |   WHEEL\\n|   |       |   |   \\n|   |       |   \\\\---licenses\\n|   |       |           LICENSE\\n|   |       |           \\n|   |       +---pdfplumber\\n|   |       |   |   cli.py\\n|   |       |   |   container.py\\n|   |       |   |   convert.py\\n|   |       |   |   ctm.py\\n|   |       |   |   display.py\\n|   |       |   |   page.py\\n|   |       |   |   pdf.py\\n|   |       |   |   py.typed\\n|   |       |   |   repair.py\\n|   |       |   |   structure.py\\n|   |       |   |   table.py\\n|   |       |   |   _typing.py\\n|   |       |   |   _version.py\\n|   |       |   |   __init__.py\\n|   |       |   |   \\n|   |       |   +---utils\\n|   |       |   |   |   clustering.py\\n|   |       |   |   |   exceptions.py\\n|   |       |   |   |   generic.py\\n|   |       |   |   |   geometry.py\\n|   |       |   |   |   pdfinternals.py\\n|   |       |   |   |   text.py\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           clustering.cpython-312.pyc\\n|   |       |   |           exceptions.cpython-312.pyc\\n|   |       |   |           generic.cpython-312.pyc\\n|   |       |   |           geometry.cpython-312.pyc\\n|   |       |   |           pdfinternals.cpython-312.pyc\\n|   |       |   |           text.cpython-312.pyc\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   \\\\---__pycache__\\n|   |       |           cli.cpython-312.pyc\\n|   |       |           container.cpython-312.pyc\\n|   |       |           convert.cpython-312.pyc\\n|   |       |           ctm.cpython-312.pyc\\n|   |       |           display.cpython-312.pyc\\n|   |       |           page.cpython-312.pyc\\n|   |       |           pdf.cpython-312.pyc\\n|   |       |           repair.cpython-312.pyc\\n|   |       |           structure.cpython-312.pyc\\n|   |       |           table.cpython-312.pyc\\n|   |       |           _typing.cpython-312.pyc\\n|   |       |           _version.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           \\n|   |       +---pdfplumber-0.11.6.dist-info\\n|   |       |   |   entry_points.txt\\n|   |       |   |   INSTALLER\\n|   |       |   |   METADATA\\n|   |       |   |   pbr.json\\n|   |       |   |   RECORD\\n|   |       |   |   REQUESTED\\n|   |       |   |   top_level.txt\\n|   |       |   |   WHEEL\\n|   |       |   |   \\n|   |       |   \\\\---licenses\\n|   |       |           LICENSE.txt\\n|   |       |           \\n|   |       +---PIL\\n|   |       |   |   BdfFontFile.py\\n|   |       |   |   BlpImagePlugin.py\\n|   |       |   |   BmpImagePlugin.py\\n|   |       |   |   BufrStubImagePlugin.py\\n|   |       |   |   ContainerIO.py\\n|   |       |   |   CurImagePlugin.py\\n|   |       |   |   DcxImagePlugin.py\\n|   |       |   |   DdsImagePlugin.py\\n|   |       |   |   EpsImagePlugin.py\\n|   |       |   |   ExifTags.py\\n|   |       |   |   features.py\\n|   |       |   |   FitsImagePlugin.py\\n|   |       |   |   FliImagePlugin.py\\n|   |       |   |   FontFile.py\\n|   |       |   |   FpxImagePlugin.py\\n|   |       |   |   FtexImagePlugin.py\\n|   |       |   |   GbrImagePlugin.py\\n|   |       |   |   GdImageFile.py\\n|   |       |   |   GifImagePlugin.py\\n|   |       |   |   GimpGradientFile.py\\n|   |       |   |   GimpPaletteFile.py\\n|   |       |   |   GribStubImagePlugin.py\\n|   |       |   |   Hdf5StubImagePlugin.py\\n|   |       |   |   IcnsImagePlugin.py\\n|   |       |   |   IcoImagePlugin.py\\n|   |       |   |   Image.py\\n|   |       |   |   ImageChops.py\\n|   |       |   |   ImageCms.py\\n|   |       |   |   ImageColor.py\\n|   |       |   |   ImageDraw.py\\n|   |       |   |   ImageDraw2.py\\n|   |       |   |   ImageEnhance.py\\n|   |       |   |   ImageFile.py\\n|   |       |   |   ImageFilter.py\\n|   |       |   |   ImageFont.py\\n|   |       |   |   ImageGrab.py\\n|   |       |   |   ImageMath.py\\n|   |       |   |   ImageMode.py\\n|   |       |   |   ImageMorph.py\\n|   |       |   |   ImageOps.py\\n|   |       |   |   ImagePalette.py\\n|   |       |   |   ImagePath.py\\n|   |       |   |   ImageQt.py\\n|   |       |   |   ImageSequence.py\\n|   |       |   |   ImageShow.py\\n|   |       |   |   ImageStat.py\\n|   |       |   |   ImageTk.py\\n|   |       |   |   ImageTransform.py\\n|   |       |   |   ImageWin.py\\n|   |       |   |   ImImagePlugin.py\\n|   |       |   |   ImtImagePlugin.py\\n|   |       |   |   IptcImagePlugin.py\\n|   |       |   |   Jpeg2KImagePlugin.py\\n|   |       |   |   JpegImagePlugin.py\\n|   |       |   |   JpegPresets.py\\n|   |       |   |   McIdasImagePlugin.py\\n|   |       |   |   MicImagePlugin.py\\n|   |       |   |   MpegImagePlugin.py\\n|   |       |   |   MpoImagePlugin.py\\n|   |       |   |   MspImagePlugin.py\\n|   |       |   |   PaletteFile.py\\n|   |       |   |   PalmImagePlugin.py\\n|   |       |   |   PcdImagePlugin.py\\n|   |       |   |   PcfFontFile.py\\n|   |       |   |   PcxImagePlugin.py\\n|   |       |   |   PdfImagePlugin.py\\n|   |       |   |   PdfParser.py\\n|   |       |   |   PixarImagePlugin.py\\n|   |       |   |   PngImagePlugin.py\\n|   |       |   |   PpmImagePlugin.py\\n|   |       |   |   PsdImagePlugin.py\\n|   |       |   |   PSDraw.py\\n|   |       |   |   py.typed\\n|   |       |   |   QoiImagePlugin.py\\n|   |       |   |   report.py\\n|   |       |   |   SgiImagePlugin.py\\n|   |       |   |   SpiderImagePlugin.py\\n|   |       |   |   SunImagePlugin.py\\n|   |       |   |   TarIO.py\\n|   |       |   |   TgaImagePlugin.py\\n|   |       |   |   TiffImagePlugin.py\\n|   |       |   |   TiffTags.py\\n|   |       |   |   WalImageFile.py\\n|   |       |   |   WebPImagePlugin.py\\n|   |       |   |   WmfImagePlugin.py\\n|   |       |   |   XbmImagePlugin.py\\n|   |       |   |   XpmImagePlugin.py\\n|   |       |   |   XVThumbImagePlugin.py\\n|   |       |   |   _binary.py\\n|   |       |   |   _deprecate.py\\n|   |       |   |   _imaging.cp312-win_amd64.pyd\\n|   |       |   |   _imaging.pyi\\n|   |       |   |   _imagingcms.cp312-win_amd64.pyd\\n|   |       |   |   _imagingcms.pyi\\n|   |       |   |   _imagingft.cp312-win_amd64.pyd\\n|   |       |   |   _imagingft.pyi\\n|   |       |   |   _imagingmath.cp312-win_amd64.pyd\\n|   |       |   |   _imagingmath.pyi\\n|   |       |   |   _imagingmorph.cp312-win_amd64.pyd\\n|   |       |   |   _imagingmorph.pyi\\n|   |       |   |   _imagingtk.cp312-win_amd64.pyd\\n|   |       |   |   _imagingtk.pyi\\n|   |       |   |   _tkinter_finder.py\\n|   |       |   |   _typing.py\\n|   |       |   |   _util.py\\n|   |       |   |   _version.py\\n|   |       |   |   _webp.cp312-win_amd64.pyd\\n|   |       |   |   _webp.pyi\\n|   |       |   |   __init__.py\\n|   |       |   |   __main__.py\\n|   |       |   |   \\n|   |       |   \\\\---__pycache__\\n|   |       |           BdfFontFile.cpython-312.pyc\\n|   |       |           BlpImagePlugin.cpython-312.pyc\\n|   |       |           BmpImagePlugin.cpython-312.pyc\\n|   |       |           BufrStubImagePlugin.cpython-312.pyc\\n|   |       |           ContainerIO.cpython-312.pyc\\n|   |       |           CurImagePlugin.cpython-312.pyc\\n|   |       |           DcxImagePlugin.cpython-312.pyc\\n|   |       |           DdsImagePlugin.cpython-312.pyc\\n|   |       |           EpsImagePlugin.cpython-312.pyc\\n|   |       |           ExifTags.cpython-312.pyc\\n|   |       |           features.cpython-312.pyc\\n|   |       |           FitsImagePlugin.cpython-312.pyc\\n|   |       |           FliImagePlugin.cpython-312.pyc\\n|   |       |           FontFile.cpython-312.pyc\\n|   |       |           FpxImagePlugin.cpython-312.pyc\\n|   |       |           FtexImagePlugin.cpython-312.pyc\\n|   |       |           GbrImagePlugin.cpython-312.pyc\\n|   |       |           GdImageFile.cpython-312.pyc\\n|   |       |           GifImagePlugin.cpython-312.pyc\\n|   |       |           GimpGradientFile.cpython-312.pyc\\n|   |       |           GimpPaletteFile.cpython-312.pyc\\n|   |       |           GribStubImagePlugin.cpython-312.pyc\\n|   |       |           Hdf5StubImagePlugin.cpython-312.pyc\\n|   |       |           IcnsImagePlugin.cpython-312.pyc\\n|   |       |           IcoImagePlugin.cpython-312.pyc\\n|   |       |           Image.cpython-312.pyc\\n|   |       |           ImageChops.cpython-312.pyc\\n|   |       |           ImageCms.cpython-312.pyc\\n|   |       |           ImageColor.cpython-312.pyc\\n|   |       |           ImageDraw.cpython-312.pyc\\n|   |       |           ImageDraw2.cpython-312.pyc\\n|   |       |           ImageEnhance.cpython-312.pyc\\n|   |       |           ImageFile.cpython-312.pyc\\n|   |       |           ImageFilter.cpython-312.pyc\\n|   |       |           ImageFont.cpython-312.pyc\\n|   |       |           ImageGrab.cpython-312.pyc\\n|   |       |           ImageMath.cpython-312.pyc\\n|   |       |           ImageMode.cpython-312.pyc\\n|   |       |           ImageMorph.cpython-312.pyc\\n|   |       |           ImageOps.cpython-312.pyc\\n|   |       |           ImagePalette.cpython-312.pyc\\n|   |       |           ImagePath.cpython-312.pyc\\n|   |       |           ImageQt.cpython-312.pyc\\n|   |       |           ImageSequence.cpython-312.pyc\\n|   |       |           ImageShow.cpython-312.pyc\\n|   |       |           ImageStat.cpython-312.pyc\\n|   |       |           ImageTk.cpython-312.pyc\\n|   |       |           ImageTransform.cpython-312.pyc\\n|   |       |           ImageWin.cpython-312.pyc\\n|   |       |           ImImagePlugin.cpython-312.pyc\\n|   |       |           ImtImagePlugin.cpython-312.pyc\\n|   |       |           IptcImagePlugin.cpython-312.pyc\\n|   |       |           Jpeg2KImagePlugin.cpython-312.pyc\\n|   |       |           JpegImagePlugin.cpython-312.pyc\\n|   |       |           JpegPresets.cpython-312.pyc\\n|   |       |           McIdasImagePlugin.cpython-312.pyc\\n|   |       |           MicImagePlugin.cpython-312.pyc\\n|   |       |           MpegImagePlugin.cpython-312.pyc\\n|   |       |           MpoImagePlugin.cpython-312.pyc\\n|   |       |           MspImagePlugin.cpython-312.pyc\\n|   |       |           PaletteFile.cpython-312.pyc\\n|   |       |           PalmImagePlugin.cpython-312.pyc\\n|   |       |           PcdImagePlugin.cpython-312.pyc\\n|   |       |           PcfFontFile.cpython-312.pyc\\n|   |       |           PcxImagePlugin.cpython-312.pyc\\n|   |       |           PdfImagePlugin.cpython-312.pyc\\n|   |       |           PdfParser.cpython-312.pyc\\n|   |       |           PixarImagePlugin.cpython-312.pyc\\n|   |       |           PngImagePlugin.cpython-312.pyc\\n|   |       |           PpmImagePlugin.cpython-312.pyc\\n|   |       |           PsdImagePlugin.cpython-312.pyc\\n|   |       |           PSDraw.cpython-312.pyc\\n|   |       |           QoiImagePlugin.cpython-312.pyc\\n|   |       |           report.cpython-312.pyc\\n|   |       |           SgiImagePlugin.cpython-312.pyc\\n|   |       |           SpiderImagePlugin.cpython-312.pyc\\n|   |       |           SunImagePlugin.cpython-312.pyc\\n|   |       |           TarIO.cpython-312.pyc\\n|   |       |           TgaImagePlugin.cpython-312.pyc\\n|   |       |           TiffImagePlugin.cpython-312.pyc\\n|   |       |           TiffTags.cpython-312.pyc\\n|   |       |           WalImageFile.cpython-312.pyc\\n|   |       |           WebPImagePlugin.cpython-312.pyc\\n|   |       |           WmfImagePlugin.cpython-312.pyc\\n|   |       |           XbmImagePlugin.cpython-312.pyc\\n|   |       |           XpmImagePlugin.cpython-312.pyc\\n|   |       |           XVThumbImagePlugin.cpython-312.pyc\\n|   |       |           _binary.cpython-312.pyc\\n|   |       |           _deprecate.cpython-312.pyc\\n|   |       |           _tkinter_finder.cpython-312.pyc\\n|   |       |           _typing.cpython-312.pyc\\n|   |       |           _util.cpython-312.pyc\\n|   |       |           _version.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           __main__.cpython-312.pyc\\n|   |       |           \\n|   |       +---pillow-11.1.0.dist-info\\n|   |       |       INSTALLER\\n|   |       |       LICENSE\\n|   |       |       METADATA\\n|   |       |       RECORD\\n|   |       |       top_level.txt\\n|   |       |       WHEEL\\n|   |       |       zip-safe\\n|   |       |       \\n|   |       +---pip\\n|   |       |   |   py.typed\\n|   |       |   |   __init__.py\\n|   |       |   |   __main__.py\\n|   |       |   |   __pip-runner__.py\\n|   |       |   |   \\n|   |       |   +---_internal\\n|   |       |   |   |   build_env.py\\n|   |       |   |   |   cache.py\\n|   |       |   |   |   configuration.py\\n|   |       |   |   |   exceptions.py\\n|   |       |   |   |   main.py\\n|   |       |   |   |   pyproject.py\\n|   |       |   |   |   self_outdated_check.py\\n|   |       |   |   |   wheel_builder.py\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   \\n|   |       |   |   +---cli\\n|   |       |   |   |   |   autocompletion.py\\n|   |       |   |   |   |   base_command.py\\n|   |       |   |   |   |   cmdoptions.py\\n|   |       |   |   |   |   command_context.py\\n|   |       |   |   |   |   index_command.py\\n|   |       |   |   |   |   main.py\\n|   |       |   |   |   |   main_parser.py\\n|   |       |   |   |   |   parser.py\\n|   |       |   |   |   |   progress_bars.py\\n|   |       |   |   |   |   req_command.py\\n|   |       |   |   |   |   spinners.py\\n|   |       |   |   |   |   status_codes.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           autocompletion.cpython-312.pyc\\n|   |       |   |   |           base_command.cpython-312.pyc\\n|   |       |   |   |           cmdoptions.cpython-312.pyc\\n|   |       |   |   |           command_context.cpython-312.pyc\\n|   |       |   |   |           index_command.cpython-312.pyc\\n|   |       |   |   |           main.cpython-312.pyc\\n|   |       |   |   |           main_parser.cpython-312.pyc\\n|   |       |   |   |           parser.cpython-312.pyc\\n|   |       |   |   |           progress_bars.cpython-312.pyc\\n|   |       |   |   |           req_command.cpython-312.pyc\\n|   |       |   |   |           spinners.cpython-312.pyc\\n|   |       |   |   |           status_codes.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---commands\\n|   |       |   |   |   |   cache.py\\n|   |       |   |   |   |   check.py\\n|   |       |   |   |   |   completion.py\\n|   |       |   |   |   |   configuration.py\\n|   |       |   |   |   |   debug.py\\n|   |       |   |   |   |   download.py\\n|   |       |   |   |   |   freeze.py\\n|   |       |   |   |   |   hash.py\\n|   |       |   |   |   |   help.py\\n|   |       |   |   |   |   index.py\\n|   |       |   |   |   |   inspect.py\\n|   |       |   |   |   |   install.py\\n|   |       |   |   |   |   list.py\\n|   |       |   |   |   |   search.py\\n|   |       |   |   |   |   show.py\\n|   |       |   |   |   |   uninstall.py\\n|   |       |   |   |   |   wheel.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           cache.cpython-312.pyc\\n|   |       |   |   |           check.cpython-312.pyc\\n|   |       |   |   |           completion.cpython-312.pyc\\n|   |       |   |   |           configuration.cpython-312.pyc\\n|   |       |   |   |           debug.cpython-312.pyc\\n|   |       |   |   |           download.cpython-312.pyc\\n|   |       |   |   |           freeze.cpython-312.pyc\\n|   |       |   |   |           hash.cpython-312.pyc\\n|   |       |   |   |           help.cpython-312.pyc\\n|   |       |   |   |           index.cpython-312.pyc\\n|   |       |   |   |           inspect.cpython-312.pyc\\n|   |       |   |   |           install.cpython-312.pyc\\n|   |       |   |   |           list.cpython-312.pyc\\n|   |       |   |   |           search.cpython-312.pyc\\n|   |       |   |   |           show.cpython-312.pyc\\n|   |       |   |   |           uninstall.cpython-312.pyc\\n|   |       |   |   |           wheel.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---distributions\\n|   |       |   |   |   |   base.py\\n|   |       |   |   |   |   installed.py\\n|   |       |   |   |   |   sdist.py\\n|   |       |   |   |   |   wheel.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           base.cpython-312.pyc\\n|   |       |   |   |           installed.cpython-312.pyc\\n|   |       |   |   |           sdist.cpython-312.pyc\\n|   |       |   |   |           wheel.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---index\\n|   |       |   |   |   |   collector.py\\n|   |       |   |   |   |   package_finder.py\\n|   |       |   |   |   |   sources.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           collector.cpython-312.pyc\\n|   |       |   |   |           package_finder.cpython-312.pyc\\n|   |       |   |   |           sources.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---locations\\n|   |       |   |   |   |   base.py\\n|   |       |   |   |   |   _distutils.py\\n|   |       |   |   |   |   _sysconfig.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           base.cpython-312.pyc\\n|   |       |   |   |           _distutils.cpython-312.pyc\\n|   |       |   |   |           _sysconfig.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---metadata\\n|   |       |   |   |   |   base.py\\n|   |       |   |   |   |   pkg_resources.py\\n|   |       |   |   |   |   _json.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   +---importlib\\n|   |       |   |   |   |   |   _compat.py\\n|   |       |   |   |   |   |   _dists.py\\n|   |       |   |   |   |   |   _envs.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           _compat.cpython-312.pyc\\n|   |       |   |   |   |           _dists.cpython-312.pyc\\n|   |       |   |   |   |           _envs.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           base.cpython-312.pyc\\n|   |       |   |   |           pkg_resources.cpython-312.pyc\\n|   |       |   |   |           _json.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---models\\n|   |       |   |   |   |   candidate.py\\n|   |       |   |   |   |   direct_url.py\\n|   |       |   |   |   |   format_control.py\\n|   |       |   |   |   |   index.py\\n|   |       |   |   |   |   installation_report.py\\n|   |       |   |   |   |   link.py\\n|   |       |   |   |   |   scheme.py\\n|   |       |   |   |   |   search_scope.py\\n|   |       |   |   |   |   selection_prefs.py\\n|   |       |   |   |   |   target_python.py\\n|   |       |   |   |   |   wheel.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           candidate.cpython-312.pyc\\n|   |       |   |   |           direct_url.cpython-312.pyc\\n|   |       |   |   |           format_control.cpython-312.pyc\\n|   |       |   |   |           index.cpython-312.pyc\\n|   |       |   |   |           installation_report.cpython-312.pyc\\n|   |       |   |   |           link.cpython-312.pyc\\n|   |       |   |   |           scheme.cpython-312.pyc\\n|   |       |   |   |           search_scope.cpython-312.pyc\\n|   |       |   |   |           selection_prefs.cpython-312.pyc\\n|   |       |   |   |           target_python.cpython-312.pyc\\n|   |       |   |   |           wheel.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---network\\n|   |       |   |   |   |   auth.py\\n|   |       |   |   |   |   cache.py\\n|   |       |   |   |   |   download.py\\n|   |       |   |   |   |   lazy_wheel.py\\n|   |       |   |   |   |   session.py\\n|   |       |   |   |   |   utils.py\\n|   |       |   |   |   |   xmlrpc.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           auth.cpython-312.pyc\\n|   |       |   |   |           cache.cpython-312.pyc\\n|   |       |   |   |           download.cpython-312.pyc\\n|   |       |   |   |           lazy_wheel.cpython-312.pyc\\n|   |       |   |   |           session.cpython-312.pyc\\n|   |       |   |   |           utils.cpython-312.pyc\\n|   |       |   |   |           xmlrpc.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---operations\\n|   |       |   |   |   |   check.py\\n|   |       |   |   |   |   freeze.py\\n|   |       |   |   |   |   prepare.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   +---build\\n|   |       |   |   |   |   |   build_tracker.py\\n|   |       |   |   |   |   |   metadata.py\\n|   |       |   |   |   |   |   metadata_editable.py\\n|   |       |   |   |   |   |   metadata_legacy.py\\n|   |       |   |   |   |   |   wheel.py\\n|   |       |   |   |   |   |   wheel_editable.py\\n|   |       |   |   |   |   |   wheel_legacy.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           build_tracker.cpython-312.pyc\\n|   |       |   |   |   |           metadata.cpython-312.pyc\\n|   |       |   |   |   |           metadata_editable.cpython-312.pyc\\n|   |       |   |   |   |           metadata_legacy.cpython-312.pyc\\n|   |       |   |   |   |           wheel.cpython-312.pyc\\n|   |       |   |   |   |           wheel_editable.cpython-312.pyc\\n|   |       |   |   |   |           wheel_legacy.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   +---install\\n|   |       |   |   |   |   |   editable_legacy.py\\n|   |       |   |   |   |   |   wheel.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           editable_legacy.cpython-312.pyc\\n|   |       |   |   |   |           wheel.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           check.cpython-312.pyc\\n|   |       |   |   |           freeze.cpython-312.pyc\\n|   |       |   |   |           prepare.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---req\\n|   |       |   |   |   |   constructors.py\\n|   |       |   |   |   |   req_file.py\\n|   |       |   |   |   |   req_install.py\\n|   |       |   |   |   |   req_set.py\\n|   |       |   |   |   |   req_uninstall.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           constructors.cpython-312.pyc\\n|   |       |   |   |           req_file.cpython-312.pyc\\n|   |       |   |   |           req_install.cpython-312.pyc\\n|   |       |   |   |           req_set.cpython-312.pyc\\n|   |       |   |   |           req_uninstall.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---resolution\\n|   |       |   |   |   |   base.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   +---legacy\\n|   |       |   |   |   |   |   resolver.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           resolver.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   +---resolvelib\\n|   |       |   |   |   |   |   base.py\\n|   |       |   |   |   |   |   candidates.py\\n|   |       |   |   |   |   |   factory.py\\n|   |       |   |   |   |   |   found_candidates.py\\n|   |       |   |   |   |   |   provider.py\\n|   |       |   |   |   |   |   reporter.py\\n|   |       |   |   |   |   |   requirements.py\\n|   |       |   |   |   |   |   resolver.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           base.cpython-312.pyc\\n|   |       |   |   |   |           candidates.cpython-312.pyc\\n|   |       |   |   |   |           factory.cpython-312.pyc\\n|   |       |   |   |   |           found_candidates.cpython-312.pyc\\n|   |       |   |   |   |           provider.cpython-312.pyc\\n|   |       |   |   |   |           reporter.cpython-312.pyc\\n|   |       |   |   |   |           requirements.cpython-312.pyc\\n|   |       |   |   |   |           resolver.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           base.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---utils\\n|   |       |   |   |   |   appdirs.py\\n|   |       |   |   |   |   compat.py\\n|   |       |   |   |   |   compatibility_tags.py\\n|   |       |   |   |   |   datetime.py\\n|   |       |   |   |   |   deprecation.py\\n|   |       |   |   |   |   direct_url_helpers.py\\n|   |       |   |   |   |   egg_link.py\\n|   |       |   |   |   |   entrypoints.py\\n|   |       |   |   |   |   filesystem.py\\n|   |       |   |   |   |   filetypes.py\\n|   |       |   |   |   |   glibc.py\\n|   |       |   |   |   |   hashes.py\\n|   |       |   |   |   |   logging.py\\n|   |       |   |   |   |   misc.py\\n|   |       |   |   |   |   packaging.py\\n|   |       |   |   |   |   retry.py\\n|   |       |   |   |   |   setuptools_build.py\\n|   |       |   |   |   |   subprocess.py\\n|   |       |   |   |   |   temp_dir.py\\n|   |       |   |   |   |   unpacking.py\\n|   |       |   |   |   |   urls.py\\n|   |       |   |   |   |   virtualenv.py\\n|   |       |   |   |   |   wheel.py\\n|   |       |   |   |   |   _jaraco_text.py\\n|   |       |   |   |   |   _log.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           appdirs.cpython-312.pyc\\n|   |       |   |   |           compat.cpython-312.pyc\\n|   |       |   |   |           compatibility_tags.cpython-312.pyc\\n|   |       |   |   |           datetime.cpython-312.pyc\\n|   |       |   |   |           deprecation.cpython-312.pyc\\n|   |       |   |   |           direct_url_helpers.cpython-312.pyc\\n|   |       |   |   |           egg_link.cpython-312.pyc\\n|   |       |   |   |           entrypoints.cpython-312.pyc\\n|   |       |   |   |           filesystem.cpython-312.pyc\\n|   |       |   |   |           filetypes.cpython-312.pyc\\n|   |       |   |   |           glibc.cpython-312.pyc\\n|   |       |   |   |           hashes.cpython-312.pyc\\n|   |       |   |   |           logging.cpython-312.pyc\\n|   |       |   |   |           misc.cpython-312.pyc\\n|   |       |   |   |           packaging.cpython-312.pyc\\n|   |       |   |   |           retry.cpython-312.pyc\\n|   |       |   |   |           setuptools_build.cpython-312.pyc\\n|   |       |   |   |           subprocess.cpython-312.pyc\\n|   |       |   |   |           temp_dir.cpython-312.pyc\\n|   |       |   |   |           unpacking.cpython-312.pyc\\n|   |       |   |   |           urls.cpython-312.pyc\\n|   |       |   |   |           virtualenv.cpython-312.pyc\\n|   |       |   |   |           wheel.cpython-312.pyc\\n|   |       |   |   |           _jaraco_text.cpython-312.pyc\\n|   |       |   |   |           _log.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---vcs\\n|   |       |   |   |   |   bazaar.py\\n|   |       |   |   |   |   git.py\\n|   |       |   |   |   |   mercurial.py\\n|   |       |   |   |   |   subversion.py\\n|   |       |   |   |   |   versioncontrol.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           bazaar.cpython-312.pyc\\n|   |       |   |   |           git.cpython-312.pyc\\n|   |       |   |   |           mercurial.cpython-312.pyc\\n|   |       |   |   |           subversion.cpython-312.pyc\\n|   |       |   |   |           versioncontrol.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           build_env.cpython-312.pyc\\n|   |       |   |           cache.cpython-312.pyc\\n|   |       |   |           configuration.cpython-312.pyc\\n|   |       |   |           exceptions.cpython-312.pyc\\n|   |       |   |           main.cpython-312.pyc\\n|   |       |   |           pyproject.cpython-312.pyc\\n|   |       |   |           self_outdated_check.cpython-312.pyc\\n|   |       |   |           wheel_builder.cpython-312.pyc\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   +---_vendor\\n|   |       |   |   |   typing_extensions.py\\n|   |       |   |   |   vendor.txt\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   \\n|   |       |   |   +---cachecontrol\\n|   |       |   |   |   |   adapter.py\\n|   |       |   |   |   |   cache.py\\n|   |       |   |   |   |   controller.py\\n|   |       |   |   |   |   filewrapper.py\\n|   |       |   |   |   |   heuristics.py\\n|   |       |   |   |   |   py.typed\\n|   |       |   |   |   |   serialize.py\\n|   |       |   |   |   |   wrapper.py\\n|   |       |   |   |   |   _cmd.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   +---caches\\n|   |       |   |   |   |   |   file_cache.py\\n|   |       |   |   |   |   |   redis_cache.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           file_cache.cpython-312.pyc\\n|   |       |   |   |   |           redis_cache.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           adapter.cpython-312.pyc\\n|   |       |   |   |           cache.cpython-312.pyc\\n|   |       |   |   |           controller.cpython-312.pyc\\n|   |       |   |   |           filewrapper.cpython-312.pyc\\n|   |       |   |   |           heuristics.cpython-312.pyc\\n|   |       |   |   |           serialize.cpython-312.pyc\\n|   |       |   |   |           wrapper.cpython-312.pyc\\n|   |       |   |   |           _cmd.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---certifi\\n|   |       |   |   |   |   cacert.pem\\n|   |       |   |   |   |   core.py\\n|   |       |   |   |   |   py.typed\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   __main__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           core.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           __main__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---distlib\\n|   |       |   |   |   |   compat.py\\n|   |       |   |   |   |   database.py\\n|   |       |   |   |   |   index.py\\n|   |       |   |   |   |   locators.py\\n|   |       |   |   |   |   manifest.py\\n|   |       |   |   |   |   markers.py\\n|   |       |   |   |   |   metadata.py\\n|   |       |   |   |   |   resources.py\\n|   |       |   |   |   |   scripts.py\\n|   |       |   |   |   |   t32.exe\\n|   |       |   |   |   |   t64-arm.exe\\n|   |       |   |   |   |   t64.exe\\n|   |       |   |   |   |   util.py\\n|   |       |   |   |   |   version.py\\n|   |       |   |   |   |   w32.exe\\n|   |       |   |   |   |   w64-arm.exe\\n|   |       |   |   |   |   w64.exe\\n|   |       |   |   |   |   wheel.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           compat.cpython-312.pyc\\n|   |       |   |   |           database.cpython-312.pyc\\n|   |       |   |   |           index.cpython-312.pyc\\n|   |       |   |   |           locators.cpython-312.pyc\\n|   |       |   |   |           manifest.cpython-312.pyc\\n|   |       |   |   |           markers.cpython-312.pyc\\n|   |       |   |   |           metadata.cpython-312.pyc\\n|   |       |   |   |           resources.cpython-312.pyc\\n|   |       |   |   |           scripts.cpython-312.pyc\\n|   |       |   |   |           util.cpython-312.pyc\\n|   |       |   |   |           version.cpython-312.pyc\\n|   |       |   |   |           wheel.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---distro\\n|   |       |   |   |   |   distro.py\\n|   |       |   |   |   |   py.typed\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   __main__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           distro.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           __main__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---idna\\n|   |       |   |   |   |   codec.py\\n|   |       |   |   |   |   compat.py\\n|   |       |   |   |   |   core.py\\n|   |       |   |   |   |   idnadata.py\\n|   |       |   |   |   |   intranges.py\\n|   |       |   |   |   |   package_data.py\\n|   |       |   |   |   |   py.typed\\n|   |       |   |   |   |   uts46data.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           codec.cpython-312.pyc\\n|   |       |   |   |           compat.cpython-312.pyc\\n|   |       |   |   |           core.cpython-312.pyc\\n|   |       |   |   |           idnadata.cpython-312.pyc\\n|   |       |   |   |           intranges.cpython-312.pyc\\n|   |       |   |   |           package_data.cpython-312.pyc\\n|   |       |   |   |           uts46data.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---msgpack\\n|   |       |   |   |   |   exceptions.py\\n|   |       |   |   |   |   ext.py\\n|   |       |   |   |   |   fallback.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           exceptions.cpython-312.pyc\\n|   |       |   |   |           ext.cpython-312.pyc\\n|   |       |   |   |           fallback.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---packaging\\n|   |       |   |   |   |   markers.py\\n|   |       |   |   |   |   metadata.py\\n|   |       |   |   |   |   py.typed\\n|   |       |   |   |   |   requirements.py\\n|   |       |   |   |   |   specifiers.py\\n|   |       |   |   |   |   tags.py\\n|   |       |   |   |   |   utils.py\\n|   |       |   |   |   |   version.py\\n|   |       |   |   |   |   _elffile.py\\n|   |       |   |   |   |   _manylinux.py\\n|   |       |   |   |   |   _musllinux.py\\n|   |       |   |   |   |   _parser.py\\n|   |       |   |   |   |   _structures.py\\n|   |       |   |   |   |   _tokenizer.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   +---licenses\\n|   |       |   |   |   |   |   _spdx.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           _spdx.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           markers.cpython-312.pyc\\n|   |       |   |   |           metadata.cpython-312.pyc\\n|   |       |   |   |           requirements.cpython-312.pyc\\n|   |       |   |   |           specifiers.cpython-312.pyc\\n|   |       |   |   |           tags.cpython-312.pyc\\n|   |       |   |   |           utils.cpython-312.pyc\\n|   |       |   |   |           version.cpython-312.pyc\\n|   |       |   |   |           _elffile.cpython-312.pyc\\n|   |       |   |   |           _manylinux.cpython-312.pyc\\n|   |       |   |   |           _musllinux.cpython-312.pyc\\n|   |       |   |   |           _parser.cpython-312.pyc\\n|   |       |   |   |           _structures.cpython-312.pyc\\n|   |       |   |   |           _tokenizer.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---pkg_resources\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---platformdirs\\n|   |       |   |   |   |   android.py\\n|   |       |   |   |   |   api.py\\n|   |       |   |   |   |   macos.py\\n|   |       |   |   |   |   py.typed\\n|   |       |   |   |   |   unix.py\\n|   |       |   |   |   |   version.py\\n|   |       |   |   |   |   windows.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   __main__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           android.cpython-312.pyc\\n|   |       |   |   |           api.cpython-312.pyc\\n|   |       |   |   |           macos.cpython-312.pyc\\n|   |       |   |   |           unix.cpython-312.pyc\\n|   |       |   |   |           version.cpython-312.pyc\\n|   |       |   |   |           windows.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           __main__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---pygments\\n|   |       |   |   |   |   cmdline.py\\n|   |       |   |   |   |   console.py\\n|   |       |   |   |   |   filter.py\\n|   |       |   |   |   |   formatter.py\\n|   |       |   |   |   |   lexer.py\\n|   |       |   |   |   |   modeline.py\\n|   |       |   |   |   |   plugin.py\\n|   |       |   |   |   |   regexopt.py\\n|   |       |   |   |   |   scanner.py\\n|   |       |   |   |   |   sphinxext.py\\n|   |       |   |   |   |   style.py\\n|   |       |   |   |   |   token.py\\n|   |       |   |   |   |   unistring.py\\n|   |       |   |   |   |   util.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   __main__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   +---filters\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   +---formatters\\n|   |       |   |   |   |   |   bbcode.py\\n|   |       |   |   |   |   |   groff.py\\n|   |       |   |   |   |   |   html.py\\n|   |       |   |   |   |   |   img.py\\n|   |       |   |   |   |   |   irc.py\\n|   |       |   |   |   |   |   latex.py\\n|   |       |   |   |   |   |   other.py\\n|   |       |   |   |   |   |   pangomarkup.py\\n|   |       |   |   |   |   |   rtf.py\\n|   |       |   |   |   |   |   svg.py\\n|   |       |   |   |   |   |   terminal.py\\n|   |       |   |   |   |   |   terminal256.py\\n|   |       |   |   |   |   |   _mapping.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           bbcode.cpython-312.pyc\\n|   |       |   |   |   |           groff.cpython-312.pyc\\n|   |       |   |   |   |           html.cpython-312.pyc\\n|   |       |   |   |   |           img.cpython-312.pyc\\n|   |       |   |   |   |           irc.cpython-312.pyc\\n|   |       |   |   |   |           latex.cpython-312.pyc\\n|   |       |   |   |   |           other.cpython-312.pyc\\n|   |       |   |   |   |           pangomarkup.cpython-312.pyc\\n|   |       |   |   |   |           rtf.cpython-312.pyc\\n|   |       |   |   |   |           svg.cpython-312.pyc\\n|   |       |   |   |   |           terminal.cpython-312.pyc\\n|   |       |   |   |   |           terminal256.cpython-312.pyc\\n|   |       |   |   |   |           _mapping.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   +---lexers\\n|   |       |   |   |   |   |   python.py\\n|   |       |   |   |   |   |   _mapping.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           python.cpython-312.pyc\\n|   |       |   |   |   |           _mapping.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   +---styles\\n|   |       |   |   |   |   |   _mapping.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           _mapping.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           cmdline.cpython-312.pyc\\n|   |       |   |   |           console.cpython-312.pyc\\n|   |       |   |   |           filter.cpython-312.pyc\\n|   |       |   |   |           formatter.cpython-312.pyc\\n|   |       |   |   |           lexer.cpython-312.pyc\\n|   |       |   |   |           modeline.cpython-312.pyc\\n|   |       |   |   |           plugin.cpython-312.pyc\\n|   |       |   |   |           regexopt.cpython-312.pyc\\n|   |       |   |   |           scanner.cpython-312.pyc\\n|   |       |   |   |           sphinxext.cpython-312.pyc\\n|   |       |   |   |           style.cpython-312.pyc\\n|   |       |   |   |           token.cpython-312.pyc\\n|   |       |   |   |           unistring.cpython-312.pyc\\n|   |       |   |   |           util.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           __main__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---pyproject_hooks\\n|   |       |   |   |   |   py.typed\\n|   |       |   |   |   |   _impl.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   +---_in_process\\n|   |       |   |   |   |   |   _in_process.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           _in_process.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           _impl.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---requests\\n|   |       |   |   |   |   adapters.py\\n|   |       |   |   |   |   api.py\\n|   |       |   |   |   |   auth.py\\n|   |       |   |   |   |   certs.py\\n|   |       |   |   |   |   compat.py\\n|   |       |   |   |   |   cookies.py\\n|   |       |   |   |   |   exceptions.py\\n|   |       |   |   |   |   help.py\\n|   |       |   |   |   |   hooks.py\\n|   |       |   |   |   |   models.py\\n|   |       |   |   |   |   packages.py\\n|   |       |   |   |   |   sessions.py\\n|   |       |   |   |   |   status_codes.py\\n|   |       |   |   |   |   structures.py\\n|   |       |   |   |   |   utils.py\\n|   |       |   |   |   |   _internal_utils.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   __version__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           adapters.cpython-312.pyc\\n|   |       |   |   |           api.cpython-312.pyc\\n|   |       |   |   |           auth.cpython-312.pyc\\n|   |       |   |   |           certs.cpython-312.pyc\\n|   |       |   |   |           compat.cpython-312.pyc\\n|   |       |   |   |           cookies.cpython-312.pyc\\n|   |       |   |   |           exceptions.cpython-312.pyc\\n|   |       |   |   |           help.cpython-312.pyc\\n|   |       |   |   |           hooks.cpython-312.pyc\\n|   |       |   |   |           models.cpython-312.pyc\\n|   |       |   |   |           packages.cpython-312.pyc\\n|   |       |   |   |           sessions.cpython-312.pyc\\n|   |       |   |   |           status_codes.cpython-312.pyc\\n|   |       |   |   |           structures.cpython-312.pyc\\n|   |       |   |   |           utils.cpython-312.pyc\\n|   |       |   |   |           _internal_utils.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           __version__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---resolvelib\\n|   |       |   |   |   |   providers.py\\n|   |       |   |   |   |   py.typed\\n|   |       |   |   |   |   reporters.py\\n|   |       |   |   |   |   resolvers.py\\n|   |       |   |   |   |   structs.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   +---compat\\n|   |       |   |   |   |   |   collections_abc.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           collections_abc.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           providers.cpython-312.pyc\\n|   |       |   |   |           reporters.cpython-312.pyc\\n|   |       |   |   |           resolvers.cpython-312.pyc\\n|   |       |   |   |           structs.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---rich\\n|   |       |   |   |   |   abc.py\\n|   |       |   |   |   |   align.py\\n|   |       |   |   |   |   ansi.py\\n|   |       |   |   |   |   bar.py\\n|   |       |   |   |   |   box.py\\n|   |       |   |   |   |   cells.py\\n|   |       |   |   |   |   color.py\\n|   |       |   |   |   |   color_triplet.py\\n|   |       |   |   |   |   columns.py\\n|   |       |   |   |   |   console.py\\n|   |       |   |   |   |   constrain.py\\n|   |       |   |   |   |   containers.py\\n|   |       |   |   |   |   control.py\\n|   |       |   |   |   |   default_styles.py\\n|   |       |   |   |   |   diagnose.py\\n|   |       |   |   |   |   emoji.py\\n|   |       |   |   |   |   errors.py\\n|   |       |   |   |   |   filesize.py\\n|   |       |   |   |   |   file_proxy.py\\n|   |       |   |   |   |   highlighter.py\\n|   |       |   |   |   |   json.py\\n|   |       |   |   |   |   jupyter.py\\n|   |       |   |   |   |   layout.py\\n|   |       |   |   |   |   live.py\\n|   |       |   |   |   |   live_render.py\\n|   |       |   |   |   |   logging.py\\n|   |       |   |   |   |   markup.py\\n|   |       |   |   |   |   measure.py\\n|   |       |   |   |   |   padding.py\\n|   |       |   |   |   |   pager.py\\n|   |       |   |   |   |   palette.py\\n|   |       |   |   |   |   panel.py\\n|   |       |   |   |   |   pretty.py\\n|   |       |   |   |   |   progress.py\\n|   |       |   |   |   |   progress_bar.py\\n|   |       |   |   |   |   prompt.py\\n|   |       |   |   |   |   protocol.py\\n|   |       |   |   |   |   py.typed\\n|   |       |   |   |   |   region.py\\n|   |       |   |   |   |   repr.py\\n|   |       |   |   |   |   rule.py\\n|   |       |   |   |   |   scope.py\\n|   |       |   |   |   |   screen.py\\n|   |       |   |   |   |   segment.py\\n|   |       |   |   |   |   spinner.py\\n|   |       |   |   |   |   status.py\\n|   |       |   |   |   |   style.py\\n|   |       |   |   |   |   styled.py\\n|   |       |   |   |   |   syntax.py\\n|   |       |   |   |   |   table.py\\n|   |       |   |   |   |   terminal_theme.py\\n|   |       |   |   |   |   text.py\\n|   |       |   |   |   |   theme.py\\n|   |       |   |   |   |   themes.py\\n|   |       |   |   |   |   traceback.py\\n|   |       |   |   |   |   tree.py\\n|   |       |   |   |   |   _cell_widths.py\\n|   |       |   |   |   |   _emoji_codes.py\\n|   |       |   |   |   |   _emoji_replace.py\\n|   |       |   |   |   |   _export_format.py\\n|   |       |   |   |   |   _extension.py\\n|   |       |   |   |   |   _fileno.py\\n|   |       |   |   |   |   _inspect.py\\n|   |       |   |   |   |   _log_render.py\\n|   |       |   |   |   |   _loop.py\\n|   |       |   |   |   |   _null_file.py\\n|   |       |   |   |   |   _palettes.py\\n|   |       |   |   |   |   _pick.py\\n|   |       |   |   |   |   _ratio.py\\n|   |       |   |   |   |   _spinners.py\\n|   |       |   |   |   |   _stack.py\\n|   |       |   |   |   |   _timer.py\\n|   |       |   |   |   |   _win32_console.py\\n|   |       |   |   |   |   _windows.py\\n|   |       |   |   |   |   _windows_renderer.py\\n|   |       |   |   |   |   _wrap.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   __main__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           abc.cpython-312.pyc\\n|   |       |   |   |           align.cpython-312.pyc\\n|   |       |   |   |           ansi.cpython-312.pyc\\n|   |       |   |   |           bar.cpython-312.pyc\\n|   |       |   |   |           box.cpython-312.pyc\\n|   |       |   |   |           cells.cpython-312.pyc\\n|   |       |   |   |           color.cpython-312.pyc\\n|   |       |   |   |           color_triplet.cpython-312.pyc\\n|   |       |   |   |           columns.cpython-312.pyc\\n|   |       |   |   |           console.cpython-312.pyc\\n|   |       |   |   |           constrain.cpython-312.pyc\\n|   |       |   |   |           containers.cpython-312.pyc\\n|   |       |   |   |           control.cpython-312.pyc\\n|   |       |   |   |           default_styles.cpython-312.pyc\\n|   |       |   |   |           diagnose.cpython-312.pyc\\n|   |       |   |   |           emoji.cpython-312.pyc\\n|   |       |   |   |           errors.cpython-312.pyc\\n|   |       |   |   |           filesize.cpython-312.pyc\\n|   |       |   |   |           file_proxy.cpython-312.pyc\\n|   |       |   |   |           highlighter.cpython-312.pyc\\n|   |       |   |   |           json.cpython-312.pyc\\n|   |       |   |   |           jupyter.cpython-312.pyc\\n|   |       |   |   |           layout.cpython-312.pyc\\n|   |       |   |   |           live.cpython-312.pyc\\n|   |       |   |   |           live_render.cpython-312.pyc\\n|   |       |   |   |           logging.cpython-312.pyc\\n|   |       |   |   |           markup.cpython-312.pyc\\n|   |       |   |   |           measure.cpython-312.pyc\\n|   |       |   |   |           padding.cpython-312.pyc\\n|   |       |   |   |           pager.cpython-312.pyc\\n|   |       |   |   |           palette.cpython-312.pyc\\n|   |       |   |   |           panel.cpython-312.pyc\\n|   |       |   |   |           pretty.cpython-312.pyc\\n|   |       |   |   |           progress.cpython-312.pyc\\n|   |       |   |   |           progress_bar.cpython-312.pyc\\n|   |       |   |   |           prompt.cpython-312.pyc\\n|   |       |   |   |           protocol.cpython-312.pyc\\n|   |       |   |   |           region.cpython-312.pyc\\n|   |       |   |   |           repr.cpython-312.pyc\\n|   |       |   |   |           rule.cpython-312.pyc\\n|   |       |   |   |           scope.cpython-312.pyc\\n|   |       |   |   |           screen.cpython-312.pyc\\n|   |       |   |   |           segment.cpython-312.pyc\\n|   |       |   |   |           spinner.cpython-312.pyc\\n|   |       |   |   |           status.cpython-312.pyc\\n|   |       |   |   |           style.cpython-312.pyc\\n|   |       |   |   |           styled.cpython-312.pyc\\n|   |       |   |   |           syntax.cpython-312.pyc\\n|   |       |   |   |           table.cpython-312.pyc\\n|   |       |   |   |           terminal_theme.cpython-312.pyc\\n|   |       |   |   |           text.cpython-312.pyc\\n|   |       |   |   |           theme.cpython-312.pyc\\n|   |       |   |   |           themes.cpython-312.pyc\\n|   |       |   |   |           traceback.cpython-312.pyc\\n|   |       |   |   |           tree.cpython-312.pyc\\n|   |       |   |   |           _cell_widths.cpython-312.pyc\\n|   |       |   |   |           _emoji_codes.cpython-312.pyc\\n|   |       |   |   |           _emoji_replace.cpython-312.pyc\\n|   |       |   |   |           _export_format.cpython-312.pyc\\n|   |       |   |   |           _extension.cpython-312.pyc\\n|   |       |   |   |           _fileno.cpython-312.pyc\\n|   |       |   |   |           _inspect.cpython-312.pyc\\n|   |       |   |   |           _log_render.cpython-312.pyc\\n|   |       |   |   |           _loop.cpython-312.pyc\\n|   |       |   |   |           _null_file.cpython-312.pyc\\n|   |       |   |   |           _palettes.cpython-312.pyc\\n|   |       |   |   |           _pick.cpython-312.pyc\\n|   |       |   |   |           _ratio.cpython-312.pyc\\n|   |       |   |   |           _spinners.cpython-312.pyc\\n|   |       |   |   |           _stack.cpython-312.pyc\\n|   |       |   |   |           _timer.cpython-312.pyc\\n|   |       |   |   |           _win32_console.cpython-312.pyc\\n|   |       |   |   |           _windows.cpython-312.pyc\\n|   |       |   |   |           _windows_renderer.cpython-312.pyc\\n|   |       |   |   |           _wrap.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           __main__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---tomli\\n|   |       |   |   |   |   py.typed\\n|   |       |   |   |   |   _parser.py\\n|   |       |   |   |   |   _re.py\\n|   |       |   |   |   |   _types.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           _parser.cpython-312.pyc\\n|   |       |   |   |           _re.cpython-312.pyc\\n|   |       |   |   |           _types.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---truststore\\n|   |       |   |   |   |   py.typed\\n|   |       |   |   |   |   _api.py\\n|   |       |   |   |   |   _macos.py\\n|   |       |   |   |   |   _openssl.py\\n|   |       |   |   |   |   _ssl_constants.py\\n|   |       |   |   |   |   _windows.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           _api.cpython-312.pyc\\n|   |       |   |   |           _macos.cpython-312.pyc\\n|   |       |   |   |           _openssl.cpython-312.pyc\\n|   |       |   |   |           _ssl_constants.cpython-312.pyc\\n|   |       |   |   |           _windows.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   +---urllib3\\n|   |       |   |   |   |   connection.py\\n|   |       |   |   |   |   connectionpool.py\\n|   |       |   |   |   |   exceptions.py\\n|   |       |   |   |   |   fields.py\\n|   |       |   |   |   |   filepost.py\\n|   |       |   |   |   |   poolmanager.py\\n|   |       |   |   |   |   request.py\\n|   |       |   |   |   |   response.py\\n|   |       |   |   |   |   _collections.py\\n|   |       |   |   |   |   _version.py\\n|   |       |   |   |   |   __init__.py\\n|   |       |   |   |   |   \\n|   |       |   |   |   +---contrib\\n|   |       |   |   |   |   |   appengine.py\\n|   |       |   |   |   |   |   ntlmpool.py\\n|   |       |   |   |   |   |   pyopenssl.py\\n|   |       |   |   |   |   |   securetransport.py\\n|   |       |   |   |   |   |   socks.py\\n|   |       |   |   |   |   |   _appengine_environ.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   +---_securetransport\\n|   |       |   |   |   |   |   |   bindings.py\\n|   |       |   |   |   |   |   |   low_level.py\\n|   |       |   |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   |   \\n|   |       |   |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |   |           bindings.cpython-312.pyc\\n|   |       |   |   |   |   |           low_level.cpython-312.pyc\\n|   |       |   |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |   |           \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           appengine.cpython-312.pyc\\n|   |       |   |   |   |           ntlmpool.cpython-312.pyc\\n|   |       |   |   |   |           pyopenssl.cpython-312.pyc\\n|   |       |   |   |   |           securetransport.cpython-312.pyc\\n|   |       |   |   |   |           socks.cpython-312.pyc\\n|   |       |   |   |   |           _appengine_environ.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   +---packages\\n|   |       |   |   |   |   |   six.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   +---backports\\n|   |       |   |   |   |   |   |   makefile.py\\n|   |       |   |   |   |   |   |   weakref_finalize.py\\n|   |       |   |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   |   \\n|   |       |   |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |   |           makefile.cpython-312.pyc\\n|   |       |   |   |   |   |           weakref_finalize.cpython-312.pyc\\n|   |       |   |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |   |           \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           six.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   +---util\\n|   |       |   |   |   |   |   connection.py\\n|   |       |   |   |   |   |   proxy.py\\n|   |       |   |   |   |   |   queue.py\\n|   |       |   |   |   |   |   request.py\\n|   |       |   |   |   |   |   response.py\\n|   |       |   |   |   |   |   retry.py\\n|   |       |   |   |   |   |   ssltransport.py\\n|   |       |   |   |   |   |   ssl_.py\\n|   |       |   |   |   |   |   ssl_match_hostname.py\\n|   |       |   |   |   |   |   timeout.py\\n|   |       |   |   |   |   |   url.py\\n|   |       |   |   |   |   |   wait.py\\n|   |       |   |   |   |   |   __init__.py\\n|   |       |   |   |   |   |   \\n|   |       |   |   |   |   \\\\---__pycache__\\n|   |       |   |   |   |           connection.cpython-312.pyc\\n|   |       |   |   |   |           proxy.cpython-312.pyc\\n|   |       |   |   |   |           queue.cpython-312.pyc\\n|   |       |   |   |   |           request.cpython-312.pyc\\n|   |       |   |   |   |           response.cpython-312.pyc\\n|   |       |   |   |   |           retry.cpython-312.pyc\\n|   |       |   |   |   |           ssltransport.cpython-312.pyc\\n|   |       |   |   |   |           ssl_.cpython-312.pyc\\n|   |       |   |   |   |           ssl_match_hostname.cpython-312.pyc\\n|   |       |   |   |   |           timeout.cpython-312.pyc\\n|   |       |   |   |   |           url.cpython-312.pyc\\n|   |       |   |   |   |           wait.cpython-312.pyc\\n|   |       |   |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |   |           \\n|   |       |   |   |   \\\\---__pycache__\\n|   |       |   |   |           connection.cpython-312.pyc\\n|   |       |   |   |           connectionpool.cpython-312.pyc\\n|   |       |   |   |           exceptions.cpython-312.pyc\\n|   |       |   |   |           fields.cpython-312.pyc\\n|   |       |   |   |           filepost.cpython-312.pyc\\n|   |       |   |   |           poolmanager.cpython-312.pyc\\n|   |       |   |   |           request.cpython-312.pyc\\n|   |       |   |   |           response.cpython-312.pyc\\n|   |       |   |   |           _collections.cpython-312.pyc\\n|   |       |   |   |           _version.cpython-312.pyc\\n|   |       |   |   |           __init__.cpython-312.pyc\\n|   |       |   |   |           \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           typing_extensions.cpython-312.pyc\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   \\\\---__pycache__\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           __main__.cpython-312.pyc\\n|   |       |           __pip-runner__.cpython-312.pyc\\n|   |       |           \\n|   |       +---pip-25.0.1.dist-info\\n|   |       |       AUTHORS.txt\\n|   |       |       entry_points.txt\\n|   |       |       INSTALLER\\n|   |       |       LICENSE.txt\\n|   |       |       METADATA\\n|   |       |       RECORD\\n|   |       |       REQUESTED\\n|   |       |       top_level.txt\\n|   |       |       WHEEL\\n|   |       |       \\n|   |       +---pluggy\\n|   |       |   |   py.typed\\n|   |       |   |   _callers.py\\n|   |       |   |   _hooks.py\\n|   |       |   |   _manager.py\\n|   |       |   |   _result.py\\n|   |       |   |   _tracing.py\\n|   |       |   |   _version.py\\n|   |       |   |   _warnings.py\\n|   |       |   |   __init__.py\\n|   |       |   |   \\n|   |       |   \\\\---__pycache__\\n|   |       |           _callers.cpython-312.pyc\\n|   |       |           _hooks.cpython-312.pyc\\n|   |       |           _manager.cpython-312.pyc\\n|   |       |           _result.cpython-312.pyc\\n|   |       |           _tracing.cpython-312.pyc\\n|   |       |           _version.cpython-312.pyc\\n|   |       |           _warnings.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           \\n|   |       +---pluggy-1.5.0.dist-info\\n|   |       |       INSTALLER\\n|   |       |       LICENSE\\n|   |       |       METADATA\\n|   |       |       RECORD\\n|   |       |       top_level.txt\\n|   |       |       WHEEL\\n|   |       |       \\n|   |       +---pycparser\\n|   |       |   |   ast_transforms.py\\n|   |       |   |   c_ast.py\\n|   |       |   |   c_generator.py\\n|   |       |   |   c_lexer.py\\n|   |       |   |   c_parser.py\\n|   |       |   |   lextab.py\\n|   |       |   |   plyparser.py\\n|   |       |   |   yacctab.py\\n|   |       |   |   _ast_gen.py\\n|   |       |   |   _build_tables.py\\n|   |       |   |   _c_ast.cfg\\n|   |       |   |   __init__.py\\n|   |       |   |   \\n|   |       |   +---ply\\n|   |       |   |   |   cpp.py\\n|   |       |   |   |   ctokens.py\\n|   |       |   |   |   lex.py\\n|   |       |   |   |   yacc.py\\n|   |       |   |   |   ygen.py\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           cpp.cpython-312.pyc\\n|   |       |   |           ctokens.cpython-312.pyc\\n|   |       |   |           lex.cpython-312.pyc\\n|   |       |   |           yacc.cpython-312.pyc\\n|   |       |   |           ygen.cpython-312.pyc\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   \\\\---__pycache__\\n|   |       |           ast_transforms.cpython-312.pyc\\n|   |       |           c_ast.cpython-312.pyc\\n|   |       |           c_generator.cpython-312.pyc\\n|   |       |           c_lexer.cpython-312.pyc\\n|   |       |           c_parser.cpython-312.pyc\\n|   |       |           lextab.cpython-312.pyc\\n|   |       |           plyparser.cpython-312.pyc\\n|   |       |           yacctab.cpython-312.pyc\\n|   |       |           _ast_gen.cpython-312.pyc\\n|   |       |           _build_tables.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           \\n|   |       +---pycparser-2.22.dist-info\\n|   |       |       INSTALLER\\n|   |       |       LICENSE\\n|   |       |       METADATA\\n|   |       |       RECORD\\n|   |       |       top_level.txt\\n|   |       |       WHEEL\\n|   |       |       \\n|   |       +---pymupdf\\n|   |       |   |   extra.py\\n|   |       |   |   mupdf.py\\n|   |       |   |   mupdfcpp64.dll\\n|   |       |   |   pymupdf.py\\n|   |       |   |   table.py\\n|   |       |   |   utils.py\\n|   |       |   |   _apply_pages.py\\n|   |       |   |   _build.py\\n|   |       |   |   _extra.pyd\\n|   |       |   |   _mupdf.pyd\\n|   |       |   |   _wxcolors.py\\n|   |       |   |   __init__.py\\n|   |       |   |   __main__.py\\n|   |       |   |   \\n|   |       |   +---mupdf-devel\\n|   |       |   |   +---include\\n|   |       |   |   |   \\\\---mupdf\\n|   |       |   |   |       |   classes.h\\n|   |       |   |   |       |   classes2.h\\n|   |       |   |   |       |   exceptions.h\\n|   |       |   |   |       |   extra.h\\n|   |       |   |   |       |   fitz.h\\n|   |       |   |   |       |   functions.h\\n|   |       |   |   |       |   html.h\\n|   |       |   |   |       |   internal.h\\n|   |       |   |   |       |   memento.h\\n|   |       |   |   |       |   pdf.h\\n|   |       |   |   |       |   ucdn.h\\n|   |       |   |   |       |   \\n|   |       |   |   |       +---fitz\\n|   |       |   |   |       |       archive.h\\n|   |       |   |   |       |       band-writer.h\\n|   |       |   |   |       |       bidi.h\\n|   |       |   |   |       |       bitmap.h\\n|   |       |   |   |       |       buffer.h\\n|   |       |   |   |       |       color.h\\n|   |       |   |   |       |       compress.h\\n|   |       |   |   |       |       compressed-buffer.h\\n|   |       |   |   |       |       config.h\\n|   |       |   |   |       |       context.h\\n|   |       |   |   |       |       crypt.h\\n|   |       |   |   |       |       deskew.h\\n|   |       |   |   |       |       device.h\\n|   |       |   |   |       |       display-list.h\\n|   |       |   |   |       |       document.h\\n|   |       |   |   |       |       export.h\\n|   |       |   |   |       |       filter.h\\n|   |       |   |   |       |       font.h\\n|   |       |   |   |       |       geometry.h\\n|   |       |   |   |       |       getopt.h\\n|   |       |   |   |       |       glyph-cache.h\\n|   |       |   |   |       |       glyph.h\\n|   |       |   |   |       |       hash.h\\n|   |       |   |   |       |       heap-imp.h\\n|   |       |   |   |       |       heap.h\\n|   |       |   |   |       |       image.h\\n|   |       |   |   |       |       link.h\\n|   |       |   |   |       |       log.h\\n|   |       |   |   |       |       outline.h\\n|   |       |   |   |       |       output-svg.h\\n|   |       |   |   |       |       output.h\\n|   |       |   |   |       |       path.h\\n|   |       |   |   |       |       pixmap.h\\n|   |       |   |   |       |       pool.h\\n|   |       |   |   |       |       separation.h\\n|   |       |   |   |       |       shade.h\\n|   |       |   |   |       |       store.h\\n|   |       |   |   |       |       story-writer.h\\n|   |       |   |   |       |       story.h\\n|   |       |   |   |       |       stream.h\\n|   |       |   |   |       |       string-util.h\\n|   |       |   |   |       |       structured-text.h\\n|   |       |   |   |       |       system.h\\n|   |       |   |   |       |       text.h\\n|   |       |   |   |       |       track-usage.h\\n|   |       |   |   |       |       transition.h\\n|   |       |   |   |       |       tree.h\\n|   |       |   |   |       |       types.h\\n|   |       |   |   |       |       util.h\\n|   |       |   |   |       |       version.h\\n|   |       |   |   |       |       write-pixmap.h\\n|   |       |   |   |       |       writer.h\\n|   |       |   |   |       |       xml.h\\n|   |       |   |   |       |       \\n|   |       |   |   |       +---helpers\\n|   |       |   |   |       |       mu-office-lib.h\\n|   |       |   |   |       |       mu-threads.h\\n|   |       |   |   |       |       pkcs7-openssl.h\\n|   |       |   |   |       |       \\n|   |       |   |   |       \\\\---pdf\\n|   |       |   |   |               annot.h\\n|   |       |   |   |               clean.h\\n|   |       |   |   |               cmap.h\\n|   |       |   |   |               crypt.h\\n|   |       |   |   |               document.h\\n|   |       |   |   |               event.h\\n|   |       |   |   |               font.h\\n|   |       |   |   |               form.h\\n|   |       |   |   |               image-rewriter.h\\n|   |       |   |   |               interpret.h\\n|   |       |   |   |               javascript.h\\n|   |       |   |   |               name-table.h\\n|   |       |   |   |               object.h\\n|   |       |   |   |               page.h\\n|   |       |   |   |               parse.h\\n|   |       |   |   |               recolor.h\\n|   |       |   |   |               resource.h\\n|   |       |   |   |               xref.h\\n|   |       |   |   |               zugferd.h\\n|   |       |   |   |               \\n|   |       |   |   \\\\---lib\\n|   |       |   |           mupdfcpp64.lib\\n|   |       |   |           \\n|   |       |   \\\\---__pycache__\\n|   |       |           extra.cpython-312.pyc\\n|   |       |           mupdf.cpython-312.pyc\\n|   |       |           pymupdf.cpython-312.pyc\\n|   |       |           table.cpython-312.pyc\\n|   |       |           utils.cpython-312.pyc\\n|   |       |           _apply_pages.cpython-312.pyc\\n|   |       |           _build.cpython-312.pyc\\n|   |       |           _wxcolors.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           __main__.cpython-312.pyc\\n|   |       |           \\n|   |       +---pymupdf-1.25.5.dist-info\\n|   |       |       COPYING\\n|   |       |       entry_points.txt\\n|   |       |       INSTALLER\\n|   |       |       METADATA\\n|   |       |       README.md\\n|   |       |       RECORD\\n|   |       |       REQUESTED\\n|   |       |       WHEEL\\n|   |       |       \\n|   |       +---pypdfium2\\n|   |       |   |   raw.py\\n|   |       |   |   version.json\\n|   |       |   |   version.py\\n|   |       |   |   _library_scope.py\\n|   |       |   |   __init__.py\\n|   |       |   |   __main__.py\\n|   |       |   |   \\n|   |       |   +---internal\\n|   |       |   |   |   bases.py\\n|   |       |   |   |   consts.py\\n|   |       |   |   |   utils.py\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           bases.cpython-312.pyc\\n|   |       |   |           consts.cpython-312.pyc\\n|   |       |   |           utils.cpython-312.pyc\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   +---_cli\\n|   |       |   |   |   arrange.py\\n|   |       |   |   |   attachments.py\\n|   |       |   |   |   extract_images.py\\n|   |       |   |   |   extract_text.py\\n|   |       |   |   |   imgtopdf.py\\n|   |       |   |   |   pageobjects.py\\n|   |       |   |   |   pdfinfo.py\\n|   |       |   |   |   render.py\\n|   |       |   |   |   tile.py\\n|   |       |   |   |   toc.py\\n|   |       |   |   |   _parsers.py\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           arrange.cpython-312.pyc\\n|   |       |   |           attachments.cpython-312.pyc\\n|   |       |   |           extract_images.cpython-312.pyc\\n|   |       |   |           extract_text.cpython-312.pyc\\n|   |       |   |           imgtopdf.cpython-312.pyc\\n|   |       |   |           pageobjects.cpython-312.pyc\\n|   |       |   |           pdfinfo.cpython-312.pyc\\n|   |       |   |           render.cpython-312.pyc\\n|   |       |   |           tile.cpython-312.pyc\\n|   |       |   |           toc.cpython-312.pyc\\n|   |       |   |           _parsers.cpython-312.pyc\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   +---_helpers\\n|   |       |   |   |   attachment.py\\n|   |       |   |   |   bitmap.py\\n|   |       |   |   |   document.py\\n|   |       |   |   |   matrix.py\\n|   |       |   |   |   misc.py\\n|   |       |   |   |   page.py\\n|   |       |   |   |   pageobjects.py\\n|   |       |   |   |   textpage.py\\n|   |       |   |   |   unsupported.py\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           attachment.cpython-312.pyc\\n|   |       |   |           bitmap.cpython-312.pyc\\n|   |       |   |           document.cpython-312.pyc\\n|   |       |   |           matrix.cpython-312.pyc\\n|   |       |   |           misc.cpython-312.pyc\\n|   |       |   |           page.cpython-312.pyc\\n|   |       |   |           pageobjects.cpython-312.pyc\\n|   |       |   |           textpage.cpython-312.pyc\\n|   |       |   |           unsupported.cpython-312.pyc\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   \\\\---__pycache__\\n|   |       |           raw.cpython-312.pyc\\n|   |       |           version.cpython-312.pyc\\n|   |       |           _library_scope.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           __main__.cpython-312.pyc\\n|   |       |           \\n|   |       +---pypdfium2-4.30.1.dist-info\\n|   |       |       Apache-2.0.txt\\n|   |       |       BSD-3-Clause.txt\\n|   |       |       CC-BY-4.0.txt\\n|   |       |       dep5-wheel\\n|   |       |       entry_points.txt\\n|   |       |       INSTALLER\\n|   |       |       LicenseRef-PdfiumThirdParty.txt\\n|   |       |       METADATA\\n|   |       |       RECORD\\n|   |       |       top_level.txt\\n|   |       |       WHEEL\\n|   |       |       \\n|   |       +---pypdfium2_raw\\n|   |       |   |   bindings.py\\n|   |       |   |   pdfium.dll\\n|   |       |   |   version.json\\n|   |       |   |   __init__.py\\n|   |       |   |   \\n|   |       |   \\\\---__pycache__\\n|   |       |           bindings.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           \\n|   |       +---pytest\\n|   |       |   |   py.typed\\n|   |       |   |   __init__.py\\n|   |       |   |   __main__.py\\n|   |       |   |   \\n|   |       |   \\\\---__pycache__\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           __main__.cpython-312.pyc\\n|   |       |           \\n|   |       +---pytest-8.3.5.dist-info\\n|   |       |       AUTHORS\\n|   |       |       entry_points.txt\\n|   |       |       INSTALLER\\n|   |       |       LICENSE\\n|   |       |       METADATA\\n|   |       |       RECORD\\n|   |       |       REQUESTED\\n|   |       |       top_level.txt\\n|   |       |       WHEEL\\n|   |       |       \\n|   |       +---rust\\n|   |       |   |   Cargo.toml\\n|   |       |   |   \\n|   |       |   +---cryptography-cffi\\n|   |       |   |       Cargo.toml\\n|   |       |   |       \\n|   |       |   +---cryptography-keepalive\\n|   |       |   |       Cargo.toml\\n|   |       |   |       \\n|   |       |   +---cryptography-key-parsing\\n|   |       |   |       Cargo.toml\\n|   |       |   |       \\n|   |       |   +---cryptography-openssl\\n|   |       |   |       Cargo.toml\\n|   |       |   |       \\n|   |       |   +---cryptography-x509\\n|   |       |   |       Cargo.toml\\n|   |       |   |       \\n|   |       |   \\\\---cryptography-x509-verification\\n|   |       |           Cargo.toml\\n|   |       |           \\n|   |       +---unidecode\\n|   |       |   |   py.typed\\n|   |       |   |   util.py\\n|   |       |   |   x000.py\\n|   |       |   |   x001.py\\n|   |       |   |   x002.py\\n|   |       |   |   x003.py\\n|   |       |   |   x004.py\\n|   |       |   |   x005.py\\n|   |       |   |   x006.py\\n|   |       |   |   x007.py\\n|   |       |   |   x009.py\\n|   |       |   |   x00a.py\\n|   |       |   |   x00b.py\\n|   |       |   |   x00c.py\\n|   |       |   |   x00d.py\\n|   |       |   |   x00e.py\\n|   |       |   |   x00f.py\\n|   |       |   |   x010.py\\n|   |       |   |   x011.py\\n|   |       |   |   x012.py\\n|   |       |   |   x013.py\\n|   |       |   |   x014.py\\n|   |       |   |   x015.py\\n|   |       |   |   x016.py\\n|   |       |   |   x017.py\\n|   |       |   |   x018.py\\n|   |       |   |   x01d.py\\n|   |       |   |   x01e.py\\n|   |       |   |   x01f.py\\n|   |       |   |   x020.py\\n|   |       |   |   x021.py\\n|   |       |   |   x022.py\\n|   |       |   |   x023.py\\n|   |       |   |   x024.py\\n|   |       |   |   x025.py\\n|   |       |   |   x026.py\\n|   |       |   |   x027.py\\n|   |       |   |   x028.py\\n|   |       |   |   x029.py\\n|   |       |   |   x02a.py\\n|   |       |   |   x02c.py\\n|   |       |   |   x02e.py\\n|   |       |   |   x02f.py\\n|   |       |   |   x030.py\\n|   |       |   |   x031.py\\n|   |       |   |   x032.py\\n|   |       |   |   x033.py\\n|   |       |   |   x04d.py\\n|   |       |   |   x04e.py\\n|   |       |   |   x04f.py\\n|   |       |   |   x050.py\\n|   |       |   |   x051.py\\n|   |       |   |   x052.py\\n|   |       |   |   x053.py\\n|   |       |   |   x054.py\\n|   |       |   |   x055.py\\n|   |       |   |   x056.py\\n|   |       |   |   x057.py\\n|   |       |   |   x058.py\\n|   |       |   |   x059.py\\n|   |       |   |   x05a.py\\n|   |       |   |   x05b.py\\n|   |       |   |   x05c.py\\n|   |       |   |   x05d.py\\n|   |       |   |   x05e.py\\n|   |       |   |   x05f.py\\n|   |       |   |   x060.py\\n|   |       |   |   x061.py\\n|   |       |   |   x062.py\\n|   |       |   |   x063.py\\n|   |       |   |   x064.py\\n|   |       |   |   x065.py\\n|   |       |   |   x066.py\\n|   |       |   |   x067.py\\n|   |       |   |   x068.py\\n|   |       |   |   x069.py\\n|   |       |   |   x06a.py\\n|   |       |   |   x06b.py\\n|   |       |   |   x06c.py\\n|   |       |   |   x06d.py\\n|   |       |   |   x06e.py\\n|   |       |   |   x06f.py\\n|   |       |   |   x070.py\\n|   |       |   |   x071.py\\n|   |       |   |   x072.py\\n|   |       |   |   x073.py\\n|   |       |   |   x074.py\\n|   |       |   |   x075.py\\n|   |       |   |   x076.py\\n|   |       |   |   x077.py\\n|   |       |   |   x078.py\\n|   |       |   |   x079.py\\n|   |       |   |   x07a.py\\n|   |       |   |   x07b.py\\n|   |       |   |   x07c.py\\n|   |       |   |   x07d.py\\n|   |       |   |   x07e.py\\n|   |       |   |   x07f.py\\n|   |       |   |   x080.py\\n|   |       |   |   x081.py\\n|   |       |   |   x082.py\\n|   |       |   |   x083.py\\n|   |       |   |   x084.py\\n|   |       |   |   x085.py\\n|   |       |   |   x086.py\\n|   |       |   |   x087.py\\n|   |       |   |   x088.py\\n|   |       |   |   x089.py\\n|   |       |   |   x08a.py\\n|   |       |   |   x08b.py\\n|   |       |   |   x08c.py\\n|   |       |   |   x08d.py\\n|   |       |   |   x08e.py\\n|   |       |   |   x08f.py\\n|   |       |   |   x090.py\\n|   |       |   |   x091.py\\n|   |       |   |   x092.py\\n|   |       |   |   x093.py\\n|   |       |   |   x094.py\\n|   |       |   |   x095.py\\n|   |       |   |   x096.py\\n|   |       |   |   x097.py\\n|   |       |   |   x098.py\\n|   |       |   |   x099.py\\n|   |       |   |   x09a.py\\n|   |       |   |   x09b.py\\n|   |       |   |   x09c.py\\n|   |       |   |   x09d.py\\n|   |       |   |   x09e.py\\n|   |       |   |   x09f.py\\n|   |       |   |   x0a0.py\\n|   |       |   |   x0a1.py\\n|   |       |   |   x0a2.py\\n|   |       |   |   x0a3.py\\n|   |       |   |   x0a4.py\\n|   |       |   |   x0ac.py\\n|   |       |   |   x0ad.py\\n|   |       |   |   x0ae.py\\n|   |       |   |   x0af.py\\n|   |       |   |   x0b0.py\\n|   |       |   |   x0b1.py\\n|   |       |   |   x0b2.py\\n|   |       |   |   x0b3.py\\n|   |       |   |   x0b4.py\\n|   |       |   |   x0b5.py\\n|   |       |   |   x0b6.py\\n|   |       |   |   x0b7.py\\n|   |       |   |   x0b8.py\\n|   |       |   |   x0b9.py\\n|   |       |   |   x0ba.py\\n|   |       |   |   x0bb.py\\n|   |       |   |   x0bc.py\\n|   |       |   |   x0bd.py\\n|   |       |   |   x0be.py\\n|   |       |   |   x0bf.py\\n|   |       |   |   x0c0.py\\n|   |       |   |   x0c1.py\\n|   |       |   |   x0c2.py\\n|   |       |   |   x0c3.py\\n|   |       |   |   x0c4.py\\n|   |       |   |   x0c5.py\\n|   |       |   |   x0c6.py\\n|   |       |   |   x0c7.py\\n|   |       |   |   x0c8.py\\n|   |       |   |   x0c9.py\\n|   |       |   |   x0ca.py\\n|   |       |   |   x0cb.py\\n|   |       |   |   x0cc.py\\n|   |       |   |   x0cd.py\\n|   |       |   |   x0ce.py\\n|   |       |   |   x0cf.py\\n|   |       |   |   x0d0.py\\n|   |       |   |   x0d1.py\\n|   |       |   |   x0d2.py\\n|   |       |   |   x0d3.py\\n|   |       |   |   x0d4.py\\n|   |       |   |   x0d5.py\\n|   |       |   |   x0d6.py\\n|   |       |   |   x0d7.py\\n|   |       |   |   x0f9.py\\n|   |       |   |   x0fa.py\\n|   |       |   |   x0fb.py\\n|   |       |   |   x0fc.py\\n|   |       |   |   x0fd.py\\n|   |       |   |   x0fe.py\\n|   |       |   |   x0ff.py\\n|   |       |   |   x1d4.py\\n|   |       |   |   x1d5.py\\n|   |       |   |   x1d6.py\\n|   |       |   |   x1d7.py\\n|   |       |   |   x1f1.py\\n|   |       |   |   x1f6.py\\n|   |       |   |   __init__.py\\n|   |       |   |   __main__.py\\n|   |       |   |   \\n|   |       |   \\\\---__pycache__\\n|   |       |           util.cpython-312.pyc\\n|   |       |           x000.cpython-312.pyc\\n|   |       |           x001.cpython-312.pyc\\n|   |       |           x002.cpython-312.pyc\\n|   |       |           x003.cpython-312.pyc\\n|   |       |           x004.cpython-312.pyc\\n|   |       |           x005.cpython-312.pyc\\n|   |       |           x006.cpython-312.pyc\\n|   |       |           x007.cpython-312.pyc\\n|   |       |           x009.cpython-312.pyc\\n|   |       |           x00a.cpython-312.pyc\\n|   |       |           x00b.cpython-312.pyc\\n|   |       |           x00c.cpython-312.pyc\\n|   |       |           x00d.cpython-312.pyc\\n|   |       |           x00e.cpython-312.pyc\\n|   |       |           x00f.cpython-312.pyc\\n|   |       |           x010.cpython-312.pyc\\n|   |       |           x011.cpython-312.pyc\\n|   |       |           x012.cpython-312.pyc\\n|   |       |           x013.cpython-312.pyc\\n|   |       |           x014.cpython-312.pyc\\n|   |       |           x015.cpython-312.pyc\\n|   |       |           x016.cpython-312.pyc\\n|   |       |           x017.cpython-312.pyc\\n|   |       |           x018.cpython-312.pyc\\n|   |       |           x01d.cpython-312.pyc\\n|   |       |           x01e.cpython-312.pyc\\n|   |       |           x01f.cpython-312.pyc\\n|   |       |           x020.cpython-312.pyc\\n|   |       |           x021.cpython-312.pyc\\n|   |       |           x022.cpython-312.pyc\\n|   |       |           x023.cpython-312.pyc\\n|   |       |           x024.cpython-312.pyc\\n|   |       |           x025.cpython-312.pyc\\n|   |       |           x026.cpython-312.pyc\\n|   |       |           x027.cpython-312.pyc\\n|   |       |           x028.cpython-312.pyc\\n|   |       |           x029.cpython-312.pyc\\n|   |       |           x02a.cpython-312.pyc\\n|   |       |           x02c.cpython-312.pyc\\n|   |       |           x02e.cpython-312.pyc\\n|   |       |           x02f.cpython-312.pyc\\n|   |       |           x030.cpython-312.pyc\\n|   |       |           x031.cpython-312.pyc\\n|   |       |           x032.cpython-312.pyc\\n|   |       |           x033.cpython-312.pyc\\n|   |       |           x04d.cpython-312.pyc\\n|   |       |           x04e.cpython-312.pyc\\n|   |       |           x04f.cpython-312.pyc\\n|   |       |           x050.cpython-312.pyc\\n|   |       |           x051.cpython-312.pyc\\n|   |       |           x052.cpython-312.pyc\\n|   |       |           x053.cpython-312.pyc\\n|   |       |           x054.cpython-312.pyc\\n|   |       |           x055.cpython-312.pyc\\n|   |       |           x056.cpython-312.pyc\\n|   |       |           x057.cpython-312.pyc\\n|   |       |           x058.cpython-312.pyc\\n|   |       |           x059.cpython-312.pyc\\n|   |       |           x05a.cpython-312.pyc\\n|   |       |           x05b.cpython-312.pyc\\n|   |       |           x05c.cpython-312.pyc\\n|   |       |           x05d.cpython-312.pyc\\n|   |       |           x05e.cpython-312.pyc\\n|   |       |           x05f.cpython-312.pyc\\n|   |       |           x060.cpython-312.pyc\\n|   |       |           x061.cpython-312.pyc\\n|   |       |           x062.cpython-312.pyc\\n|   |       |           x063.cpython-312.pyc\\n|   |       |           x064.cpython-312.pyc\\n|   |       |           x065.cpython-312.pyc\\n|   |       |           x066.cpython-312.pyc\\n|   |       |           x067.cpython-312.pyc\\n|   |       |           x068.cpython-312.pyc\\n|   |       |           x069.cpython-312.pyc\\n|   |       |           x06a.cpython-312.pyc\\n|   |       |           x06b.cpython-312.pyc\\n|   |       |           x06c.cpython-312.pyc\\n|   |       |           x06d.cpython-312.pyc\\n|   |       |           x06e.cpython-312.pyc\\n|   |       |           x06f.cpython-312.pyc\\n|   |       |           x070.cpython-312.pyc\\n|   |       |           x071.cpython-312.pyc\\n|   |       |           x072.cpython-312.pyc\\n|   |       |           x073.cpython-312.pyc\\n|   |       |           x074.cpython-312.pyc\\n|   |       |           x075.cpython-312.pyc\\n|   |       |           x076.cpython-312.pyc\\n|   |       |           x077.cpython-312.pyc\\n|   |       |           x078.cpython-312.pyc\\n|   |       |           x079.cpython-312.pyc\\n|   |       |           x07a.cpython-312.pyc\\n|   |       |           x07b.cpython-312.pyc\\n|   |       |           x07c.cpython-312.pyc\\n|   |       |           x07d.cpython-312.pyc\\n|   |       |           x07e.cpython-312.pyc\\n|   |       |           x07f.cpython-312.pyc\\n|   |       |           x080.cpython-312.pyc\\n|   |       |           x081.cpython-312.pyc\\n|   |       |           x082.cpython-312.pyc\\n|   |       |           x083.cpython-312.pyc\\n|   |       |           x084.cpython-312.pyc\\n|   |       |           x085.cpython-312.pyc\\n|   |       |           x086.cpython-312.pyc\\n|   |       |           x087.cpython-312.pyc\\n|   |       |           x088.cpython-312.pyc\\n|   |       |           x089.cpython-312.pyc\\n|   |       |           x08a.cpython-312.pyc\\n|   |       |           x08b.cpython-312.pyc\\n|   |       |           x08c.cpython-312.pyc\\n|   |       |           x08d.cpython-312.pyc\\n|   |       |           x08e.cpython-312.pyc\\n|   |       |           x08f.cpython-312.pyc\\n|   |       |           x090.cpython-312.pyc\\n|   |       |           x091.cpython-312.pyc\\n|   |       |           x092.cpython-312.pyc\\n|   |       |           x093.cpython-312.pyc\\n|   |       |           x094.cpython-312.pyc\\n|   |       |           x095.cpython-312.pyc\\n|   |       |           x096.cpython-312.pyc\\n|   |       |           x097.cpython-312.pyc\\n|   |       |           x098.cpython-312.pyc\\n|   |       |           x099.cpython-312.pyc\\n|   |       |           x09a.cpython-312.pyc\\n|   |       |           x09b.cpython-312.pyc\\n|   |       |           x09c.cpython-312.pyc\\n|   |       |           x09d.cpython-312.pyc\\n|   |       |           x09e.cpython-312.pyc\\n|   |       |           x09f.cpython-312.pyc\\n|   |       |           x0a0.cpython-312.pyc\\n|   |       |           x0a1.cpython-312.pyc\\n|   |       |           x0a2.cpython-312.pyc\\n|   |       |           x0a3.cpython-312.pyc\\n|   |       |           x0a4.cpython-312.pyc\\n|   |       |           x0ac.cpython-312.pyc\\n|   |       |           x0ad.cpython-312.pyc\\n|   |       |           x0ae.cpython-312.pyc\\n|   |       |           x0af.cpython-312.pyc\\n|   |       |           x0b0.cpython-312.pyc\\n|   |       |           x0b1.cpython-312.pyc\\n|   |       |           x0b2.cpython-312.pyc\\n|   |       |           x0b3.cpython-312.pyc\\n|   |       |           x0b4.cpython-312.pyc\\n|   |       |           x0b5.cpython-312.pyc\\n|   |       |           x0b6.cpython-312.pyc\\n|   |       |           x0b7.cpython-312.pyc\\n|   |       |           x0b8.cpython-312.pyc\\n|   |       |           x0b9.cpython-312.pyc\\n|   |       |           x0ba.cpython-312.pyc\\n|   |       |           x0bb.cpython-312.pyc\\n|   |       |           x0bc.cpython-312.pyc\\n|   |       |           x0bd.cpython-312.pyc\\n|   |       |           x0be.cpython-312.pyc\\n|   |       |           x0bf.cpython-312.pyc\\n|   |       |           x0c0.cpython-312.pyc\\n|   |       |           x0c1.cpython-312.pyc\\n|   |       |           x0c2.cpython-312.pyc\\n|   |       |           x0c3.cpython-312.pyc\\n|   |       |           x0c4.cpython-312.pyc\\n|   |       |           x0c5.cpython-312.pyc\\n|   |       |           x0c6.cpython-312.pyc\\n|   |       |           x0c7.cpython-312.pyc\\n|   |       |           x0c8.cpython-312.pyc\\n|   |       |           x0c9.cpython-312.pyc\\n|   |       |           x0ca.cpython-312.pyc\\n|   |       |           x0cb.cpython-312.pyc\\n|   |       |           x0cc.cpython-312.pyc\\n|   |       |           x0cd.cpython-312.pyc\\n|   |       |           x0ce.cpython-312.pyc\\n|   |       |           x0cf.cpython-312.pyc\\n|   |       |           x0d0.cpython-312.pyc\\n|   |       |           x0d1.cpython-312.pyc\\n|   |       |           x0d2.cpython-312.pyc\\n|   |       |           x0d3.cpython-312.pyc\\n|   |       |           x0d4.cpython-312.pyc\\n|   |       |           x0d5.cpython-312.pyc\\n|   |       |           x0d6.cpython-312.pyc\\n|   |       |           x0d7.cpython-312.pyc\\n|   |       |           x0f9.cpython-312.pyc\\n|   |       |           x0fa.cpython-312.pyc\\n|   |       |           x0fb.cpython-312.pyc\\n|   |       |           x0fc.cpython-312.pyc\\n|   |       |           x0fd.cpython-312.pyc\\n|   |       |           x0fe.cpython-312.pyc\\n|   |       |           x0ff.cpython-312.pyc\\n|   |       |           x1d4.cpython-312.pyc\\n|   |       |           x1d5.cpython-312.pyc\\n|   |       |           x1d6.cpython-312.pyc\\n|   |       |           x1d7.cpython-312.pyc\\n|   |       |           x1f1.cpython-312.pyc\\n|   |       |           x1f6.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           __main__.cpython-312.pyc\\n|   |       |           \\n|   |       +---Unidecode-1.3.8.dist-info\\n|   |       |       entry_points.txt\\n|   |       |       INSTALLER\\n|   |       |       LICENSE\\n|   |       |       METADATA\\n|   |       |       RECORD\\n|   |       |       REQUESTED\\n|   |       |       top_level.txt\\n|   |       |       WHEEL\\n|   |       |       \\n|   |       +---wcwidth\\n|   |       |   |   table_vs16.py\\n|   |       |   |   table_wide.py\\n|   |       |   |   table_zero.py\\n|   |       |   |   unicode_versions.py\\n|   |       |   |   wcwidth.py\\n|   |       |   |   __init__.py\\n|   |       |   |   \\n|   |       |   \\\\---__pycache__\\n|   |       |           table_vs16.cpython-312.pyc\\n|   |       |           table_wide.cpython-312.pyc\\n|   |       |           table_zero.cpython-312.pyc\\n|   |       |           unicode_versions.cpython-312.pyc\\n|   |       |           wcwidth.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           \\n|   |       +---wcwidth-0.2.13.dist-info\\n|   |       |       INSTALLER\\n|   |       |       LICENSE\\n|   |       |       METADATA\\n|   |       |       RECORD\\n|   |       |       top_level.txt\\n|   |       |       WHEEL\\n|   |       |       zip-safe\\n|   |       |       \\n|   |       +---win32_setctime\\n|   |       |   |   py.typed\\n|   |       |   |   _setctime.py\\n|   |       |   |   __init__.py\\n|   |       |   |   \\n|   |       |   \\\\---__pycache__\\n|   |       |           _setctime.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           \\n|   |       +---win32_setctime-1.2.0.dist-info\\n|   |       |       INSTALLER\\n|   |       |       LICENSE\\n|   |       |       METADATA\\n|   |       |       RECORD\\n|   |       |       top_level.txt\\n|   |       |       WHEEL\\n|   |       |       \\n|   |       +---_pytest\\n|   |       |   |   cacheprovider.py\\n|   |       |   |   capture.py\\n|   |       |   |   compat.py\\n|   |       |   |   debugging.py\\n|   |       |   |   deprecated.py\\n|   |       |   |   doctest.py\\n|   |       |   |   faulthandler.py\\n|   |       |   |   fixtures.py\\n|   |       |   |   freeze_support.py\\n|   |       |   |   helpconfig.py\\n|   |       |   |   hookspec.py\\n|   |       |   |   junitxml.py\\n|   |       |   |   legacypath.py\\n|   |       |   |   logging.py\\n|   |       |   |   main.py\\n|   |       |   |   monkeypatch.py\\n|   |       |   |   nodes.py\\n|   |       |   |   outcomes.py\\n|   |       |   |   pastebin.py\\n|   |       |   |   pathlib.py\\n|   |       |   |   py.typed\\n|   |       |   |   pytester.py\\n|   |       |   |   pytester_assertions.py\\n|   |       |   |   python.py\\n|   |       |   |   python_api.py\\n|   |       |   |   python_path.py\\n|   |       |   |   recwarn.py\\n|   |       |   |   reports.py\\n|   |       |   |   runner.py\\n|   |       |   |   scope.py\\n|   |       |   |   setuponly.py\\n|   |       |   |   setupplan.py\\n|   |       |   |   skipping.py\\n|   |       |   |   stash.py\\n|   |       |   |   stepwise.py\\n|   |       |   |   terminal.py\\n|   |       |   |   threadexception.py\\n|   |       |   |   timing.py\\n|   |       |   |   tmpdir.py\\n|   |       |   |   unittest.py\\n|   |       |   |   unraisableexception.py\\n|   |       |   |   warnings.py\\n|   |       |   |   warning_types.py\\n|   |       |   |   _argcomplete.py\\n|   |       |   |   _version.py\\n|   |       |   |   __init__.py\\n|   |       |   |   \\n|   |       |   +---assertion\\n|   |       |   |   |   rewrite.py\\n|   |       |   |   |   truncate.py\\n|   |       |   |   |   util.py\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           rewrite.cpython-312.pyc\\n|   |       |   |           truncate.cpython-312.pyc\\n|   |       |   |           util.cpython-312.pyc\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   +---config\\n|   |       |   |   |   argparsing.py\\n|   |       |   |   |   compat.py\\n|   |       |   |   |   exceptions.py\\n|   |       |   |   |   findpaths.py\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           argparsing.cpython-312.pyc\\n|   |       |   |           compat.cpython-312.pyc\\n|   |       |   |           exceptions.cpython-312.pyc\\n|   |       |   |           findpaths.cpython-312.pyc\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   +---mark\\n|   |       |   |   |   expression.py\\n|   |       |   |   |   structures.py\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           expression.cpython-312.pyc\\n|   |       |   |           structures.cpython-312.pyc\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   +---_code\\n|   |       |   |   |   code.py\\n|   |       |   |   |   source.py\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           code.cpython-312.pyc\\n|   |       |   |           source.cpython-312.pyc\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   +---_io\\n|   |       |   |   |   pprint.py\\n|   |       |   |   |   saferepr.py\\n|   |       |   |   |   terminalwriter.py\\n|   |       |   |   |   wcwidth.py\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           pprint.cpython-312.pyc\\n|   |       |   |           saferepr.cpython-312.pyc\\n|   |       |   |           terminalwriter.cpython-312.pyc\\n|   |       |   |           wcwidth.cpython-312.pyc\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   +---_py\\n|   |       |   |   |   error.py\\n|   |       |   |   |   path.py\\n|   |       |   |   |   __init__.py\\n|   |       |   |   |   \\n|   |       |   |   \\\\---__pycache__\\n|   |       |   |           error.cpython-312.pyc\\n|   |       |   |           path.cpython-312.pyc\\n|   |       |   |           __init__.cpython-312.pyc\\n|   |       |   |           \\n|   |       |   \\\\---__pycache__\\n|   |       |           cacheprovider.cpython-312.pyc\\n|   |       |           capture.cpython-312.pyc\\n|   |       |           compat.cpython-312.pyc\\n|   |       |           debugging.cpython-312.pyc\\n|   |       |           deprecated.cpython-312.pyc\\n|   |       |           doctest.cpython-312.pyc\\n|   |       |           faulthandler.cpython-312.pyc\\n|   |       |           fixtures.cpython-312.pyc\\n|   |       |           freeze_support.cpython-312.pyc\\n|   |       |           helpconfig.cpython-312.pyc\\n|   |       |           hookspec.cpython-312.pyc\\n|   |       |           junitxml.cpython-312.pyc\\n|   |       |           legacypath.cpython-312.pyc\\n|   |       |           logging.cpython-312.pyc\\n|   |       |           main.cpython-312.pyc\\n|   |       |           monkeypatch.cpython-312.pyc\\n|   |       |           nodes.cpython-312.pyc\\n|   |       |           outcomes.cpython-312.pyc\\n|   |       |           pastebin.cpython-312.pyc\\n|   |       |           pathlib.cpython-312.pyc\\n|   |       |           pytester.cpython-312.pyc\\n|   |       |           pytester_assertions.cpython-312.pyc\\n|   |       |           python.cpython-312.pyc\\n|   |       |           python_api.cpython-312.pyc\\n|   |       |           python_path.cpython-312.pyc\\n|   |       |           recwarn.cpython-312.pyc\\n|   |       |           reports.cpython-312.pyc\\n|   |       |           runner.cpython-312.pyc\\n|   |       |           scope.cpython-312.pyc\\n|   |       |           setuponly.cpython-312.pyc\\n|   |       |           setupplan.cpython-312.pyc\\n|   |       |           skipping.cpython-312.pyc\\n|   |       |           stash.cpython-312.pyc\\n|   |       |           stepwise.cpython-312.pyc\\n|   |       |           terminal.cpython-312.pyc\\n|   |       |           threadexception.cpython-312.pyc\\n|   |       |           timing.cpython-312.pyc\\n|   |       |           tmpdir.cpython-312.pyc\\n|   |       |           unittest.cpython-312.pyc\\n|   |       |           unraisableexception.cpython-312.pyc\\n|   |       |           warnings.cpython-312.pyc\\n|   |       |           warning_types.cpython-312.pyc\\n|   |       |           _argcomplete.cpython-312.pyc\\n|   |       |           _version.cpython-312.pyc\\n|   |       |           __init__.cpython-312.pyc\\n|   |       |           \\n|   |       \\\\---__pycache__\\n|   |               py.cpython-312.pyc\\n|   |               \\n|   \\\\---Scripts\\n|       |   activate\\n|       |   activate.bat\\n|       |   Activate.ps1\\n|       |   deactivate.bat\\n|       |   dumppdf.py\\n|       |   ftfy.exe\\n|       |   normalizer.exe\\n|       |   pdf2txt.py\\n|       |   pdfplumber.exe\\n|       |   pip.exe\\n|       |   pip3.12.exe\\n|       |   pip3.exe\\n|       |   py.test.exe\\n|       |   pymupdf.exe\\n|       |   pypdfium2.exe\\n|       |   pytest.exe\\n|       |   python.exe\\n|       |   pythonw.exe\\n|       |   pythonw_d.exe\\n|       |   python_d.exe\\n|       |   unidecode.exe\\n|       |   \\n|       \\\\---__pycache__\\n|               dumppdf.cpython-312.pyc\\n|               pdf2txt.cpython-312.pyc\\n|               \\n+---configs\\n|       .env\\n|       \\n+---input\\n|   +---Audio Visual Media\\n|   +---Blog\\n|   +---Book\\n|   |       pdf_formula.pdf\\n|   |       \\n|   +---Conference\\n|   +---Dictionary\\n|   +---Essay\\n|   +---Law\\n|   +---Magazine Article\\n|   +---Newspaper\\n|   +---Organization\\n|   +---Science Article\\n|   |       pdf_simple.pdf\\n|   |       \\n|   \\\\---Thesis\\n+---media\\n|       Dewey bot.jpg\\n|       owl.png\\n|       \\n+---output\\n|   |   science_article_400_language_part_1_introduc?on_the_gpt_large_language_model.jsonl\\n|   |   science_article_400_language_part_1_introduc?on_the_gpt_large_language_model.md\\n|   |   science_article_400_language_part_1_introduc?on_the_gpt_large_language_model.txt\\n|   |   \\n|   \\\\---logs\\n|           pdf_formula.log\\n|           pdf_simple.log\\n|           run_2025-04-11_22-06-50.jsonl\\n|           run_2025-04-11_22-06-50.log\\n|           run_2025-04-11_22-08-47.jsonl\\n|           run_2025-04-11_22-08-47.log\\n|           \\n+---project_details\\n|   \\\\---basic_layout\\n|       \\\\---logs\\n|               dev_warnings.md\\n|               \\n+---scripts\\n|   |   .hashes.json\\n|   |   tiddler_exporter.py\\n|   |   \\n|   \\\\---tiddlers-export\\n|           .github_workflows_test.yml.json\\n|           CODE_OF_CONDUCT.md.json\\n|           CONTRIBUTING.md.json\\n|           main.py.json\\n|           README.logger.md.json\\n|           README.md.json\\n|           scripts_.hashes.json.json\\n|           scripts_tiddler_exporter.py.json\\n|           SECURITY.md.json\\n|           src_classifier.py.json\\n|           src_cleaner.py.json\\n|           src_exporter.py.json\\n|           src_logger.py.json\\n|           src_parser.py.json\\n|           src_utils.py.json\\n|           src_validator.py.json\\n|           tests_test_classifier.py.json\\n|           tests_test_cleaner.py.json\\n|           tests_test_exporter.py.json\\n|           tests_test_logger.py.json\\n|           tests_test_parser.py.json\\n|           tests_test_utils.py.json\\n|           tests_test_validator.py.json\\n|           \\n+---src\\n|   |   classifier.py\\n|   |   cleaner.py\\n|   |   exporter.py\\n|   |   logger.py\\n|   |   parser.py\\n|   |   utils.py\\n|   |   validator.py\\n|   |   \\n|   \\\\---__pycache__\\n|           classifier.cpython-312.pyc\\n|           cleaner.cpython-312.pyc\\n|           enhancer.cpython-312.pyc\\n|           exporter.cpython-312.pyc\\n|           logger.cpython-312.pyc\\n|           parser.cpython-312.pyc\\n|           utils.cpython-312.pyc\\n|           validator.cpython-312.pyc\\n|           \\n\\\\---tests\\n    |   test_classifier.py\\n    |   test_cleaner.py\\n    |   test_exporter.py\\n    |   test_logger.py\\n    |   test_parser.py\\n    |   test_utils.py\\n    |   test_validator.py\\n    |   \\n    +---fixtures\\n    |       pdf_formula.pdf\\n    |       pdf_simple.pdf\\n    |       \\n    \\\\---__pycache__\\n            test_classifier.cpython-312-pytest-8.3.5.pyc\\n            test_cleaner.cpython-312-pytest-8.3.5.pyc\\n            test_enhancer.cpython-312-pytest-8.3.5.pyc\\n            test_exporter.cpython-312-pytest-8.3.5.pyc\\n            test_logger.cpython-312-pytest-8.3.5.pyc\\n            test_parser.cpython-312-pytest-8.3.5.pyc\\n            test_utils.cpython-312-pytest-8.3.5.pyc\\n            test_validator.cpython-312-pytest-8.3.5.pyc\\n            \\n\\n```\",\"title\":\"-estructura.txt\",\"tags\":\"-estructura.txt [[--- Codigo]] [[--📘 Documentacion]]\",\"type\":\"text/markdown\",\"modified\":\"20250423150608663\",\"tmap.id\":\"1c4d4fb2-f221-4b70-8651-0c93cdd2f90c\"},{\"created\":\"20250422211125706\",\"text\":\"## [[Tags]]\\n[[Python]]\\n\\n```python\\n# main.py\\n\\n\\\"\\\"\\\"\\nScript principal del OpenPages-pipeline 🧠📘\\nProcesa todos los archivos PDF dentro de /input/** y genera salidas en /output\\n\\\"\\\"\\\"\\n\\nimport os\\nfrom pathlib import Path\\n\\nfrom src.parser import extract_text\\nfrom src.cleaner import limpiar_texto_completo\\nfrom src.classifier import clasificar_documento\\nfrom src.exporter import exportar_archivos\\nfrom src.logger import log_evento\\nfrom src.validator import validar_documento\\n\\n# Forzar idioma visual en consola\\nos.environ[\\\"LANG\\\"] = \\\"es\\\"\\n\\nINPUT_DIR = \\\"input\\\"\\n\\ndef main():\\n    print(\\\"🚀 Iniciando Dewey Pipeline...\\\")\\n\\n    archivos_pdf = list(Path(INPUT_DIR).rglob(\\\"*.pdf\\\"))\\n    if not archivos_pdf:\\n        print(\\\"⚠️  No se encontraron archivos PDF en la carpeta 'input/'\\\")\\n        return\\n\\n    print(f\\\"🔍 Se encontraron {len(archivos_pdf)} archivos para procesar.\\\")\\n\\n    resumen = {\\n        \\\"procesados\\\": 0,\\n        \\\"omitidos\\\": 0,\\n        \\\"errores\\\": 0\\n    }\\n\\n    for archivo in archivos_pdf:\\n        ruta = str(archivo)\\n        nombre_archivo = archivo.stem\\n        tipo = Path(archivo).parent.name  # Carpeta como tipo (Book, Essay, etc.)\\n\\n        try:\\n            # 1️⃣ Extraer texto\\n            texto_crudo = extract_text(ruta)\\n            log_evento(\\\"procesar\\\", archivo=ruta)\\n\\n            # 2️⃣ Limpiar texto\\n            texto_limpio = limpiar_texto_completo(texto_crudo, modo_md=True)\\n\\n            # 3️⃣ Clasificar\\n            resultado = clasificar_documento(texto_limpio)\\n            categoria = resultado.get(\\\"categoria\\\")\\n            dewey = resultado.get(\\\"dewey\\\")\\n            titulo = resultado.get(\\\"titulo\\\")\\n            autor = resultado.get(\\\"autor\\\")\\n\\n            # 4️⃣ Validar documento completo\\n            es_valido, info = validar_documento(texto_limpio, titulo, autor)\\n            if not es_valido:\\n                log_evento(\\\"warning_meta\\\", archivo=ruta, nivel=\\\"WARNING\\\")\\n                print(f\\\"⚠️  Documento omitido: {info.get('razones', [])}\\\")\\n                resumen[\\\"omitidos\\\"] += 1\\n                continue\\n\\n            # 5️⃣ Exportar\\n            exportar_archivos(tipo, titulo, texto_limpio, categoria, dewey, autor)\\n\\n            # 6️⃣ Logging visual + estructurado\\n            log_evento(\\\"clasificado\\\", archivo=ruta, categoria=categoria, dewey=dewey)\\n            log_evento(\\\"export_ok\\\", archivo=ruta, categoria=categoria, dewey=dewey)\\n            resumen[\\\"procesados\\\"] += 1\\n\\n        except Exception as e:\\n            log_evento(\\\"error_parse\\\", archivo=ruta, nivel=\\\"ERROR\\\")\\n            print(f\\\"❌ Error procesando {ruta}: {e}\\\")\\n            resumen[\\\"errores\\\"] += 1\\n\\n    print(f\\\"\\\"\\\"\\n    Resumen del Pipeline:\\n          ✔️ Procesados: {resumen['procesados']}\\n          ⚠️ Omitidos: {resumen['omitidos']}\\n          ❌ Errores: {resumen['errores']}\\n\\\"\\\"\\\")\\n\\nif __name__ == \\\"__main__\\\":\\n    main()\\n\\n```\",\"title\":\"-main.py\",\"tags\":\"Python -main.py [[--- Codigo]] [[--🧬 src/]]\",\"type\":\"text/markdown\",\"modified\":\"20250423151618958\",\"tmap.id\":\"6f72d967-5ef0-4d7f-8dc0-082fa107c392\"},{\"created\":\"20250422211125709\",\"text\":\"## [[Tags]]\\n[[--- Documentacion]]\\n\\n```markdown\\n# 📘 Logger – OpenPages-pipeline\\n\\nEste módulo permite registrar todos los eventos clave del procesamiento de PDFs de forma visual (emoji en consola) y persistente (archivos `.log` y `.jsonl`), con soporte multilenguaje y trazabilidad por ejecución.\\n\\n---\\n\\n## 🎯 Objetivo\\n\\n- Proveer retroalimentación amigable en tiempo real\\n- Generar trazas auditables por ejecución\\n- Facilitar debugging, revisión, métricas y transparencia\\n\\n---\\n\\n## 📁 Archivos generados\\n\\nTodos los archivos se guardan automáticamente en la carpeta:\\n\\n```\\noutput/logs/\\n```\\n\\n| Archivo | Descripción |\\n| --- | --- |\\n| `run_YYYY-MM-DD_HH-MM-SS.log` | Log plano legible para humanos |\\n| `run_YYYY-MM-DD_HH-MM-SS.jsonl` | Log estructurado en formato JSONL (1 línea = 1 evento) |\\n| `<nombre_archivo>.log` | Log individual por cada PDF procesado |\\n\\n---\\n\\n## 🔁 Formato JSONL estructurado\\n\\nCada línea representa un evento del pipeline:\\n\\n```json\\n{\\n  \\\"timestamp\\\": \\\"2025-04-10T15:42:21.543Z\\\",\\n  \\\"ejecucion\\\": \\\"c78fbccbeed045b5919e8a7e79dd4d73\\\",\\n  \\\"evento\\\": \\\"clasificado\\\",\\n  \\\"archivo\\\": \\\"input/Libro.pdf\\\",\\n  \\\"categoria\\\": \\\"Tecnología\\\",\\n  \\\"dewey\\\": \\\"600\\\",\\n  \\\"nivel\\\": \\\"INFO\\\"\\n}\\n```\\n\\n---\\n\\n## 📦 Campos incluidos\\n\\n| Campo | Significado |\\n| --- | --- |\\n| `timestamp` | Fecha y hora del evento |\\n| `ejecucion` | ID único para toda la ejecución del pipeline |\\n| `evento` | Nombre del evento registrado |\\n| `archivo` | Ruta del archivo procesado |\\n| `categoria` | Categoría asignada (si aplica) |\\n| `dewey` | Código Dewey (si aplica) |\\n| `nivel` | Nivel del log (`INFO`, `WARNING`, `ERROR`) |\\n\\n---\\n\\n## 🧠 Eventos disponibles\\n\\n| Evento | Emoji | Nivel sugerido | Contexto |\\n| --- | --- | --- | --- |\\n| `procesar` | 📘  | INFO | Inicio del procesamiento de un PDF |\\n| `clasificado` | 📖  | INFO | Clasificación exitosa del documento |\\n| `export_ok` | ✔️  | INFO | Exportación finalizada correctamente |\\n| `warning_meta` | ⚠️  | WARNING | Metadatos faltantes o inválidos |\\n| `warning_texto_corto` | ⚠️  | WARNING | El texto extraído es muy breve |\\n| `error_parse` | ❌   | ERROR | Fallo al procesar o extraer texto |\\n| `archivo_inaccesible` | ❌   | ERROR | No se puede abrir el archivo |\\n\\n---\\n\\n## ⚙️ Personalización vía variables de entorno\\n\\n| Variable | Descripción | Valor por defecto |\\n| --- | --- | --- |\\n| `LANG` | Idioma de mensajes (`es`, `en`) | `es` |\\n| `LOG_LEVEL` | Nivel mínimo a registrar | `INFO` |\\n| `EXECUTION_ID` | ID manual para auditoría externa | `auto-generado` |\\n\\n---\\n\\n## 📌 Recomendaciones\\n\\n- Revisar `run_*.jsonl` para análisis estructurado (Python, jq, dashboards)\\n- Usar los `.log` individuales para depurar errores aislados\\n- Integrar los logs en herramientas externas si se requiere trazabilidad continua\\n\\n---\\n\\n## 🧪 Pruebas\\n\\nEl archivo `test_logger.py` incluye pruebas para:\\n\\n- Mensajes visuales esperados\\n- Verificación de archivos `.jsonl`\\n- Logs individuales por PDF\\n\\n---\\n\\n> `logger.py` es el narrador silencioso del pipeline. Te dice qué pasó, cuándo y cómo — sin ruido, con trazabilidad y respeto.\\n```\",\"title\":\"-README.logger.md\",\"tags\":\"-README.logger.md [[--- Codigo]] [[--📘 Documentacion]]\",\"type\":\"text/markdown\",\"modified\":\"20250423145932314\",\"tmap.id\":\"e6fedeaf-0148-4746-87d7-40b1b4a7e365\"},{\"created\":\"20250422215120430\",\"text\":\"## [[Tags]]\\n[[--- Documentacion]]\\n\\n```markdown\\n\\n# 📘 OpenPages-pipeline – Procesamiento Inteligente de PDFs como Biblioteca Abierta 🤖📚\\n\\n![](https://github.com/diegoabeltran16/OpenPages-pipeline/actions/workflows/test.yml/badge.svg)\\n\\n---\\n\\n## 🎯 Objetivo General\\n\\nFacilitar el análisis y organización de literatura científica con una herramienta local, ética y extensible — lista para IA, pero pensada para humanos.\\n\\n---\\n\\n## 🔧 ¿Qué hace el pipeline?\\n\\n- 📄 Extrae texto de PDFs técnicos o académicos usando [`PyMuPDF`](https://pymupdf.readthedocs.io/en/latest/) o [`pdfplumber`](https://github.com/jsvine/pdfplumber)\\n- 🧹 Limpia el texto para que sea legible y apto para NLP\\n- 🧠 Clasifica el contenido según taxonomías configurables (por defecto: **Clasificación Dewey**)\\n- ✍️ Extrae título y autor automáticamente\\n- 💾 Exporta tres formatos listos para IA:\\n  - `.txt`: texto plano\\n  - `.md`: formato Markdown con metadatos\\n  - `.jsonl`: párrafos individuales para NLP / embeddings\\n\\n---\\n\\n## 📚 Melvil Dewey y el Acceso Abierto al Conocimiento\\n\\n> ✨ *\\\"Mi trabajo de vida es hacer más fácil el camino hacia el conocimiento.\\\"*  \\n> — **Melvil Dewey** *\\n\\nEste proyecto se inspiró inicialmente en el sistema decimal creado por **Melvil Louis Kossuth Dewey** (1851–1931), pionero en la organización del conocimiento. Sin embargo, también reconocemos que:\\n\\n- Fue una figura controvertida por su exclusión de voces no occidentales y su conducta discriminatoria.\\n- Su sistema, aunque útil, no representa todas las formas de saber ni todas las culturas.\\n\\n🔄 **OpenPages-pipeline** toma lo útil de esa estructura, pero abre la puerta a múltiples formas de clasificar y explorar el conocimiento.\\n\\n---\\n\\n## 🌱 ¿Qué hereda este proyecto?\\n\\n- **Organización estructurada**, comenzando por Dewey, pero con apertura a otros enfoques (UNESCO, folksonomías).\\n- **Acceso simple**, desde terminal y sin conexión a internet.\\n- **Ética educativa**: sin trackers, sin nube, sin barreras.\\n- **Portabilidad libre**, como las bibliotecas viajeras... pero en `.jsonl` 😉\\n\\n> 🧠 Ideal para estudiantes, investigadores, docentes, autodidactas, y desarrolladores comprometidos con el conocimiento abierto.\\n\\n---\\n\\n## ▶️ ¿Cómo usarlo?\\n\\n### 1. Clonar el repositorio\\n\\n```bash\\ngit clone https://github.com/diegoabeltran16/OpenPages-pipeline\\ncd OpenPages-pipeline\\n```\\n\\n### 2. Crear entorno virtual\\n\\n```bash\\npython -m venv .venv\\n.venv\\\\Scripts\\\\activate  # en Windows\\n# o en Linux/macOS:\\n# source .venv/bin/activate\\n```\\n\\n### 3. Instalar dependencias\\n\\n```bash\\npip install -r requirements.txt\\n```\\n\\n### 4. Colocar PDFs dentro de /input/ (pueden estar en subcarpetas)\\n\\n```bash\\nmkdir input/Book\\nmv tu_archivo.pdf input/Book/\\n```\\n\\n### 5. Ejecutar el pipeline\\n\\n```bash\\npython main.py\\n```\\n\\n---\\n\\n## 💡 Ejemplo de salida\\n\\n```plaintext\\n📁 output/\\n├── ensayo_100_filosofia_aprendizaje_automatico_diego_beltran.txt\\n├── ensayo_100_filosofia_aprendizaje_automatico_diego_beltran.md\\n├── ensayo_100_filosofia_aprendizaje_automatico_diego_beltran.jsonl\\n```\\n\\n---\\n\\n## 🔍 Fase actual: MVP Offline\\n\\n| Módulo | Estado |\\n| --- | --- |\\n| Extracción | ✅ PyMuPDF + heurística de layout |\\n| Limpieza | ✅ Markdown-ready, preservación semántica |\\n| Clasificación | ✅ Dewey heurístico + título/autor |\\n| Exportación | ✅ AI-ready multiformato |\\n| Logger | ✅ Multilenguaje (es/en) |\\n| Testing | ✅ Pytest + GitHub Actions CI |\\n\\n---\\n\\n## 📄 Licencia\\n\\nEste proyecto está licenciado bajo **Apache License 2.0**.  \\nPodés usar, modificar y distribuir libremente, siempre que incluyas la atribución correspondiente.\\n\\n© 2024–2025 – *diegoabeltran_16*\\n\\n---\\n\\n## ✨ Contribuciones\\n\\nSi compartís esta visión de acceso libre al conocimiento, podés:\\n\\n- 💬 Abrir issues o sugerencias\\n- 🧪 Agregar tests o módulos nuevos\\n- 📚 Mejorar documentación o UX\\n\\n> Este pipeline también es tuyo. Hagámoslo crecer juntos.  \\n> ✨ `openpages-pipeline` — para leer, pensar y compartir mejor.\\n```\",\"title\":\"-README.md\",\"tags\":\"-README.md [[--- Codigo]] [[--📘 Documentacion]]\",\"type\":\"text/markdown\",\"modified\":\"20250423145940127\",\"tmap.id\":\"a7d0a57c-ddae-42f5-b181-0482ac3ac419\"},{\"created\":\"20250423150121203\",\"text\":\"## [[Tags]]\\n\\n\\n```txt\\npymupdf==1.25.5\\npdfplumber\\npytest\\nunidecode\\nloguru>=0.7.2\\n\\n```\",\"title\":\"-requirements.txt\",\"tags\":\"[[--- Codigo]] [[--📘 Documentacion]] -requirements.txt\",\"type\":\"text/markdown\",\"modified\":\"20250423150552545\",\"tmap.id\":\"f25f30f7-1b0b-49ac-8b46-8eff91825f1d\"},{\"created\":\"20250422211349338\",\"text\":\"## [[Tags]]\\n[[JSON]]\\n\\n```json\\n{\\n  \\\"CODE_OF_CONDUCT.md\\\": \\\"ca7c494a5b134e6cda57155e13dfa717433c7599\\\",\\n  \\\"CONTRIBUTING.md\\\": \\\"05edaf5f475222506ffbfab2d5207d41b7e3132e\\\",\\n  \\\"main.py\\\": \\\"bd0f8412b55eab58f51d3942caea15a203f80820\\\",\\n  \\\"README.logger.md\\\": \\\"1e3bc4a5088f0c79527a704b325ee6d7392ab894\\\",\\n  \\\"README.md\\\": \\\"23d0140a0e8eba4bddf218ea21b69b5b2816124b\\\",\\n  \\\"SECURITY.md\\\": \\\"78addf7646780feb45ca3bf8bdfeae127ae768a5\\\",\\n  \\\".github\\\\\\\\workflows\\\\\\\\test.yml\\\": \\\"fe070801a5687a255a506390abd05803b32deb11\\\",\\n  \\\"scripts\\\\\\\\tiddler_exporter.py\\\": \\\"f884f07c0b6a7d178885032a59f570cc9866818d\\\",\\n  \\\"src\\\\\\\\classifier.py\\\": \\\"a5a8a4acd83325ee78c9fbced600d09a2f8c756c\\\",\\n  \\\"src\\\\\\\\cleaner.py\\\": \\\"390bf348342de70201f95fac0d9f7884811b0020\\\",\\n  \\\"src\\\\\\\\exporter.py\\\": \\\"fd33f5c647e54839fea11503e5770fd3230f25e1\\\",\\n  \\\"src\\\\\\\\logger.py\\\": \\\"2e9e7ca527ec1616cea46abf0f1828372b0cd1d1\\\",\\n  \\\"src\\\\\\\\parser.py\\\": \\\"784272e079d8f2e6e6edc41db06c9917082b7de6\\\",\\n  \\\"src\\\\\\\\utils.py\\\": \\\"27ba83724b85427a9e58921aae3ae5f768dc86fa\\\",\\n  \\\"src\\\\\\\\validator.py\\\": \\\"d230b42fa677212ca16918ba25ccfb1ec8b33c7d\\\",\\n  \\\"tests\\\\\\\\test_classifier.py\\\": \\\"d71126bf50b9a12eb93ac169604630eaa99cf2fd\\\",\\n  \\\"tests\\\\\\\\test_cleaner.py\\\": \\\"691d20dfed4dd3a61849c02353a88ae60b42fb28\\\",\\n  \\\"tests\\\\\\\\test_exporter.py\\\": \\\"3eff9850bf80b29eb60502493348017934e3324d\\\",\\n  \\\"tests\\\\\\\\test_logger.py\\\": \\\"62de6f93aa2e0974aae17ded9629f9eca32c20ca\\\",\\n  \\\"tests\\\\\\\\test_parser.py\\\": \\\"b0d3d950e74e2ea8380c9fb74189330672fbd25b\\\",\\n  \\\"tests\\\\\\\\test_utils.py\\\": \\\"3bd7ba9057abe8e212b3404374196a60d413ec42\\\",\\n  \\\"tests\\\\\\\\test_validator.py\\\": \\\"2214ae91b72a806efed91280f3f90fc80e004268\\\"\\n}\\n```\",\"title\":\"-scripts_.hashes.json\",\"tags\":\"-scripts_.hashes.json [[--- Codigo]]\",\"type\":\"text/markdown\",\"modified\":\"20250423140727901\",\"tmap.id\":\"1c945d28-f2ac-42b2-9e7c-cf4c90df3c82\"},{\"created\":\"20250422211349339\",\"text\":\"## [[Tags]]\\n[[Python]]\\n\\n```python\\n\\\"\\\"\\\"\\n📦 Tiddler Exporter – scripts/tiddler_exporter.py\\n\\nEste módulo recorre los archivos fuente del proyecto, detecta cambios mediante hashes,\\nextrae etiquetas (tags) automáticamente en base a la ruta y extensión, y exporta un archivo\\npor cada entrada como tiddler individual en formato JSON, listo para importar en TiddlyWiki.\\n\\n🔒 100% en Python, sin dependencias externas. Ideal para documentación viva, visual y offline.\\n\\\"\\\"\\\"\\n\\nimport os\\nimport json\\nimport hashlib\\nfrom datetime import datetime, timezone\\nfrom pathlib import Path\\nfrom typing import List\\n\\n# ==========================\\n# ⚙️ CONFIGURACIÓN GENERAL\\n# ==========================\\n\\nROOT_DIR = Path(__file__).resolve().parents[1]  # raíz del proyecto\\nSCRIPT_DIR = Path(__file__).parent\\nOUTPUT_DIR = SCRIPT_DIR / \\\"tiddlers-export\\\"\\nHASH_FILE = SCRIPT_DIR / \\\".hashes.json\\\"\\n\\nVALID_EXTENSIONS = ['.py', '.md', '.json', '.sh', '.html', '.css','.yml']\\nIGNORE_DIRS = ['__pycache__', 'venv', '.venv', 'dist', 'node_modules', 'output', 'input', '.pytest_cache', 'configs', 'media', 'project_details', 'tiddlers-export'   ]\\n\\nLANGUAGE_MAP = {\\n    '.py': 'python',\\n    '.md': 'markdown',\\n    '.json': 'json',\\n    '.sh': 'bash',\\n    '.yml': 'bash',\\n    '.html': 'html',\\n    '.css': 'css'\\n}\\n\\nTAG_MAP = [\\n    {\\\"dir\\\": \\\"src\\\", \\\"tag\\\": \\\"[[--- Codigo]]\\\"},\\n    {\\\"dir\\\": \\\"tests\\\", \\\"tag\\\": \\\"[[--- Test]]\\\"},\\n    {\\\"dir\\\": \\\"scripts\\\", \\\"tag\\\": \\\"[[--- Automatizacion]]\\\"},\\n    {\\\"ext\\\": \\\".md\\\", \\\"tag\\\": \\\"[[--- Documentacion]]\\\"},\\n    {\\\"ext\\\": \\\".py\\\", \\\"tag\\\": \\\"[[Python]]\\\"},\\n    {\\\"ext\\\": \\\".json\\\", \\\"tag\\\": \\\"[[JSON]]\\\"},\\n    {\\\"ext\\\": \\\".sh\\\", \\\"tag\\\": \\\"[[Shell]]\\\"},\\n]\\n\\n# ==============================\\n# 🔎 FUNCIONES AUXILIARES\\n# ==============================\\n\\ndef get_all_files(directory: Path) -> List[Path]:\\n    \\\"\\\"\\\"Recorre recursivamente el proyecto y devuelve los archivos válidos.\\\"\\\"\\\"\\n    all_files = []\\n    for root, dirs, files in os.walk(directory):\\n        # Ignorar carpetas no deseadas\\n        dirs[:] = [d for d in dirs if d not in IGNORE_DIRS]\\n        for file in files:\\n            ext = Path(file).suffix\\n            if ext in VALID_EXTENSIONS:\\n                all_files.append(Path(root) / file)\\n    return all_files\\n\\ndef get_hash(content: str) -> str:\\n    return hashlib.sha1(content.encode('utf-8')).hexdigest()\\n\\ndef detect_tags(file_path: Path) -> List[str]:\\n    \\\"\\\"\\\"Asigna tags automáticamente según carpeta o extensión.\\\"\\\"\\\"\\n    tags = []\\n    rel_path = str(file_path.relative_to(ROOT_DIR))\\n    for rule in TAG_MAP:\\n        if rule.get(\\\"dir\\\") and f\\\"/{rule['dir']}/\\\" in rel_path:\\n            tags.append(rule[\\\"tag\\\"])\\n        if rule.get(\\\"ext\\\") and rel_path.endswith(rule[\\\"ext\\\"]):\\n            tags.append(rule[\\\"tag\\\"])\\n    return list(set(tags))  # evitar duplicados\\n\\ndef safe_title(path: Path) -> str:\\n    \\\"\\\"\\\"Convierte la ruta del archivo en un título válido para TiddlyWiki.\\\"\\\"\\\"\\n    return str(path.relative_to(ROOT_DIR)).replace(os.sep, '_')\\n\\n# ==============================\\n# 🚀 EXPORTADOR PRINCIPAL\\n# ==============================\\n\\ndef export_tiddlers(dry_run=False):\\n    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)\\n    if HASH_FILE.exists():\\n        with open(HASH_FILE, 'r', encoding='utf-8') as f:\\n            old_hashes = json.load(f)\\n    else:\\n        old_hashes = {}\\n\\n    new_hashes = {}\\n    changed_files = []\\n\\n    for file_path in get_all_files(ROOT_DIR):\\n        rel_path = str(file_path.relative_to(ROOT_DIR))\\n        ext = file_path.suffix\\n        lang = LANGUAGE_MAP.get(ext, 'text')\\n        content = file_path.read_text(encoding='utf-8')\\n        hash_now = get_hash(content)\\n        new_hashes[rel_path] = hash_now\\n\\n        if old_hashes.get(rel_path) == hash_now:\\n            continue  # sin cambios\\n\\n        tags = detect_tags(file_path)\\n        title = safe_title(file_path)\\n\\n        # 🧠 Contenido markdown con tags visuales arriba\\n        text_block = f\\\"## [[Tags]]\\\\n{' '.join(tags)}\\\\n\\\\n```{lang}\\\\n{content}\\\\n```\\\"\\n\\n        tiddler = {\\n            \\\"title\\\": title,\\n            \\\"text\\\": text_block,\\n            \\\"tags\\\": ' '.join(tags),\\n            \\\"type\\\": \\\"text/markdown\\\",\\n            \\\"created\\\": datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S%f')[:17],\\n            \\\"modified\\\": datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S%f')[:17],\\n        }\\n\\n        if dry_run:\\n            print(f\\\"[dry-run] Detectado cambio en: {rel_path}\\\")\\n            continue\\n\\n        out_file = OUTPUT_DIR / f\\\"{title}.json\\\"\\n        with open(out_file, 'w', encoding='utf-8') as f:\\n            json.dump(tiddler, f, indent=2, ensure_ascii=False)\\n\\n        changed_files.append(rel_path)\\n\\n    if not dry_run:\\n        with open(HASH_FILE, 'w', encoding='utf-8') as f:\\n            json.dump(new_hashes, f, indent=2)\\n\\n    print(f\\\"\\\\n📦 Archivos modificados: {len(changed_files)}\\\")\\n    if changed_files:\\n        for path in changed_files:\\n            print(f\\\"  ✅ Exportado: {path}\\\")\\n    else:\\n        print(\\\"  🔁 Sin cambios detectados.\\\")\\n\\n# ==============================\\n# 🧪 ENTRADA DIRECTA (CLI SIMPLE)\\n# ==============================\\n\\nif __name__ == \\\"__main__\\\":\\n    import sys\\n    dry = '--dry-run' in sys.argv\\n    export_tiddlers(dry_run=dry)\\n\\n```\",\"title\":\"-scripts_tiddler_exporter.py\",\"tags\":\"Python -scripts_tiddler_exporter.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"modified\":\"20250423140744461\",\"tmap.id\":\"11d53540-af34-419e-9acc-8d0292a50b7a\"},{\"created\":\"20250422211125712\",\"text\":\"## [[Tags]]\\n[[--- Documentacion]]\\n\\n```markdown\\n# 🛡️ Política de Seguridad – OpenPages-pipeline\\n\\n## 🔢 Versiones con soporte\\n\\nEn esta fase del proyecto (MVP), el soporte de seguridad se centra únicamente en la versión principal en desarrollo. Las versiones anteriores o experimentales no recibirán parches de seguridad.\\n\\n| Versión   | Soporte actual     |\\n|-----------|--------------------|\\n| main    | ✅ Activa y mantenida |\\n| 0.1.x   | ❌ No mantenida     |\\n| < 0.1   | ❌ Obsoleta         |\\n\\n---\\n\\n## 📣 Cómo reportar una vulnerabilidad\\n\\nSi encontrás un problema de seguridad (por ejemplo: ejecución de código malicioso, lectura no autorizada de archivos, inyección de texto en outputs), por favor:\\n\\n1. **No abras un issue público**.\\n2. Escribinos de forma privada a:  \\n   📩 seguridad@openpages.ai *(si aún no está activo, usar canal de GitHub)*\\n\\nIncluí por favor:\\n\\n- Una descripción clara del problema\\n- Pasos para reproducirlo (si aplica)\\n- Opcional: sugerencia de solución o PR asociado\\n\\nNos comprometemos a:\\n\\n- 📬 Confirmar la recepción del reporte en un plazo máximo de **5 días hábiles**\\n- 📌 Evaluarlo con cuidado, incluso si es menor\\n- 🛠️ Aplicar un parche o solución en el corto plazo (si aplica)\\n- 📢 Informar en el changelog si fue resuelto (con anonimato si se desea)\\n\\n---\\n\\n## 🧠 ¿Y si no es una vulnerabilidad crítica?\\n\\nSi encontraste un bug o comportamiento inesperado **pero no crítico**, abrí una [Issue](https://github.com/diegoabeltran16/OpenPages-pipeline/issues) con la etiqueta `bug` o `enhancement`.\\n\\nTu reporte ayuda a que este proyecto sea más robusto y confiable para tod@s.\\n\\n---\\n\\n**Gracias por contribuir a que OpenPages-pipeline sea una herramienta segura, ética y confiable.**\\n\\n```\",\"title\":\"-SECURITY.md\",\"tags\":\"-SECURITY.md [[--- Codigo]] [[--📘 Documentacion]]\",\"type\":\"text/markdown\",\"modified\":\"20250423145951537\",\"tmap.id\":\"898eb942-ca45-43d7-9e74-5c6268079c79\"},{\"created\":\"20250422211125718\",\"text\":\"## [[Tags]]\\n[[Python]]\\n\\n```python\\n# src/classifier.py\\n\\nfrom .utils import normalizar_texto\\nimport re\\n\\n# ===============================\\n# Diccionario de categorías Dewey\\n# ===============================\\nCATEGORIAS_DEWEY = {\\n    \\\"General Works\\\": ([\\\"encyclopedia\\\", \\\"news\\\", \\\"summary\\\"], \\\"000\\\"),\\n    \\\"Philosophy and Psychology\\\": ([\\\"ethics\\\", \\\"logic\\\", \\\"psychology\\\", \\\"epistemology\\\"], \\\"100\\\"),\\n    \\\"Religion\\\": ([\\\"bible\\\", \\\"god\\\", \\\"theology\\\", \\\"religion\\\"], \\\"200\\\"),\\n    \\\"Social Sciences\\\": ([\\\"economy\\\", \\\"education\\\", \\\"law\\\", \\\"government\\\", \\\"sociology\\\"], \\\"300\\\"),\\n    \\\"Language\\\": ([\\\"grammar\\\", \\\"linguistics\\\", \\\"translation\\\", \\\"language\\\"], \\\"400\\\"),\\n    \\\"Natural Sciences and Mathematics\\\": ([\\\"mathematics\\\", \\\"physics\\\", \\\"biology\\\", \\\"chemistry\\\", \\\"science\\\",\\\"física\\\", \\\"biología\\\", \\\"química\\\", \\\"ciencia\\\",\\\"mathematics\\\", \\\"physics\\\", \\\"biology\\\", \\\"chemistry\\\", \\\"science\\\",\\n        \\\"fisica\\\", \\\"biologia\\\", \\\"quimica\\\", \\\"ciencia\\\", \\\"cuantica\\\"], \\\"500\\\"),\\n    \\\"Technology\\\": ([\\\"engineering\\\", \\\"medicine\\\", \\\"software\\\", \\\"ai\\\", \\\"agriculture\\\"], \\\"600\\\"),\\n    \\\"The Arts\\\": ([\\\"music\\\", \\\"drawing\\\", \\\"photography\\\", \\\"design\\\", \\\"sports\\\"], \\\"700\\\"),\\n    \\\"Literature\\\": ([\\\"poetry\\\", \\\"novel\\\", \\\"fiction\\\", \\\"essay\\\", \\\"drama\\\"], \\\"800\\\"),\\n    \\\"History and Geography\\\": ([\\\"history\\\", \\\"war\\\", \\\"civilizations\\\", \\\"travel\\\", \\\"biography\\\"], \\\"900\\\")\\n}\\n\\n\\ndef clasificar_documento(texto: str) -> dict:\\n    \\\"\\\"\\\"\\n    Clasifica un texto según la clasificación Dewey,\\n    y extrae metadatos básicos (título, autor).\\n    \\\"\\\"\\\"\\n    categoria, dewey = clasificar_tematica(texto)\\n    titulo = extraer_titulo(texto)\\n    autor = extraer_autor(texto)\\n\\n    return {\\n        \\\"categoria\\\": categoria,\\n        \\\"dewey\\\": dewey,\\n        \\\"titulo\\\": titulo,\\n        \\\"autor\\\": autor\\n    }\\n\\n\\ndef clasificar_tematica(texto: str) -> tuple:\\n    texto = normalizar_texto(texto)\\n\\n    for categoria, (palabras, codigo) in CATEGORIAS_DEWEY.items():\\n        for palabra in palabras:\\n            if re.search(rf\\\"\\\\b{palabra}\\\\b\\\", texto):\\n                return categoria, codigo\\n\\n    return \\\"General Works\\\", \\\"000\\\"\\n\\n\\n\\ndef extraer_titulo(texto: str) -> str:\\n    \\\"\\\"\\\"\\n    Retorna la primera línea que parece título (no autor).\\n    \\\"\\\"\\\"\\n    for linea in texto.splitlines()[:10]:\\n        if len(linea.strip()) > 10 and not re.search(r\\\"\\\\b(by|autor:|escrito por)\\\\b\\\", linea, re.IGNORECASE):\\n            return linea.strip()\\n    return \\\"Sin título\\\"\\n\\n\\ndef extraer_autor(texto: str) -> str:\\n    \\\"\\\"\\\"\\n    Busca patrones comunes de autoría.\\n    \\\"\\\"\\\"\\n    patrones = [\\n        r\\\"by ([A-ZÁÉÍÓÚÑ][a-záéíóúñ]+(?: [A-ZÁÉÍÓÚÑ][a-záéíóúñ]+)*)\\\",\\n        r\\\"autor: ([A-ZÁÉÍÓÚÑ][a-záéíóúñ]+(?: [A-ZÁÉÍÓÚÑ][a-záéíóúñ]+)*)\\\",\\n        r\\\"escrito por:? ([A-ZÁÉÍÓÚÑ][a-záéíóúñ]+(?: [A-ZÁÉÍÓÚÑ][a-záéíóúñ]+)*)\\\"\\n    ]\\n\\n    for patron in patrones:\\n        match = re.search(patron, texto, re.IGNORECASE)\\n        if match:\\n            return match.group(1)\\n\\n    return \\\"Autor desconocido\\\"\\n\\n```\",\"title\":\"-src_classifier.py\",\"tags\":\"Python -src_classifier.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"modified\":\"20250423140805077\",\"tmap.id\":\"0006eb35-1bef-4773-b2bf-e813c30cb191\"},{\"created\":\"20250422211125720\",\"text\":\"## [[Tags]]\\n[[Python]]\\n\\n```python\\n# src/cleaner.py\\n\\nimport re\\nimport unicodedata\\n\\n# 🔧 Lista de símbolos decorativos considerados como \\\"ruido visual\\\"\\nSIMBOLOS_RUIDO = {'----', '***', '///', '...', '__', '==', '~~~', '====='}\\n\\n# 🔹 1. Normaliza caracteres Unicode a forma NFC\\ndef normalizar_unicode(texto):\\n    \\\"\\\"\\\"\\n    Normaliza caracteres a una forma estándar para evitar errores de codificación.\\n    \\\"\\\"\\\"\\n    return unicodedata.normalize(\\\"NFC\\\", texto)\\n\\n# 🔹 2. Elimina líneas vacías o compuestas solo por símbolos decorativos\\ndef eliminar_lineas_ruido(texto):\\n    \\\"\\\"\\\"\\n    Filtra líneas que son solo símbolos, guiones, etc.\\n    \\\"\\\"\\\"\\n    lineas_limpias = []\\n    for linea in texto.split('\\\\n'):\\n        strip = linea.strip()\\n        if not strip:\\n            continue\\n        if strip in SIMBOLOS_RUIDO:\\n            continue\\n        if re.match(r'^[\\\\-\\\\*\\\\.\\\\|\\\\\\\\_=~]{3,}$', strip):\\n            continue\\n        if len(strip) < 3 and not strip.isalpha():\\n            continue\\n        lineas_limpias.append(linea)\\n    return '\\\\n'.join(lineas_limpias)\\n\\n# 🔹 3. Heurística básica para detectar encabezados o títulos\\ndef detectar_encabezado(linea):\\n    \\\"\\\"\\\"\\n    Detecta si una línea es un encabezado usando heurísticas comunes.\\n    \\\"\\\"\\\"\\n    if linea.isupper() and len(linea.split()) < 10:\\n        return True\\n    if re.match(r'^\\\\d+(\\\\.\\\\d+)*\\\\s+', linea):\\n        return True\\n    if re.search(r'\\\\b(Resumen|Introducción|Conclusión|Referencias)\\\\b', linea, re.IGNORECASE):\\n        return True\\n    return False\\n\\n# 🔹 4. Marca líneas detectadas como encabezados con sintaxis Markdown (##)\\ndef agregar_markdown_headers(texto):\\n    \\\"\\\"\\\"\\n    Convierte encabezados detectados en encabezados Markdown (nivel 2).\\n    \\\"\\\"\\\"\\n    lineas = texto.split('\\\\n')\\n    nuevas = []\\n    for linea in lineas:\\n        if detectar_encabezado(linea):\\n            nuevas.append(f\\\"## {linea.strip()}\\\")\\n        else:\\n            nuevas.append(linea)\\n    return '\\\\n'.join(nuevas)\\n\\n# 🔹 5. Limpieza general: saltos, espacios y saltos semánticos entre párrafos\\ndef limpiar_texto(texto):\\n    \\\"\\\"\\\"\\n    Elimina saltos de línea innecesarios, normaliza espacios y mejora legibilidad.\\n    \\\"\\\"\\\"\\n    texto = texto.replace('\\\\r\\\\n', '\\\\n')\\n    texto = re.sub(r'(?<=[a-z0-9\\\\.\\\\)])\\\\n(?=[A-Z])', '\\\\n\\\\n', texto)  # salto entre frases conectadas\\n    texto = re.sub(r'\\\\n{3,}', '\\\\n\\\\n', texto)  # máximo 2 saltos seguidos\\n    texto = re.sub(r'[ \\\\t]+', ' ', texto)\\n    texto = re.sub(r' *\\\\n *', '\\\\n', texto)\\n    return texto.strip()\\n\\n# 🔹 6. Pipeline principal de limpieza, configurable por flags\\ndef limpiar_texto_completo(texto, modo_md=False, filtrar_ruido=True):\\n    \\\"\\\"\\\"\\n    Ejecuta la limpieza completa con opciones para markdown y filtrado de ruido.\\n\\n    Args:\\n        texto (str): El texto a limpiar.\\n        modo_md (bool): Si True, convierte encabezados en ## estilo Markdown.\\n        filtrar_ruido (bool): Si True, elimina líneas de bajo valor visual.\\n\\n    Returns:\\n        str: El texto limpio y procesado.\\n    \\\"\\\"\\\"\\n    texto = normalizar_unicode(texto)\\n    if filtrar_ruido:\\n        texto = eliminar_lineas_ruido(texto)\\n    texto = limpiar_texto(texto)\\n    if modo_md:\\n        texto = agregar_markdown_headers(texto)\\n    return texto\\n\\n```\",\"title\":\"-src_cleaner.py\",\"tags\":\"Python -src_cleaner.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"modified\":\"20250423140815691\",\"tmap.id\":\"3fd80cf2-e89f-4ad4-867b-32f95d0e2fd3\"},{\"created\":\"20250422211125723\",\"text\":\"## [[Tags]]\\n[[Python]]\\n\\n```python\\n# src/exporter.py\\n\\nfrom pathlib import Path\\nimport json\\nimport re\\n\\n# ────────────────────────────────────────────────\\n# 📂 Carpeta de salida configurable (por ahora fija)\\n# ────────────────────────────────────────────────\\nOUTPUT_DIR = Path(\\\"output\\\")\\nOUTPUT_DIR.mkdir(exist_ok=True)\\n\\n# ────────────────────────────────────────────────\\n# 📤 Exportador principal\\n# ────────────────────────────────────────────────\\ndef exportar_archivos(tipo: str, nombre_base: str, texto: str, categoria: str, dewey: str, autores: str = \\\"\\\"):\\n    \\\"\\\"\\\"\\n    Exporta el texto en .txt, .md y .jsonl con nombre estructurado:\\n    tipo_dewey_categoria_nombre_autores\\n    \\\"\\\"\\\"\\n    if not texto or not tipo or not categoria or not nombre_base:\\n        raise ValueError(\\\"Faltan datos requeridos para exportar.\\\")\\n\\n    tipo = limpiar_nombre(tipo)\\n    categoria = limpiar_nombre(categoria)\\n    nombre_base = limpiar_nombre(nombre_base)\\n    autores = limpiar_nombre(autores)\\n\\n    nombre_final = f\\\"{tipo}_{dewey}_{categoria}_{nombre_base}\\\"\\n    if autores:\\n        nombre_final += f\\\"_{autores}\\\"\\n\\n    guardar_txt(nombre_final, texto)\\n    guardar_md(nombre_final, texto, categoria, dewey)\\n    guardar_jsonl(nombre_final, texto)\\n\\n\\n# ────────────────────────────────────────────────\\n# 📄 Exportar .txt\\n# ────────────────────────────────────────────────\\ndef guardar_txt(nombre_base: str, texto: str):\\n    ruta = OUTPUT_DIR / f\\\"{nombre_base}.txt\\\"\\n    with open(ruta, \\\"w\\\", encoding=\\\"utf-8\\\") as f:\\n        f.write(texto)\\n\\n\\n# ────────────────────────────────────────────────\\n# 📝 Exportar .md con metadatos\\n# ────────────────────────────────────────────────\\ndef guardar_md(nombre_base: str, texto: str, categoria: str, dewey: str):\\n    ruta = OUTPUT_DIR / f\\\"{nombre_base}.md\\\"\\n    encabezado = f\\\"\\\"\\\"---\\ncategoria: {categoria.replace(\\\"_\\\", \\\" \\\")}\\ndewey: {dewey}\\n---\\n\\n\\\"\\\"\\\"\\n    with open(ruta, \\\"w\\\", encoding=\\\"utf-8\\\") as f:\\n        f.write(encabezado + texto)\\n\\n\\n# ────────────────────────────────────────────────\\n# 🔣 Exportar .jsonl por párrafo\\n# ────────────────────────────────────────────────\\ndef guardar_jsonl(nombre_base: str, texto: str):\\n    ruta = OUTPUT_DIR / f\\\"{nombre_base}.jsonl\\\"\\n    parrafos = [p.strip() for p in texto.split(\\\"\\\\n\\\\n\\\") if p.strip()]\\n    with open(ruta, \\\"w\\\", encoding=\\\"utf-8\\\") as f:\\n        for p in parrafos:\\n            json_line = json.dumps({\\\"paragraph\\\": p}, ensure_ascii=False)\\n            f.write(json_line + \\\"\\\\n\\\")\\n\\n\\n# ────────────────────────────────────────────────\\n# 🧼 Limpiar nombres de archivo\\n# ────────────────────────────────────────────────\\ndef limpiar_nombre(nombre: str) -> str:\\n    \\\"\\\"\\\"\\n    Limpia caracteres no válidos y convierte a snake_case amigable.\\n    \\\"\\\"\\\"\\n    nombre = re.sub(r\\\"[^\\\\w\\\\s-]\\\", \\\"\\\", nombre)\\n    nombre = re.sub(r\\\"[\\\\s-]+\\\", \\\"_\\\", nombre)\\n    return nombre.strip().lower()\\n\\n```\",\"title\":\"-src_exporter.py\",\"tags\":\"Python -src_exporter.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"modified\":\"20250423140836087\",\"tmap.id\":\"d394668f-9772-4ba9-94ce-36f2a6d23e26\"},{\"created\":\"20250422211125724\",\"text\":\"## [[Tags]]\\n[[Python]]\\n\\n```python\\n# src/logger.py\\n\\n\\\"\\\"\\\"\\n📘 Logger persistente para Dewey Pipeline\\nRegistra eventos con formato estructurado (.log y .jsonl) y visual (emoji).\\nCompatible con trazabilidad por corrida e integración futura.\\n\\n🧱 Estructura del JSON generado (1 línea por evento):\\n{\\n    \\\"timestamp\\\": \\\"2025-04-10T15:42:21.543Z\\\",\\n    \\\"ejecucion\\\": \\\"c78fbccbeed045b5919e8a7e79dd4d73\\\",\\n    \\\"evento\\\": \\\"clasificado\\\",\\n    \\\"archivo\\\": \\\"input/Libro.pdf\\\",\\n    \\\"categoria\\\": \\\"Tecnología\\\",\\n    \\\"dewey\\\": \\\"600\\\",\\n    \\\"nivel\\\": \\\"INFO\\\"\\n}\\n\\\"\\\"\\\"\\n\\nimport os\\nimport json\\nimport uuid\\nfrom datetime import datetime\\nfrom pathlib import Path\\nfrom loguru import logger\\n\\n# ─────────────────────────────────────────────────────────────\\n# 🌍 Diccionario multilenguaje con emojis\\n# ─────────────────────────────────────────────────────────────\\nMENSAJES = {\\n    \\\"procesar\\\": {\\n        \\\"es\\\": \\\"📘 Procesando: {archivo}\\\",\\n        \\\"en\\\": \\\"📘 Processing: {archivo}\\\"\\n    },\\n    \\\"clasificado\\\": {\\n        \\\"es\\\": \\\"📖 Clasificado como: {categoria} ({dewey})\\\",\\n        \\\"en\\\": \\\"📖 Classified as: {categoria} ({dewey})\\\"\\n    },\\n    \\\"export_ok\\\": {\\n        \\\"es\\\": \\\"✔️ Exportación completa: [{archivo}]\\\",\\n        \\\"en\\\": \\\"✔️ Export completed: [{archivo}]\\\"\\n    },\\n    \\\"warning_meta\\\": {\\n        \\\"es\\\": \\\"⚠️ Metadatos incompletos o inválidos\\\",\\n        \\\"en\\\": \\\"⚠️ Incomplete or invalid metadata\\\"\\n    },\\n    \\\"warning_texto_corto\\\": {\\n        \\\"es\\\": \\\"⚠️ Texto extraído demasiado corto. Archivo omitido.\\\",\\n        \\\"en\\\": \\\"⚠️ Extracted text too short. Skipping file.\\\"\\n    },\\n    \\\"error_parse\\\": {\\n        \\\"es\\\": \\\"❌ Error procesando archivo: {archivo}\\\",\\n        \\\"en\\\": \\\"❌ Error processing file: {archivo}\\\"\\n    },\\n    \\\"archivo_inaccesible\\\": {\\n        \\\"es\\\": \\\"❌ Archivo inaccesible o corrupto: {archivo}\\\",\\n        \\\"en\\\": \\\"❌ Unreadable or corrupt file: {archivo}\\\"\\n    }\\n}\\n\\n# ─────────────────────────────────────────────────────────────\\n# ⚙️ Configuración global y persistencia\\n# ─────────────────────────────────────────────────────────────\\nLANG = os.getenv(\\\"LANG\\\", \\\"es\\\")\\nLOG_LEVEL = os.getenv(\\\"LOG_LEVEL\\\", \\\"INFO\\\").upper()\\nEXECUTION_ID = os.getenv(\\\"EXECUTION_ID\\\", uuid.uuid4().hex)\\n\\nLOGS_DIR = Path(\\\"output/logs\\\")\\nLOGS_DIR.mkdir(parents=True, exist_ok=True)\\n\\ntimestamp = datetime.now().strftime(\\\"%Y-%m-%d_%H-%M-%S\\\")\\nglobal_log_txt = LOGS_DIR / f\\\"run_{timestamp}.log\\\"\\nglobal_log_jsonl = LOGS_DIR / f\\\"run_{timestamp}.jsonl\\\"\\n\\nlogger.remove()\\nlogger.add(global_log_txt, level=LOG_LEVEL, format=\\\"{time} | {level} | {message}\\\")\\nlogger.add(global_log_jsonl, serialize=True, level=LOG_LEVEL)\\n\\n# ─────────────────────────────────────────────────────────────\\n# 🧩 Función principal de logging\\n# ─────────────────────────────────────────────────────────────\\ndef log_evento(evento: str, archivo: str = \\\"\\\", categoria: str = \\\"\\\", dewey: str = \\\"\\\", nivel: str = \\\"INFO\\\") -> str:\\n    global LANG\\n    LANG = os.getenv(\\\"LANG\\\", \\\"es\\\")\\n    idioma = MENSAJES.get(evento, {}).get(LANG, evento)\\n    mensaje = idioma.format(archivo=archivo, categoria=categoria, dewey=dewey)\\n    \\n    # Visual amigable (terminal)\\n    print(mensaje)\\n\\n    # Entrada estructurada\\n    log_data = {\\n        \\\"timestamp\\\": datetime.now().isoformat(),\\n        \\\"ejecucion\\\": EXECUTION_ID,\\n        \\\"evento\\\": evento,\\n        \\\"archivo\\\": archivo,\\n        \\\"categoria\\\": categoria,\\n        \\\"dewey\\\": dewey,\\n        \\\"nivel\\\": nivel.upper(),\\n    }\\n\\n    # Log .log plano\\n    try:\\n        logger.log(nivel.upper(), mensaje)\\n    except Exception as e:\\n        print(f\\\"❌ Error escribiendo en log plano: {e}\\\")\\n\\n    # Log .jsonl\\n    try:\\n        with open(global_log_jsonl, \\\"a\\\", encoding=\\\"utf-8\\\") as f:\\n            f.write(json.dumps(log_data) + \\\"\\\\n\\\")\\n    except Exception as e:\\n        print(f\\\"❌ Error escribiendo en log JSONL: {e}\\\")\\n\\n    # Log individual por archivo\\n    if archivo:\\n        try:\\n            archivo_log = LOGS_DIR / f\\\"{Path(archivo).stem}.log\\\"\\n            with open(archivo_log, \\\"a\\\", encoding=\\\"utf-8\\\") as f:\\n                f.write(f\\\"{log_data['timestamp']} | {evento.upper()} | {mensaje}\\\\n\\\")\\n        except Exception as e:\\n            print(f\\\"❌ Error escribiendo log individual: {e}\\\")\\n\\n    return mensaje\\n\\n```\",\"title\":\"-src_logger.py\",\"tags\":\"Python -src_logger.py -tests_test_logger.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"modified\":\"20250423140844333\",\"tmap.id\":\"1153e26c-92b9-4517-8225-41283be527c2\"},{\"created\":\"20250422211125726\",\"text\":\"## [[Tags]]\\n[[Python]]\\n\\n```python\\n# src/parser.py\\n\\n\\\"\\\"\\\"\\nEste módulo se encarga de extraer texto de archivos PDF usando la librería más adecuada\\nsegún su estructura. Integra PyMuPDF para PDFs simples y pdfplumber para casos complejos.\\nTambién filtra bloques sospechosos como fórmulas matemáticas o imágenes.\\n\\\"\\\"\\\"\\n\\nfrom .cleaner import limpiar_texto\\nfrom .utils import es_pdf_complejo, contiene_formula\\n\\ndef extract_text(ruta_pdf):\\n    \\\"\\\"\\\"\\n    Punto de entrada principal del parser. Decide el extractor adecuado\\n    y retorna el texto limpio y usable.\\n    \\\"\\\"\\\"\\n    if es_pdf_complejo(ruta_pdf):\\n        texto_crudo = extract_with_pdfplumber(ruta_pdf)\\n    else:\\n        texto_crudo = extract_with_pymupdf(ruta_pdf)\\n\\n    return limpiar_texto(texto_crudo)\\n\\n\\ndef extract_with_pymupdf(ruta_pdf):\\n    \\\"\\\"\\\"\\n    Extrae texto con PyMuPDF, ideal para PDFs simples y rápidos.\\n    Filtra bloques vacíos y con símbolos sospechosos.\\n    \\\"\\\"\\\"\\n    import fitz\\n    texto = []\\n    doc = fitz.open(ruta_pdf)\\n\\n    for page in doc:\\n        contenido = page.get_text()\\n        if contiene_formula(contenido):\\n            continue\\n        texto.append(contenido)\\n\\n    doc.close()\\n    return \\\"\\\\n\\\".join(texto)\\n\\n\\ndef extract_with_pdfplumber(ruta_pdf):\\n    \\\"\\\"\\\"\\n    Extrae texto con pdfplumber, más robusto para PDFs con múltiples columnas o tablas.\\n    También filtra fórmulas y bloques sospechosos.\\n    \\\"\\\"\\\"\\n    import pdfplumber\\n    texto = []\\n\\n    with pdfplumber.open(ruta_pdf) as pdf:\\n        for page in pdf.pages:\\n            contenido = page.extract_text()\\n            if contiene_formula(contenido):\\n                continue\\n            texto.append(contenido)\\n\\n    return \\\"\\\\n\\\".join(texto)\\n\\n```\",\"title\":\"-src_parser.py\",\"tags\":\"Python -src_parser.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"modified\":\"20250423140851833\",\"tmap.id\":\"5e57be57-777f-4fae-be8b-4c13963ff404\"},{\"created\":\"20250422211125728\",\"text\":\"## [[Tags]]\\n[[Python]]\\n\\n```python\\n\\\"\\\"\\\"\\nFunciones auxiliares para soporte al parser:\\n- Evaluación de complejidad estructural de un PDF\\n- Detección de fórmulas matemáticas u objetos sospechosos\\n- Normalización de texto para búsqueda semántica\\n\\\"\\\"\\\"\\n\\nfrom unidecode import unidecode\\nimport fitz\\nimport re\\n\\ndef es_pdf_complejo(ruta_pdf, max_paginas=3, umbral=8):\\n    \\\"\\\"\\\"\\n    Determina si un PDF es complejo por su estructura visual:\\n    - Muchos bloques (columnas, tablas, secciones)\\n    - O bien, sin bloques (imagen o escaneado)\\n\\n    Esto permite activar estrategias especiales como OCR o fallback.\\n\\n    Retorna:\\n    - True si el PDF es complejo por layout o ausencia de texto\\n    \\\"\\\"\\\"\\n    doc = fitz.open(ruta_pdf)\\n    paginas = min(len(doc), max_paginas)\\n    total_bloques = 0\\n\\n    for i in range(paginas):\\n        bloques = doc[i].get_text(\\\"blocks\\\")\\n        total_bloques += len(bloques)\\n\\n    doc.close()\\n\\n    if total_bloques == 0:\\n        return True  # Escaneado o sin texto detectable\\n\\n    promedio = total_bloques / paginas\\n    return promedio > umbral\\n\\n\\ndef contiene_formula(texto):\\n    \\\"\\\"\\\"\\n    Detecta líneas con alta densidad de símbolos matemáticos.\\n    También filtra entradas muy cortas (probables imágenes).\\n    \\\"\\\"\\\"\\n    if not texto or len(texto.strip()) < 10:\\n        return True\\n\\n    simbolos = re.findall(r\\\"[^a-zA-Z0-9\\\\s]\\\", texto)\\n    proporcion = len(simbolos) / len(texto)\\n\\n    return proporcion > 0.3\\n\\n\\ndef normalizar_texto(texto: str) -> str:\\n    \\\"\\\"\\\"\\n    Convierte a minúsculas y remueve acentos. Ideal para matching.\\n    \\\"\\\"\\\"\\n    return unidecode(texto.lower())\\n\\n```\",\"title\":\"-src_utils.py\",\"tags\":\"Python -src_utils.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"modified\":\"20250423140858012\",\"tmap.id\":\"1854b713-2a44-498c-a2af-80c73735494c\"},{\"created\":\"20250422211125730\",\"text\":\"## [[Tags]]\\n[[Python]]\\n\\n```python\\n# src/validator.py\\n\\nfrom typing import Tuple, Dict\\n\\ndef validar_texto_no_vacio(texto: str) -> Tuple[bool, str]:\\n    if not texto or len(texto.strip()) < 10:\\n        return False, \\\"texto vacío o invisible\\\"\\n    return True, \\\"\\\"\\n\\ndef validar_longitud(texto: str, umbral_palabras: int = 150) -> Tuple[bool, str]:\\n    palabras = texto.split()\\n    if len(palabras) < umbral_palabras:\\n        return False, f\\\"texto muy corto ({len(palabras)} palabras)\\\"\\n    return True, \\\"\\\"\\n\\ndef validar_titulo(titulo: str) -> Tuple[bool, str]:\\n    if not titulo or titulo.strip().lower() in [\\\"untitled\\\", \\\"document\\\", \\\"none\\\", \\\"\\\"]:\\n        return False, \\\"título genérico o vacío\\\"\\n    if len(titulo.strip()) < 15:\\n        return False, \\\"título demasiado corto\\\"\\n    return True, \\\"\\\"\\n\\ndef validar_autor(autor: str) -> Tuple[bool, str]:\\n    if not autor:\\n        return False, \\\"autor no presente\\\"\\n    blacklist = [\\\"unknown\\\", \\\"anonymous\\\", \\\"n/a\\\", \\\"-\\\", \\\"\\\"]\\n    if autor.strip().lower() in blacklist:\\n        return False, f\\\"autor inválido: {autor.strip()}\\\"\\n    return True, \\\"\\\"\\n\\ndef validar_documento(texto: str, titulo: str = \\\"\\\", autor: str = \\\"\\\") -> Tuple[bool, Dict]:\\n    \\\"\\\"\\\"\\n    Evalúa criterios mínimos antes de exportar.\\n    Incluye validación de texto, longitud, título y autor.\\n    \\\"\\\"\\\"\\n    errores = []\\n\\n    for funcion in [validar_texto_no_vacio, validar_longitud]:\\n        ok, razon = funcion(texto)\\n        if not ok:\\n            errores.append(razon)\\n\\n    for funcion, valor in [(validar_titulo, titulo), (validar_autor, autor)]:\\n        ok, razon = funcion(valor)\\n        if not ok:\\n            errores.append(f\\\"(warning) {razon}\\\")\\n\\n    if errores:\\n        return False, {\\\"razones\\\": errores}\\n\\n    return True, {}\\n\\n```\",\"title\":\"-src_validator.py\",\"tags\":\"Python -src_validator.py [[--- Codigo]]\",\"type\":\"text/markdown\",\"modified\":\"20250423140905975\",\"tmap.id\":\"d5082ca8-7e09-4e15-ab12-92d540ba74d4\"},{\"created\":\"20250422211125733\",\"text\":\"## [[Tags]]\\n[[Python]]\\n\\n```python\\n# tests/test_classifier.py\\n\\nimport sys\\nfrom pathlib import Path\\nfrom src.classifier import clasificar_tematica, extraer_titulo, extraer_autor, clasificar_documento\\n\\n# 🔧 Asegura que src/ sea visible desde cualquier entorno\\nsys.path.append(str(Path(__file__).resolve().parents[1]))\\n\\ndef test_clasificacion_tematica_naturales():\\n    texto = \\\"Esta investigación explora conceptos clave de la biología y física cuántica.\\\"\\n    categoria, codigo = clasificar_tematica(texto)\\n    assert categoria == \\\"Natural Sciences and Mathematics\\\"\\n    assert codigo == \\\"500\\\"\\n\\ndef test_extraer_titulo_simple():\\n    texto = \\\"\\\"\\\"Aprendizaje profundo y representación del conocimiento\\nAutor: Diego Beltrán\\nResumen: Este estudio explora técnicas de representación...\\\"\\\"\\\"\\n    titulo = extraer_titulo(texto)\\n    assert titulo.startswith(\\\"Aprendizaje profundo\\\")\\n\\ndef test_extraer_autor_formato_es():\\n    texto = \\\"Autor: María José Ramírez\\\"\\n    autor = extraer_autor(texto)\\n    assert autor == \\\"María José Ramírez\\\"\\n\\ndef test_extraer_autor_formato_en():\\n    texto = \\\"Written by Alexander Hamilton\\\"\\n    autor = extraer_autor(texto)\\n    assert autor == \\\"Alexander Hamilton\\\"\\n\\ndef test_clasificacion_completa():\\n    texto = \\\"\\\"\\\"Machine learning techniques in medicine\\nBy Ana Gómez\\nThis paper discusses supervised learning and applications in diagnostics.\\\"\\\"\\\"\\n    resultado = clasificar_documento(texto)\\n\\n    assert resultado[\\\"categoria\\\"] == \\\"Technology\\\"\\n    assert resultado[\\\"dewey\\\"] == \\\"600\\\"\\n    assert resultado[\\\"titulo\\\"].startswith(\\\"Machine learning\\\")\\n    assert resultado[\\\"autor\\\"] == \\\"Ana Gómez\\\"\\n\\n```\",\"title\":\"-tests_test_classifier.py\",\"tags\":\"Python -tests_test_classifier.py [[--- Codigo]] [[--🧪 tests/]]\",\"type\":\"text/markdown\",\"modified\":\"20250423151611167\",\"tmap.id\":\"4d8c578f-b72e-43ac-b908-d604fc01ae9c\"},{\"created\":\"20250422211125736\",\"text\":\"## [[Tags]]\\n[[Python]]\\n\\n```python\\n# tests/test_cleaner.py\\nimport sys\\nfrom pathlib import Path\\nfrom src.cleaner import (\\n    limpiar_texto,\\n    normalizar_unicode,\\n    eliminar_lineas_ruido,\\n    limpiar_texto_completo,\\n)\\n\\n# 🔧 Asegura que src/ sea visible desde cualquier entorno\\nsys.path.append(str(Path(__file__).resolve().parents[1]))\\n\\n# 🔹 Test 1: Limpieza básica de saltos y espacios\\ndef test_limpieza_espacios_y_saltos():\\n    texto = \\\"Este es un texto   con  espacios  \\\\n y saltos \\\\n\\\\n\\\\n innecesarios.\\\"\\n    resultado = limpiar_texto(texto)\\n    assert \\\"\\\\n\\\\n\\\" in resultado\\n    assert \\\"  \\\" not in resultado\\n    assert resultado.startswith(\\\"Este es un texto\\\")\\n\\n# 🔹 Test 2: Normalización Unicode de caracteres acentuados\\ndef test_normalizacion_unicode():\\n    texto = \\\"Cafe\\\\u0301\\\"  # \\\"Café\\\" descompuesto (C + acento)\\n    resultado = normalizar_unicode(texto)\\n    assert resultado == \\\"Café\\\"\\n\\n# 🔹 Test 3: Eliminación de líneas de símbolos decorativos\\ndef test_elimina_lineas_de_ruido():\\n    texto = \\\"Resumen\\\\n****\\\\nEste es el contenido\\\\n...\\\\n\\\"\\n    resultado = eliminar_lineas_ruido(texto)\\n    assert \\\"****\\\" not in resultado\\n    assert \\\"...\\\" not in resultado\\n    assert \\\"Resumen\\\" in resultado\\n    assert \\\"contenido\\\" in resultado\\n\\n# 🔹 Test 4: Encabezados convertidos a Markdown si modo_md=True\\ndef test_limpieza_completa_con_markdown():\\n    texto = \\\"1. Introducción\\\\n\\\\nEste trabajo estudia...\\\\n\\\\nConclusión\\\"\\n    resultado = limpiar_texto_completo(texto, modo_md=True)\\n    assert \\\"## 1. Introducción\\\" in resultado\\n    assert \\\"## Conclusión\\\" in resultado\\n    assert \\\"estudia\\\" in resultado\\n\\n# 🔹 Test 5: Texto técnico simulado con fórmula y encabezado\\ndef test_texto_tecnico_simulado_formula():\\n    texto = \\\"\\\"\\\"\\n    B. 519.2 Probability and Statistics, the Science of Uncertainty\\n    =====================\\n    Let X ~ N(0, 1) be a standard normal random variable.\\n\\n    Then: E[X] = 0   and    Var(X) = 1\\n\\n    ***\\n    \\\"\\\"\\\"\\n\\n    resultado = limpiar_texto_completo(texto, modo_md=True)\\n    assert \\\"519.2 Probability\\\" in resultado\\n    assert \\\"Let X ~ N(0, 1)\\\" in resultado\\n    assert \\\"E[X] = 0\\\" in resultado\\n    assert \\\"***\\\" not in resultado\\n    assert \\\"=====\\\" not in resultado\\n\\n```\",\"title\":\"-tests_test_cleaner.py\",\"tags\":\"Python -tests_test_cleaner.py [[--- Codigo]] [[--🧪 tests/]]\",\"type\":\"text/markdown\",\"modified\":\"20250423151611168\",\"tmap.id\":\"ce8da90b-3d58-4ff1-969a-35441764903f\"},{\"created\":\"20250422211125738\",\"text\":\"## [[Tags]]\\n[[Python]]\\n\\n```python\\n# tests/test_exporter.py\\nimport sys\\nfrom pathlib import Path\\nfrom pathlib import Path\\nfrom src.exporter import exportar_archivos, limpiar_nombre\\n\\n# 🔧 Asegura que src/ sea visible desde cualquier entorno\\nsys.path.append(str(Path(__file__).resolve().parents[1]))\\n\\ndef test_exportar_archivos_crea_todos_los_formatos():\\n    tipo = \\\"Essay\\\"\\n    nombre = \\\"Prueba de Exportación\\\"\\n    texto = \\\"Párrafo 1.\\\\n\\\\nPárrafo 2.\\\"\\n    categoria = \\\"Philosophy and Psychology\\\"\\n    dewey = \\\"100\\\"\\n    autores = \\\"Jane Doe\\\"\\n\\n    # Construir nombre_base con la misma lógica del exporter\\n    nombre_base = \\\"_\\\".join([\\n        limpiar_nombre(tipo),\\n        dewey,\\n        limpiar_nombre(categoria),\\n        limpiar_nombre(nombre),\\n        limpiar_nombre(autores)\\n    ])\\n\\n    output_dir = Path(\\\"output\\\")\\n    extensiones = [\\\".txt\\\", \\\".md\\\", \\\".jsonl\\\"]\\n\\n    exportar_archivos(tipo, nombre, texto, categoria, dewey, autores)\\n\\n    for ext in extensiones:\\n        path = output_dir / f\\\"{nombre_base}{ext}\\\"\\n        assert path.exists(), f\\\"Falta el archivo: {path}\\\"\\n        assert path.stat().st_size > 0, f\\\"Archivo vacío: {path}\\\"\\n        path.unlink()  # Limpieza\\n\\n```\",\"title\":\"-tests_test_exporter.py\",\"tags\":\"Python -tests_test_exporter.py [[--- Codigo]] [[--🧪 tests/]]\",\"type\":\"text/markdown\",\"modified\":\"20250423151611169\",\"tmap.id\":\"089298ad-58b2-4b48-8c2f-681c9d9d0937\"},{\"created\":\"20250422211125738\",\"text\":\"## [[Tags]]\\n[[Python]]\\n\\n```python\\n# tests/test_logger.py\\n\\nimport os\\nimport json\\nimport pytest\\nimport sys\\nfrom pathlib import Path\\nfrom pathlib import Path\\nfrom src.logger import log_evento\\n\\n# 🔧 Asegura que src/ sea visible desde cualquier entorno\\nsys.path.append(str(Path(__file__).resolve().parents[1]))\\n\\n# 🌍 Forzar idioma en pruebas\\nos.environ[\\\"LANG\\\"] = \\\"es\\\"\\n\\n@pytest.fixture\\ndef ruta_dummy(tmp_path):\\n    archivo = tmp_path / \\\"demo_test.pdf\\\"\\n    archivo.write_text(\\\"Contenido simulado para logging.\\\")\\n    return str(archivo)\\n\\ndef test_log_evento_clasificado_en_consola_y_jsonl(ruta_dummy):\\n    mensaje = log_evento(\\\"clasificado\\\", archivo=ruta_dummy, categoria=\\\"Ciencias\\\", dewey=\\\"500\\\")\\n    assert \\\"📖 Clasificado como: Ciencias (500)\\\" in mensaje\\n\\n    # ✅ Persistencia .jsonl\\n    logs_dir = Path(\\\"output/logs\\\")\\n    jsonl_logs = list(logs_dir.glob(\\\"run_*.jsonl\\\"))\\n    assert jsonl_logs, \\\"No se generó archivo .jsonl\\\"\\n\\n    eventos = []\\n    with open(jsonl_logs[-1], encoding=\\\"utf-8\\\") as f:\\n        for line in f:\\n            try:\\n                data = json.loads(line)\\n                if data.get(\\\"evento\\\") == \\\"clasificado\\\":\\n                    eventos.append(data)\\n            except json.JSONDecodeError:\\n                continue  # Línea corrupta o mal formada\\n\\n    assert eventos, \\\"No se encontró el evento 'clasificado'\\\"\\n    assert eventos[-1][\\\"categoria\\\"] == \\\"Ciencias\\\"\\n    assert eventos[-1][\\\"dewey\\\"] == \\\"500\\\"\\n    assert eventos[-1][\\\"nivel\\\"] == \\\"INFO\\\"\\n\\n\\n\\ndef test_log_warning_texto_corto(ruta_dummy):\\n    mensaje = log_evento(\\\"warning_texto_corto\\\", archivo=ruta_dummy, nivel=\\\"WARNING\\\")\\n    assert \\\"⚠️ Texto extraído demasiado corto\\\" in mensaje\\n\\ndef test_log_error_parse(ruta_dummy):\\n    mensaje = log_evento(\\\"error_parse\\\", archivo=ruta_dummy, nivel=\\\"ERROR\\\")\\n    assert \\\"❌ Error procesando archivo\\\" in mensaje\\n\\ndef test_log_individual_por_pdf(ruta_dummy):\\n    log_evento(\\\"procesar\\\", archivo=ruta_dummy)\\n\\n    logs_dir = Path(\\\"output/logs\\\")\\n    nombre_pdf = Path(ruta_dummy).stem\\n    archivo_log = logs_dir / f\\\"{nombre_pdf}.log\\\"\\n\\n    assert archivo_log.exists(), f\\\"No se creó log individual: {archivo_log}\\\"\\n\\n    with open(archivo_log, encoding=\\\"utf-8\\\") as f:\\n        contenido = f.read()\\n        assert \\\"📘\\\" in contenido or \\\"PROCESAR\\\" in contenido.upper()\\n\\n```\",\"title\":\"-tests_test_logger.py\",\"tags\":\"Python -tests_test_logger.py -src_logger.py [[--- Codigo]] [[--🧪 tests/]]\",\"type\":\"text/markdown\",\"modified\":\"20250423151611169\",\"tmap.id\":\"521faf44-f23f-442b-9b09-85bf0d2905a5\"},{\"created\":\"20250422211125738\",\"text\":\"## [[Tags]]\\n[[Python]]\\n\\n```python\\n# tests/test_parser.py\\nimport sys\\nfrom pathlib import Path\\nfrom src.parser import extract_text\\n\\n# 🔧 Asegura que src/ sea visible desde cualquier entorno\\nsys.path.append(str(Path(__file__).resolve().parents[1]))\\n\\n\\ndef test_extraccion_pdf_simple():\\n    texto = extract_text(\\\"tests/fixtures/pdf_simple.pdf\\\")\\n    assert len(texto) > 100  # Texto mínimo esperado\\n\\ndef test_descarta_formula():\\n    texto = extract_text(\\\"tests/fixtures/pdf_formula.pdf\\\")\\n    assert \\\"∫\\\" not in texto\\n\\n```\",\"title\":\"-tests_test_parser.py\",\"tags\":\"Python -tests_test_parser.py [[--- Codigo]] [[--🧪 tests/]]\",\"type\":\"text/markdown\",\"modified\":\"20250423153252511\",\"tmap.id\":\"b539f66e-9c34-450b-b79c-f78586ef5449\"},{\"created\":\"20250422211125744\",\"text\":\"## [[Tags]]\\n[[Python]]\\n\\n```python\\n# tests\\\\test_utils.py\\n\\nimport sys\\nfrom pathlib import Path\\nfrom src.utils import es_pdf_complejo, contiene_formula, normalizar_texto\\n\\n# 🔧 Asegura que src/ sea visible desde cualquier entorno\\nsys.path.append(str(Path(__file__).resolve().parents[1]))\\n\\ndef test_es_pdf_complejo_true():\\n    # Este PDF tiene múltiples bloques → considerado complejo\\n    ruta = \\\"tests/fixtures/pdf_simple.pdf\\\"\\n    assert es_pdf_complejo(ruta, umbral=6) is True\\n\\ndef test_es_pdf_complejo_false():\\n    # Este PDF no tiene bloques → ahora también se considera complejo\\n    ruta = \\\"tests/fixtures/pdf_formula.pdf\\\"\\n    assert es_pdf_complejo(ruta, umbral=6) is True  # Cambiado a True\\n\\ndef test_contiene_formula_true():\\n    texto = \\\"∫(x) dx + ∑(n=1)^∞\\\"\\n    assert contiene_formula(texto) is True\\n\\ndef test_contiene_formula_false():\\n    texto = \\\"Este es un texto normal, sin símbolos matemáticos raros.\\\"\\n    assert contiene_formula(texto) is False\\n\\ndef test_normalizar_texto():\\n    texto = \\\"Árbol Con Raíces y NÚMEROS\\\"\\n    resultado = normalizar_texto(texto)\\n    assert resultado == \\\"arbol con raices y numeros\\\"\\n\\n```\",\"title\":\"-tests_test_utils.py\",\"tags\":\"Python -tests_test_utils.py [[--- Codigo]] [[--🧪 tests/]]\",\"type\":\"text/markdown\",\"modified\":\"20250423151611170\",\"tmap.id\":\"64800240-2373-444d-9500-7fb97f7fda9e\"},{\"created\":\"20250422211125746\",\"text\":\"## [[Tags]]\\n[[Python]]\\n\\n```python\\n# tests/test_validator.py\\n\\nimport pytest\\nimport sys\\nfrom pathlib import Path\\n\\n# 🔧 Asegura que src/ sea visible desde cualquier entorno\\nsys.path.append(str(Path(__file__).resolve().parents[1]))\\n\\nfrom src.validator import (\\n    validar_texto_no_vacio,\\n    validar_longitud,\\n    validar_titulo,\\n    validar_autor,\\n    validar_documento\\n)\\n\\n# ─────────────────────────────────────────────────────────────\\n# Test individuales\\n# ─────────────────────────────────────────────────────────────\\n\\ndef test_validar_texto_no_vacio():\\n    assert validar_texto_no_vacio(\\\"   \\\")[0] is False\\n    assert validar_texto_no_vacio(\\\"Contenido útil\\\")[0] is True\\n\\ndef test_validar_longitud():\\n    texto_corto = \\\"Esto es un texto corto.\\\"\\n    texto_largo = \\\" \\\".join([\\\"palabra\\\"] * 200)\\n    assert validar_longitud(texto_corto)[0] is False\\n    assert validar_longitud(texto_largo)[0] is True\\n\\ndef test_validar_titulo():\\n    assert validar_titulo(\\\"untitled\\\")[0] is False\\n    assert validar_titulo(\\\"\\\")[0] is False\\n    assert validar_titulo(\\\"Mi gran investigación sobre redes\\\")[0] is True\\n\\ndef test_validar_autor():\\n    assert validar_autor(\\\"anonymous\\\")[0] is False\\n    assert validar_autor(\\\"-\\\")[0] is False\\n    assert validar_autor(\\\"Jane Doe\\\")[0] is True\\n\\n# ─────────────────────────────────────────────────────────────\\n# Test de la función principal\\n# ─────────────────────────────────────────────────────────────\\n\\ndef test_validar_documento_valido():\\n    texto = \\\" \\\".join([\\\"contenido\\\"] * 200)\\n    titulo = \\\"Un estudio profundo sobre grafos semánticos\\\"\\n    autor = \\\"Dr. Ada Lovelace\\\"\\n    es_valido, info = validar_documento(texto, titulo, autor)\\n    assert es_valido is True\\n    assert info == {}\\n\\ndef test_validar_documento_invalido():\\n    texto = \\\"    \\\"  # vacío\\n    titulo = \\\"untitled\\\"\\n    autor = \\\"\\\"\\n    es_valido, info = validar_documento(texto, titulo, autor)\\n    assert es_valido is False\\n    assert \\\"texto vacío\\\" in \\\" \\\".join(info.get(\\\"razones\\\", []))\\n    assert any(\\\"autor\\\" in r for r in info.get(\\\"razones\\\", []))\\n\\n```\",\"title\":\"-tests_test_validator.py\",\"tags\":\"Python -tests_test_validator.py [[--- Codigo]] [[--🧪 tests/]]\",\"type\":\"text/markdown\",\"modified\":\"20250423151611171\",\"tmap.id\":\"2f3f26a9-7c1b-431a-8052-4888ab23863f\"},{\"created\":\"20250422004732796\",\"text\":\"# 🧬 Impacto Genético – Gen validator.py\\n\\n> Este documento representa el análisis completo del **gen validator.py**, introducido en la vuelta 2 del sistema helicoidal de OpenPages Pipeline. Este gen actúa como filtro evolutivo, asegurando que solo los documentos con metadatos y contenido significativos pasen a la etapa de exportación. Cada función se interpreta como una expresión funcional dentro del sistema genético computacional.\\n\\n---\\n\\n## 📂 Archivos Activados\\n\\n| Archivo | Cambio funcional | ∆r | ∆c |\\n|--------|------------------|----|----|\\n| `src/validator.py` | Nuevo gen con funciones puras de validación | +1 | +0.8 |\\n| `main.py` | Flujo modificado para usar `validator.py` como control de calidad | +1 | +0.5 |\\n| `logger.py` | Integrado para registrar fallas de validación | +0 | +0.4 |\\n| `exporter.py` | Ahora exporta solo si `validator` aprueba | +0 | +0.2 |\\n| `tests/test_validator.py` | Pruebas unitarias específicas para cada función | +1 | +1.0 |\\n\\n---\\n\\n## 🧠 Funciones del Gen validator.py\\n\\n| Función | Expresión genética | Tipo de mutación | Comentario |\\n|--------|--------------------|------------------|-----------|\\n| `validar_texto_no_vacio()` | Presencia de texto extraído | Nueva expresión | Filtra PDFs sin contenido válido |\\n| `validar_longitud()` | Umbral de longitud semántica | Nueva expresión | Requiere mínimo de palabras útiles |\\n| `validar_titulo()` | Validez del campo título | Nueva expresión | Evita exportaciones sin título relevante |\\n| `validar_autor()` | Existencia de autoría | Nueva expresión | Detecta textos sin atribución válida |\\n| `validar_documento()` | Orquestación de criterios | Gen compuesto | Agrega razonamiento semántico a validaciones |\\n\\n---\\n\\n## 📈 Trazabilidad Evolutiva\\n\\n| Vuelta | Radio | Madurez | Gen | Bloque | Commit sugerido |\\n|--------|-------|---------|-----|--------|-----------------|\\n| V2 | R2 | C1 | validator | b.1 | `feat(D): validar_documento() – nuevo filtro genético de calidad` |\\n| V2 | R2 | C1.2 | validator | b.2 | `test(D): cobertura 100% validator - fixtures validados` |\\n| V2 | R2 | C1.3 | main | b.2 | `refac(D): integración de validator al flujo - early exit por falla` |\\n| V2 | R2 | C1.3 | logger | b.3 | `feat(D): warning_meta y warning_texto_corto desde validator` |\\n\\n---\\n\\n## 📊 Resultados Semánticos del Gen\\n\\n| Indicador | Valor |\\n|----------|-------|\\n| Archivos inválidos detectados | 17 / 98 (17.3%) |\\n| Exportaciones omitidas correctamente | ✅ Sí |\\n| Logs generados con causa de omisión | ✅ Sí |\\n| Falsos positivos en validación | ❌ Cero |\\n| Cobertura de tests (`test_validator.py`) | ✅ 100% |\\n\\n---\\n\\n## 🔍 Análisis Diferencial (r′(t), c′(t))\\n\\n- ∆r = +1 → Agrega nueva funcionalidad crítica sin alterar módulos anteriores\\n- ∆c = +1.2 → Aumenta madurez general del sistema: control de flujo + calidad semántica\\n\\n---\\n\\n## 🧠 Reflexión Final del Gen validator\\n\\n> \\\"Este gen permite decir: 'esto no está listo para ser conocimiento'. Gracias a `validator.py`, el sistema ahora no solo procesa, sino que discierne. No todo texto merece ser exportado. La validación genética es nuestra forma de cuidar el corpus como si fuera ADN curado.\\\"\\n> \\n> — *Curador semántico del OpenPages Pipeline*\\n\\n---\\n\\n## 🧬 Transición a siguiente Gen – enhancer.py\\n\\n**Contexto**: Muchos textos omitidos por `validator` no están dañados irreversiblemente, sino sucios o mal formateados. \\n\\n**Hipótesis**: Si limpiamos, reparamos o enriquecemos estos textos antes, podríamos evitar perder documentos valiosos.\\n\\n**Próximo gen**: `enhancer.py` — Será el quirófano semántico del pipeline.\\n\\n---\\n\\n## 📇 Ficha Helicoidal\\n\\n| Elemento | Valor |\\n| --- | --- |\\n| 🧬 Gen | `validator.py` |\\n| 🌀 Tag funcional | `🌀 Chequeo previo a exportación` |\\n| 🔁 Vuelta activa | `V2` |\\n| 🔮 Futuras vueltas | `V3` (validaciones externas), `V6` (preparación IA-validada) |\\n| ⚙️ Función principal | `validar_documento()` |\\n| 🧠 Tipo de expresión | Filtro semántico / control de calidad |\\n| 📈 r(t) | 1.0 |\\n| 📈 c(t) | 0.6 |\\n| 📉 r′(t) | +0.9 |\\n| 📉 c′(t) | +0.6 |\\n| ✅ Estado actual | 🟢 Funcional, modular, con cobertura total |\\n| 🔗 Relacionado con | `exporter.py`, `logger.py`, `main.py`, `trainset_builder.py` |\\n\\n\",\"type\":\"text/markdown\",\"title\":\"🌀 Chequeo previo a exportación\",\"modified\":\"20250423141118748\",\"tags\":\"[[🌀 Chequeo previo a exportación]] [[--- 🌀 Helices de desarrollo]] [[--- Codigo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🌀2️⃣ Vuelta #2]] -src_logger.py -main.py -src_validator.py -tests_test_validator.py -src_exporter.py -tests_test_exporter.py\",\"tmap.id\":\"585cacbd-e5b3-4031-b0f3-d08d5cca62d1\",\"color\":\"DarkGreen\"},{\"created\":\"20250422002346422\",\"text\":\"# 🧬 Impacto Genético – Gen classifier.py\\n\\n> Este documento describe el análisis semántico y funcional del gen classifier.py, nacido en la Vuelta 1 del sistema helicoidal de OpenPages Pipeline. Este gen tiene la función crítica de dotar al pipeline de inteligencia semántica inicial, extrayendo título, autor y categoría Dewey desde textos científicos. Actúa como la primera capa de interpretación humana e IA-ready de los documentos procesados.\\n> \\n\\n---\\n\\n## 📂 Archivos Activados\\n\\n| Archivo | Cambio funcional | ∆r | ∆c |\\n| --- | --- | --- | --- |\\n| `src/classifier.py` | Gen de clasificación temática y metadatos | +1 | +1.0 |\\n| `utils.py` | Soporte para `normalizar_texto()` | +0.5 | +0.3 |\\n| `tests/test_classifier.py` | 5 pruebas unitarias completas | +1 | +1.0 |\\n| `fixtures/pdf_simple.pdf` | Caso de prueba controlado | +0 | +0.2 |\\n| `fixtures/pdf_formula.pdf` | Prueba negativa (ruido semántico) | +0 | +0.2 |\\n| `main.py` | Integra y usa la clasificación para exportación | +0.5 | +0.5 |\\n\\n---\\n\\n## 🧠 Funciones del Gen classifier.py\\n\\n| Función | Expresión genética | Tipo de mutación | Comentario |\\n| --- | --- | --- | --- |\\n| `clasificar_tematica()` | Categoría y código Dewey | Nueva expresión | Scoring por keywords |\\n| `extraer_titulo()` | Primera línea significativa | Nueva expresión | Evita líneas decorativas |\\n| `extraer_autor()` | Regex multilingüe | Nueva expresión | `por`, `by`, `autor:` |\\n| `clasificar_documento()` | Gen compuesto | Orquesta las anteriores | Devuelve dict AI-ready |\\n\\n---\\n\\n## 📈 Trazabilidad Evolutiva\\n\\n| Vuelta | Radio | Madurez | Gen | Bloque | Commit sugerido |\\n| --- | --- | --- | --- | --- | --- |\\n| V1 | R2 | C1 | classifier | b.1 | `feat(D): clasificar_documento() – gen semántico de metadatos` |\\n| V1 | R2 | C1.1 | classifier | b.2 | `test(D): test unitarios classifier – tema, autor, título` |\\n| V1 | R2 | C1.2 | classifier | b.3 | `refac(D): output estandarizado en dict` |\\n| V1 | R2 | C1.3 | classifier | b.4 | `docs(D): docstrings y guía de uso para classifier.py` |\\n\\n---\\n\\n## 📊 Resultados Semánticos del Gen\\n\\n| Indicador | Valor |\\n| --- | --- |\\n| Cobertura de tests (`test_classifier.py`) | ✅ 100% |\\n| Categorías detectadas correctamente | 4/5 |\\n| Fallback a categoría `000` | ✅ Funcionando |\\n| Títulos válidos extraídos | 100% en casos simples |\\n| Autores detectados (regex) | ✅ Multilingüe con precisión aceptable |\\n\\n---\\n\\n## 🔍 Análisis Diferencial (r′(t), c′(t))\\n\\n- ∆r = +1 → Introducción de gen funcional nuevo en Vuelta 1\\n- ∆c = +1.2 → Nivel de madurez alto (tests, integración, doc, fixtures)\\n\\n---\\n\\n## 🧠 Reflexión Final del Gen classifier\\n\\n> \\\"Construir classifier.py fue mi primer encuentro real con la semántica heurística. Aprendí a pensar en capas de interpretación, no solo en estructuras. Y sobre todo, entendí que una clasificación sencilla y clara puede ser más poderosa que un modelo sofisticado mal aplicado.\\\"\\n> \\n> \\n> — *Autor: diegoabeltran_16 · OpenPages V1*\\n> \\n\\n---\\n\\n## 🧬 Próxima Expresión Evolutiva\\n\\n**Contexto**: Aunque heurística, la clasificación actual es efectiva en la mayoría de los casos. Sin embargo, carece de capacidad de abstracción semántica profunda.\\n\\n**Hipótesis**: Si introducimos embeddings o clasificadores LLM fine-tuned, podríamos mejorar la precisión en textos ambiguos.\\n\\n**Próximo gen complementario**: `semantic_classifier.py` (Vuelta 6) – basado en modelos vectoriales y NLP moderno.\\n\\n---\\n\\n## 📇 Ficha Helicoidal\\n\\n| Elemento | Valor |\\n| --- | --- |\\n| 🧬 Gen | `classifier.py` |\\n| 🌀 Tag funcional | `🌀 Clasificación Temática y Dewey` |\\n| 🔁 Vuelta activa | `V1` |\\n| 🔮 Futuras vueltas | `V6` (embedding semántico, clasificación basada en vectores o LLM) |\\n| ⚙️ Función principal | `clasificar_documento()` |\\n| 🧠 Tipo de expresión | Heurística temática / detección de metadatos |\\n| 📈 r(t) | 0.9 |\\n| 📈 c(t) | 0.5 |\\n| 📉 r′(t) | +0.1 |\\n| 📉 c′(t) | +0.2 |\\n| ✅ Estado actual | 🟡 Media madurez, heurístico estable |\\n| 🔗 Relacionado con | `exporter.py`, `validator.py`, `trainset_builder.py` |\",\"type\":\"text/markdown\",\"title\":\"🌀 Clasificación Temática y Dewey\",\"modified\":\"20250423141238571\",\"tags\":\"[[🌀 Clasificación Temática y Dewey]] [[--- 🌀 Helices de desarrollo]] [[--- Codigo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🌀1️⃣ Vuelta #1]] -src_classifier.py -tests_test_classifier.py -src_utils.py -tests_test_utils.py -main.py\",\"tmap.id\":\"e62c9c24-a5b1-4206-829f-ccea4c7426e5\",\"color\":\"DarkGreen\"},{\"created\":\"20250422001557362\",\"text\":\"# 🧬 Impacto Genético – Gen parser.py\\n\\n> Este documento describe la estructura funcional y trazabilidad evolutiva del gen parser.py, uno de los primeros genes activos del OpenPages Pipeline. Nacido en la Vuelta 1, este gen permite extraer contenido útil desde archivos PDF con diversas complejidades, siendo la primera puerta hacia la transformación semántica de los documentos científicos procesados.\\n> \\n\\n---\\n\\n## 📂 Archivos Activados\\n\\n| Archivo | Cambio funcional | ∆r | ∆c |\\n| --- | --- | --- | --- |\\n| `src/parser.py` | Gen de extracción inteligente con heurística | +1 | +1.0 |\\n| `src/utils.py` | Extracción de heurísticas `es_pdf_complejo()` y `contiene_formula()` | +0.5 | +0.6 |\\n| `tests/test_parser.py` | Cobertura para extracción y filtros de símbolos | +1 | +1.0 |\\n| `tests/fixtures/` | PDFs simples y con fórmulas | +0 | +0.4 |\\n| `main.py` | Integra `parser.py` en flujo condicional | +0.5 | +0.5 |\\n\\n---\\n\\n## 🧠 Funciones del Gen parser.py\\n\\n| Función | Expresión genética | Tipo de mutación | Comentario |\\n| --- | --- | --- | --- |\\n| `extract_text()` | Extracción principal con fallback | Gen compuesto | Usa `fitz` o `pdfplumber` |\\n| `es_pdf_complejo()` | Heurística de estructura visual | Nueva expresión | Detecta columnas, OCR necesarios |\\n| `contiene_formula()` | Filtrado semántico de símbolos | Nueva expresión | Calcula densidad simbólica |\\n| `fallback_extractor()` *(futuro)* | Posible mutación próxima | Potencial con `ocr.py` |  |\\n\\n---\\n\\n## 📈 Trazabilidad Evolutiva\\n\\n| Vuelta | Radio | Madurez | Gen | Bloque | Commit sugerido |\\n| --- | --- | --- | --- | --- | --- |\\n| V1 | R1 | C1 | parser | b.1 | `feat(D): extract_text() – extracción heurística inicial de PDF` |\\n| V1 | R1 | C1.1 | parser | b.2 | `test(D): test_parser – validación con PDF simple y fórmulas` |\\n| V1 | R1 | C1.2 | utils | b.1 | `refac(D): mover heurísticas a utils.py – es_pdf_complejo()` |\\n| V1 | R1 | C1.3 | parser | b.3 | `fix(D): fallback extractor y mejora de lógica en contains_formula()` |\\n\\n---\\n\\n## 📊 Resultados Semánticos del Gen\\n\\n| Indicador | Valor |\\n| --- | --- |\\n| Textos extraídos correctamente (`pdf_simple`) | ✅ 100% |\\n| Falsos positivos (detectar como simple un complejo) | ⚠️ 1/5 |\\n| PDFs rechazados por fórmulas | ✅ Detectados correctamente |\\n| Fallback operativo (`pdfplumber`) | ✅ En casos sin texto |\\n| Tiempo promedio por PDF | 🕒 ~1.4s (simple) / ~3.2s (complejo) |\\n\\n---\\n\\n## 🔍 Análisis Diferencial (r′(t), c′(t))\\n\\n- ∆r = +1 → Introduce nueva lógica con impacto global\\n- ∆c = +1.4 → Mejora la robustez del flujo completo gracias a su heurística adaptable\\n\\n---\\n\\n## 🧠 Reflexión Final del Gen parser\\n\\n> \\\"Este fue mi primer contacto real con estructuras documentales impredecibles. Lo que parecía fácil ('extraer texto') se convirtió en un juego de heurísticas, fallback y pruebas reales. Aprendí que incluso los datos estructurados pueden estar sucios, y que diseñar funciones adaptativas no es opcional, es necesario.\\\"\\n> \\n> \\n> — *Diego Abeltrán · OpenPages V1*\\n> \\n\\n---\\n\\n## 🧬 Transición a siguiente Gen – enhancer.py\\n\\n**Contexto**: Muchos textos que `parser.py` logra extraer llegan con errores de codificación (`cid:`, `Ã³`) o símbolos inservibles.\\n\\n**Hipótesis**: Si aplicamos un módulo de reparación semántica después de `parser`, aumentamos la calidad del corpus procesado.\\n\\n**Próximo gen**: `enhancer.py` – Limpieza avanzada con `ftfy`, `unicodedata` y heurísticas simbólicas.\\n\\n---\\n\\n## 📇 Ficha Helicoidal\\n\\n| Elemento | Valor |\\n| --- | --- |\\n| 🧬 Gen | `parser.py` |\\n| 🌀 Tag funcional | `🌀 Extracción Inteligente de Texto` |\\n| 🔁 Vuelta activa | `V1` |\\n| 🔮 Futuras vueltas | `V2` (soporte OCR), `V3` (extracción robusta con layout) |\\n| ⚙️ Función principal | `extract_text()` |\\n| 🧠 Tipo de expresión | Extracción estructural adaptativa |\\n| 📈 r(t) | 1.0 |\\n| 📈 c(t) | 0.6 |\\n| 📉 r′(t) | +0.2 |\\n| 📉 c′(t) | +0.3 |\\n| ✅ Estado actual | ✅ Alta expresión con fallback funcional |\\n| 🔗 Relacionado con | `cleaner.py`, `utils.py`, `ocr.py`, `main.py` |\",\"type\":\"text/markdown\",\"title\":\"🌀 Extracción Inteligente de Texto\",\"modified\":\"20250423141355591\",\"tags\":\"[[🌀 Extracción Inteligente de Texto]] [[--- 🌀 Helices de desarrollo]] [[--- Codigo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🌀1️⃣ Vuelta #1]] -src_parser.py -tests_test_parser.py -src_utils.py -tests_test_utils.py -main.py\",\"tmap.id\":\"57811118-1f03-4e54-8737-cbf1b7923d2f\",\"color\":\"DarkGreen\"},{\"created\":\"20250422002658648\",\"text\":\"# 🧬 Impacto Genético – Gen logger.py\\n\\n> Este gen regula la expresión visual y lingüística del sistema. Es el canal de retroalimentación humano-semántico de OpenPages Pipeline. Su objetivo no es procesar datos, sino comunicar claramente qué ocurre, cómo y por qué, durante cada fase del pipeline, en el idioma del usuario.\\n> \\n\\n---\\n\\n## 📂 Archivos Activados\\n\\n| Archivo | Cambio funcional | ∆r | ∆c |\\n| --- | --- | --- | --- |\\n| `src/logger.py` | Gen de comunicación: `log_mensaje()` multilingüe, desacoplado | +1 | +0.9 |\\n| `tests/test_logger.py` | Test paramétrico con `capsys` para eventos y fallback | +1 | +1.0 |\\n| `.env` | Configuración de entorno con `LANG=es` o `LANG=en` | +0.2 | +0.2 |\\n| `main.py` | Llamadas integradas a `log_mensaje()` en pasos clave | +0.5 | +0.5 |\\n\\n---\\n\\n## 🧠 Funciones del Gen logger.py\\n\\n| Función | Expresión genética | Tipo de mutación | Comentario |\\n| --- | --- | --- | --- |\\n| `log_mensaje()` | Canal de expresión multilingüe con íconos | Nueva expresión | Mensajes adaptados por evento y entorno |\\n| `MENSAJES[evento][idioma]` | Diccionario de traducciones | Regulación epigenética | Fallback a español en caso de error |\\n| `stdout` controlado | Captura de salida con `capsys` | Compatible | Ideal para testing sin side effects |\\n\\n---\\n\\n## 📈 Trazabilidad Evolutiva\\n\\n| Vuelta | Radio | Madurez | Gen | Bloque | Commit sugerido |\\n| --- | --- | --- | --- | --- | --- |\\n| V1 | R1 | C1 | logger | b.1 | `feat(D): log_mensaje() – canal multilingüe con eventos estructurados` |\\n| V1 | R1 | C1.1 | logger | b.2 | `test(D): test_logger paramétrico – es/en + eventos conocidos` |\\n| V1 | R1 | C1.2 | logger | b.3 | `fix(D): fallback a LANG=es y eventos no definidos` |\\n\\n---\\n\\n## 📊 Resultados Semánticos del Gen\\n\\n| Indicador | Valor |\\n| --- | --- |\\n| Idiomas soportados | ✅ Español, Inglés |\\n| Eventos reconocidos | ✅ 6 (`export_ok`, `error`, `clasificacion`, etc.) |\\n| Mensajes desconocidos manejados | ✅ Sí (advertencia + fallback) |\\n| Tests unitarios (`test_logger`) | ✅ 100% con `capsys` |\\n| Uso en módulos | ✅ Integrado en `parser.py`, `exporter.py`, `main.py` |\\n\\n---\\n\\n## 🔍 Análisis Diferencial (r′(t), c′(t))\\n\\n- ∆r = +1 → Introduce canal de comunicación sin modificar la lógica de procesamiento\\n- ∆c = +1.1 → Mejora la accesibilidad, trazabilidad visual y experiencia de usuario\\n\\n---\\n\\n## 🧠 Reflexión Final del Gen logger\\n\\n> \\\"Este gen me enseñó que un sistema no habla solo con su output, sino con sus gestos. logger.py es el lenguaje corporal del pipeline. Cuando el sistema falla o acierta, lo hace visible y humano. Un buen log no solo informa: educa.\\\"\\n> \\n> \\n> — *Diego Abeltrán · OpenPages Pipeline · Ciclo 1*\\n> \\n\\n---\\n\\n## 🧬 Transición a siguiente Gen – `validator.py`\\n\\n**Contexto**: Los logs muestran cuándo algo falla, pero no previenen el error.\\n\\n**Hipótesis**: Incorporando un filtro semántico (validator), podemos evitar que errores semánticos avancen a etapas posteriores.\\n\\n**Próximo gen**: `validator.py` – Validación previa de contenido, metadatos y longitud.\\n\\n---\\n\\n📇 Ficha Helicoidal\\n\\nElemento\\tValor\\n🧬 Gen\\tlogger.py\\n🌀 Tag funcional\\t🌀 Feedback Multilingüe\\n🔁 Vuelta activa\\tV1\\n🔮 Futuras vueltas\\tV2 (loguru persistente), V3 (dashboard y auditoría)\\n⚙️ Función principal\\tlog_mensaje()\\n🧠 Tipo de expresión\\tComunicación / Trazabilidad\\n📈 r(t)\\t0.8\\n📈 c(t)\\t0.7\\n📉 r′(t)\\t+0.3\\n📉 c′(t)\\t+0.4\\n✅ Estado actual\\t✅ Estructurado, bilingüe, integrable\\n🔗 Relacionado con\\tmain.py, validator.py, exporter.py, enhancer.py\\n\",\"type\":\"text/markdown\",\"title\":\"🌀 Feedback Multilingüe\",\"modified\":\"20250423141438598\",\"tags\":\"[[🌀 Feedback Multilingüe]] [[--- 🌀 Helices de desarrollo]] [[--- Codigo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🌀1️⃣ Vuelta #1]] -src_logger.py -tests_test_logger.py -main.py\",\"tmap.id\":\"ad1117bd-e271-40b2-8433-0146ec5d749d\",\"color\":\"DarkGreen\"},{\"created\":\"20250422002456719\",\"text\":\"# 🧬 Impacto Genético – Gen exporter.py\\n\\n> Este gen define la expresión fenotípica del sistema. A partir de los metadatos y del texto limpio, genera proteínas informacionales listas para IA y humanos. exporter.py es el punto donde la información procesada se transforma en salidas tangibles: .txt, .md, .jsonl.\\n> \\n\\n---\\n\\n## 📂 Archivos Activados\\n\\n| Archivo | Cambio funcional | ∆r | ∆c |\\n| --- | --- | --- | --- |\\n| `src/exporter.py` | Gen de exportación multiformato | +1 | +1.0 |\\n| `tests/test_exporter.py` | Tests por formato generado y limpieza post-ejecución | +1 | +1.0 |\\n| `main.py` | Invoca exportación desde flujo central | +0.5 | +0.5 |\\n| `output/` | Almacén fenotípico dinámico | +0 | +0.3 |\\n\\n---\\n\\n## 🧠 Funciones del Gen exporter.py\\n\\n| Función | Expresión genética | Tipo de mutación | Comentario |\\n| --- | --- | --- | --- |\\n| `exportar_archivos()` | Expresión fenotípica principal | Gen compuesto | Exporta `.txt`, `.md`, `.jsonl` |\\n| `guardar_txt()` | Transcripción plana | Nueva expresión | Ideal para revisión humana rápida |\\n| `guardar_md()` | Transcripción estructurada con YAML | Nueva expresión | Útil para documentación técnica |\\n| `guardar_jsonl()` | Chunking semántico | Nueva expresión | Ready for NLP / RAG |\\n| `limpiar_nombre()` | Sanitización nominal | Regulación epigenética | Previene errores en I/O y slugging |\\n\\n---\\n\\n## 📈 Trazabilidad Evolutiva\\n\\n| Vuelta | Radio | Madurez | Gen | Bloque | Commit sugerido |\\n| --- | --- | --- | --- | --- | --- |\\n| V1 | R3 | C1 | exporter | b.1 | `feat(D): exportar_archivos() – salida múltiple y validada` |\\n| V1 | R3 | C1.1 | exporter | b.2 | `test(D): test_exporter archivos generados y borrados con éxito` |\\n| V1 | R3 | C1.2 | exporter | b.3 | `refac(D): limpieza nombres y estructura final de output` |\\n\\n---\\n\\n## 📊 Resultados Semánticos del Gen\\n\\n| Indicador | Valor |\\n| --- | --- |\\n| Formatos generados | ✅ `.txt`, `.md`, `.jsonl` |\\n| Nombres semánticos y limpios | ✅ Sí, con `limpiar_nombre()` |\\n| Exportaciones con metadatos | ✅ YAML headers presentes |\\n| Test coverage | ✅ 100% |\\n| Integración con flujo principal (`main.py`) | ✅ Correcta |\\n\\n---\\n\\n## 🔍 Análisis Diferencial (r′(t), c′(t))\\n\\n- ∆r = +1 → Añade capacidad de producción fenotípica completa\\n- ∆c = +1.0 → Módulo maduro, testeado, y con output trazable\\n\\n---\\n\\n## 🧠 Reflexión Final del Gen exporter\\n\\n> “Este gen es donde el conocimiento se vuelve tangible. Exportar no es guardar archivos: es darle forma final al sentido. Con .jsonl, .md, .txt, cada documento se transforma en una unidad viva de información curada, lista para IA, visualización o archivo.”\\n> \\n> \\n> — *Curador Fenotípico del OpenPages Pipeline · Ciclo 1*\\n> \\n\\n---\\n\\n## 🧬 Transición a siguiente Gen – `ocr.py` (Ciclo 2)\\n\\n**Contexto**: Muchos PDFs no contienen texto embebido. Sin OCR, el pipeline no puede generar salidas desde imágenes.\\n\\n**Hipótesis**: Si implementamos un gen `ocr.py`, podremos extender la cobertura a documentos escaneados y mejorar el alcance del sistema.\\n\\n**Próximo gen**: `ocr.py` – Extracción inteligente desde imágenes y reconstrucción semántica.\\n\\n---\\n\\n## 📇 Ficha Helicoidal\\n\\n| Elemento | Valor |\\n| --- | --- |\\n| 🧬 Gen | `exporter.py` |\\n| 🌀 Tag funcional | `🌀 Generación de Archivos de Salida` |\\n| 🔁 Vuelta activa | `V1` |\\n| 🔮 Futuras vueltas | `V3` (resúmenes), `V4` (multilingüe), `V6` (enriquecimiento semántico) |\\n| ⚙️ Función principal | `exportar_archivos()` |\\n| 🧠 Tipo de expresión | Fenotípica / Estructuración |\\n| 📈 r(t) | 1.0 |\\n| 📈 c(t) | 0.6 |\\n| 📉 r′(t) | +0.4 |\\n| 📉 c′(t) | +0.3 |\\n| ✅ Estado actual | ✅ Funcional, multiformato (.txt, .md, .jsonl) |\\n| 🔗 Relacionado con | `classifier.py`, `validator.py`, `main.py`, `logger.py` |\",\"type\":\"text/markdown\",\"title\":\"🌀 Generación de Archivos de Salida\",\"modified\":\"20250423141512493\",\"tags\":\"[[🌀 Generación de Archivos de Salida]] [[--- 🌀 Helices de desarrollo]] [[--- Codigo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🌀1️⃣ Vuelta #1]] -src_exporter.py -tests_test_exporter.py -main.py\",\"tmap.id\":\"3cdef177-3cbf-4b57-8454-6834a98a3902\",\"color\":\"DarkGreen\"},{\"created\":\"20250422002559369\",\"text\":\"# 🧬 Impacto Genético – Gen utils.py\\n\\n> El gen utils.py actúa como un conjunto de proteínas auxiliares. Su función es proporcionar herramientas de diagnóstico estructural, limpieza semántica y soporte heurístico para que otros genes (parser, classifier, enhancer) operen con mayor precisión y eficiencia. Aunque no se expresa directamente en el fenotipo, regula silenciosamente el comportamiento de todo el sistema.\\n> \\n\\n---\\n\\n## 📂 Archivos Activados\\n\\n| Archivo | Cambio funcional | ∆r | ∆c |\\n| --- | --- | --- | --- |\\n| `src/utils.py` | Nuevo gen funcional de soporte heurístico | +1 | +0.9 |\\n| `tests/test_utils.py` | Validación completa de funciones auxiliares | +1 | +1.0 |\\n| `parser.py` | Integra `es_pdf_complejo()` y `contiene_formula()` | +0.5 | +0.4 |\\n| `classifier.py` | Usa `normalizar_texto()` para limpieza previa | +0.3 | +0.3 |\\n\\n---\\n\\n## 🧠 Funciones del Gen utils.py\\n\\n| Función | Expresión genética | Tipo de mutación | Comentario |\\n| --- | --- | --- | --- |\\n| `es_pdf_complejo()` | Diagnóstico estructural de PDFs | Nueva expresión | Detecta escaneos, vacíos, layouts complejos |\\n| `contiene_formula()` | Detección de densidad simbólica | Nueva expresión | Heurística por ratio de símbolos matemáticos |\\n| `normalizar_texto()` | Limpieza semántica para clasificación | Regulación epigenética | Compatible con OCR y multilenguaje |\\n\\n---\\n\\n## 📈 Trazabilidad Evolutiva\\n\\n| Vuelta | Radio | Madurez | Gen | Bloque | Commit sugerido |\\n| --- | --- | --- | --- | --- | --- |\\n| V1 | R2 | C1 | utils | b.1 | `feat(D): heurísticas PDF complejos + fórmula detectada - gen utils` |\\n\\n---\\n\\n## 📊 Resultados Semánticos del Gen\\n\\n| Indicador | Resultado |\\n| --- | --- |\\n| PDFs detectados como complejos (fixtures) | ✅ `pdf_formula.pdf`, `empty.pdf` |\\n| Casos con ratio simbólico > 30% | ✅ Filtrados correctamente |\\n| Uso efectivo de `unidecode()` | ✅ Mejora en clasificación y exportación |\\n| Tests con `pytest` | ✅ Todos cubiertos, CI verde |\\n| Integración silenciosa en el flujo | ✅ Operativo sin side-effects |\\n\\n---\\n\\n## 🔍 Análisis Diferencial (r′(t), c′(t))\\n\\n- ∆r = +1.0 → Nueva capacidad de diagnóstico multisituación en todo el pipeline\\n- ∆c = +1.0 → Aumenta confiabilidad y robustez de todos los módulos conectados\\n\\n---\\n\\n## 🧠 Reflexión Final del Gen utils.py\\n\\n> \\\"Este gen me enseñó el valor del soporte silencioso. No genera output visible, pero sin él, parser y classifier estarían ciegos. Aprendí a pensar en términos de heurísticas, umbrales, y cómo el preprocesamiento correcto puede ahorrarnos errores aguas abajo.\\\"\\n> \\n> \\n> — *Arquitecto Interno del Dewey Pipeline · Ciclo 1*\\n> \\n\\n---\\n\\n## 🧬 Transición a siguiente Gen – `ocr.py`\\n\\n**Contexto**: Gracias a `es_pdf_complejo()`, ahora sabemos cuándo un PDF necesita tratamiento OCR.\\n\\n**Hipótesis**: Si `parser.py` detecta PDF sin texto, y `utils.py` lo marca como complejo, el gen `ocr.py` puede activarse automáticamente.\\n\\n**Próximo gen**: `ocr.py` – Primera expresión de visión computacional en el pipeline.\\n\\n---\\n\\n## 📇 Ficha Helicoidal\\n\\n| Elemento | Valor |\\n| --- | --- |\\n| 🧬 Gen | `utils.py` |\\n| 🌀 Tag funcional | `🌀 Herramientas Auxiliares` |\\n| 🔁 Vuelta activa | `V1` |\\n| 🔮 Futuras vueltas | `V2` (OCR-aware heuristics), `V5` (detección automática de idioma) |\\n| ⚙️ Función principal | `es_pdf_complejo()`, `contiene_formula()`, `normalizar_texto()` |\\n| 🧠 Tipo de expresión | Diagnóstica / Heurística |\\n| 📈 r(t) | 0.7 |\\n| 📈 c(t) | 0.5 |\\n| 📉 r′(t) | +0.3 |\\n| 📉 c′(t) | +0.2 |\\n| ✅ Estado actual | ✅ Operativo, integrado con `parser.py` y `classifier.py` |\\n| 🔗 Relacionado con | `parser.py`, `classifier.py`, `enhancer.py`, `main.py` |\",\"type\":\"text/markdown\",\"title\":\"🌀 Herramientas Auxiliares\",\"modified\":\"20250423141551095\",\"tags\":\"[[🌀 Herramientas Auxiliares]] [[--- 🌀 Helices de desarrollo]] [[--- Codigo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🌀1️⃣ Vuelta #1]] -src_utils.py -tests_test_utils.py -src_parser.py -src_classifier.py -tests_test_classifier.py -tests_test_parser.py\",\"tmap.id\":\"4bbc09dc-329b-4233-b34f-c55f47f53f88\",\"color\":\"DarkGreen\"},{\"created\":\"20250422004844809\",\"text\":\"# 🧬 Impacto Genético – Gen enhancer.py\\n\\n> Este documento representa el análisis completo del gen enhancer.py, incorporado en la vuelta 2 del OpenPages Pipeline. Este gen cumple un rol sanador dentro del sistema: repara texto dañado tras la extracción, dignificando el contenido antes de su validación o exportación. Opera con funciones modulares, encadenadas y auditables, y ha sido clave para la transformación de ruido en conocimiento útil.\\n> \\n\\n---\\n\\n## 📂 Archivos Activados\\n\\n| Archivo | Cambio funcional | ∆r | ∆c |\\n| --- | --- | --- | --- |\\n| `src/enhancer.py` | Nuevo gen para reparación semántica | +1 | +1.0 |\\n| `main.py` | Integración con flujo post-cleaner y pre-validator | +1 | +0.4 |\\n| `tests/test_enhancer.py` | Tests por tipo de error: cid, mojibake, Unicode | +1 | +1.0 |\\n| `logger.py` | Logging condicional de eventos `cid_reparado`, `unicode_normalizado` | +0 | +0.3 |\\n| `requirements.txt` | Inclusión de `ftfy` para corrección de codificación | +0 | +0.2 |\\n\\n---\\n\\n## 🧠 Funciones del Gen enhancer.py\\n\\n| Función | Expresión genética | Tipo de mutación | Comentario |\\n| --- | --- | --- | --- |\\n| `reemplazar_cid_ascii()` | Decodifica `(cid:243)` → `ó` | Nueva expresión | Usa `chr()` sobre el valor numérico |\\n| `reparar_cid()` | Elimina patrones `cid:xxx` | Nueva expresión | Elimina ruido común en PDF |\\n| `reparar_palabras_partidas()` | Reconstruye palabras fragmentadas por cid | Nueva expresión compleja | Fusiona `introduccid:415on` |\\n| `reparar_encoding()` | Corrige `Ã³`, `Ã¡` via `ftfy` | Mutación condicional | Reparación avanzada y segura |\\n| `normalizar_unicode()` | Limpieza de Unicode | Expresión estable | Aplica `unicodedata.normalize` |\\n| `marcar_fragmentos_dudosos()` | Flag para líneas sin letras | Mutación semántica | Detecta secciones corruptas |\\n| `enriquecer_texto()` | Orquestador modular | Gen compuesto | Controla, aplica, registra y devuelve |\\n\\n---\\n\\n## 📈 Trazabilidad Evolutiva\\n\\n| Vuelta | Radio | Madurez | Gen | Bloque | Commit sugerido |\\n| --- | --- | --- | --- | --- | --- |\\n| V2 | R3 | C1 | enhancer | b.1 | `feat(D): reparar_cid() – limpieza inicial de patrones` |\\n| V2 | R3 | C1.1 | enhancer | b.2 | `feat(D): reparar_encoding() con ftfy – sanitización de mojibake` |\\n| V2 | R3 | C1.2 | enhancer | b.3 | `feat(D): enriquecer_texto() – orquestador modular con stats` |\\n| V2 | R3 | C1.3 | enhancer | b.4 | `test(D): cobertura completa enhancer – casos reales y edge` |\\n| V2 | R3 | C1.4 | main | b.2 | `refac(D): integración enhancer.py entre cleaner y validator` |\\n| V2 | R3 | C1.5 | logger | b.3 | `feat(D): logs condicionales de reparación semántica` |\\n\\n---\\n\\n## 📊 Resultados Semánticos del Gen\\n\\n| Indicador | Valor |\\n| --- | --- |\\n| Archivos recuperados por reparación | 5 / 23 (21.7%) |\\n| Palabras reconstruidas (`cid`) | 143 |\\n| Casos `Ã³` reparados por `ftfy` | ✅ Detectado y corregido |\\n| Textos marcados como `[DUDOSO]` | 3 |\\n| Cobertura de tests (`test_enhancer.py`) | ✅ 100% |\\n| Stats generados para logs | ✅ Por tipo de reparación |\\n\\n---\\n\\n## 🔍 Análisis Diferencial (r′(t), c′(t))\\n\\n- ∆r = +1.0 → Introducción de nuevo gen con múltiples bloques funcionales.\\n- ∆c = +1.3 → Madurez total: test, integración, logging, documentación.\\n\\n---\\n\\n## 🧠 Reflexión Final del Gen enhancer\\n\\n> \\\"Si validator.py dice qué no sirve, enhancer.py dice cómo podemos salvarlo. Es nuestro curador semántico, nuestro quirófano textual. Gracias a él, el sistema dejó de descartar por defecto y comenzó a rescatar lo valioso. Es el paso que transforma el pipeline en una herramienta verdaderamente ética, inclusiva y reparadora del conocimiento.\\\"\\n> \\n> \\n> — *Curador semántico · OpenPages Pipeline V2*\\n>\\n\\n---\\n\\n## 📇 Ficha Helicoidal\\n\\n| Elemento | Valor |\\n| --- | --- |\\n| 🧬 Gen | `cleaner.py` |\\n| 🌀 Tag funcional | `🌀 Limpieza avanzada` |\\n| 🔁 Vuelta activa | `V1` |\\n| 🔮 Futuras vueltas | `V4` (soporte para estilos y markdown extendido), `V6` (chunking IA) |\\n| ⚙️ Función principal | `limpiar_texto_completo()` |\\n| 🧠 Tipo de expresión | Preparatoria / Semántica |\\n| 📈 r(t) | 0.9 |\\n| 📈 c(t) | 0.7 |\\n| 📉 r′(t) | +0.2 |\\n| 📉 c′(t) | +0.4 |\\n| ✅ Estado actual | ✅ Estable y modular, integrada a `main.py` |\\n| 🔗 Relacionado con | `parser.py`, `enhancer.py`, `classifier.py`, `exporter.py` |\",\"type\":\"text/markdown\",\"title\":\"🌀 Limpieza avanzada\",\"modified\":\"20250423141616432\",\"tags\":\"[[🌀 Limpieza avanzada]] [[--- 🌀 Helices de desarrollo]] [[--- Codigo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🌀2️⃣ Vuelta #2]] -main.py -src_logger.py -tests_test_logger.py\",\"tmap.id\":\"5eedd506-4247-4d5e-a4dc-f409cb1844b4\",\"color\":\"DarkGreen\"},{\"created\":\"20250422002058475\",\"text\":\"# 🧬 Impacto Genético – Gen cleaner.py\\n\\n> El gen cleaner.py representa el sistema digestivo del pipeline: toma texto crudo y lo transforma en información limpia, estructurada y digerible tanto para humanos como para IA. Cada función que contiene actúa como una enzima semántica que descompone, organiza o reestructura el contenido.\\n> \\n\\n---\\n\\n## 📂 Archivos Activados\\n\\n| Archivo | Cambio funcional | ∆r | ∆c |\\n| --- | --- | --- | --- |\\n| `src/cleaner.py` | Implementación de limpieza, normalización y modo Markdown | +1 | +1.0 |\\n| `tests/test_cleaner.py` | 5 tests específicos que cubren todos los caminos de ejecución | +1 | +1.0 |\\n| `main.py` | Integrado como paso previo a clasificación y exportación | +0.5 | +0.4 |\\n\\n---\\n\\n## 🧠 Funciones del Gen cleaner.py\\n\\n| Función | Expresión genética | Tipo de mutación | Comentario |\\n| --- | --- | --- | --- |\\n| `normalizar_unicode()` | Reemplazo de caracteres erróneos o no imprimibles | Nueva expresión | Clave para limpieza previa a NLP |\\n| `eliminar_lineas_ruido()` | Detección y eliminación de líneas decorativas | Nueva expresión | Elimina patrones tipo `***`, `---` |\\n| `detectar_encabezado()` | Heurística para encabezados | Nueva expresión | Base para generar Markdown estructurado |\\n| `agregar_markdown_headers()` | Inserta `##` a encabezados | Expresión opcional (flag `modo_md`) | Generación semántica para `.md` |\\n| `limpiar_texto()` | Pipeline modular de limpieza base | Gen compuesto | Organiza flujo básico de limpieza |\\n| `limpiar_texto_completo()` | Versión extendida con flags de modo y control | Gen compuesto | Usado directamente desde `main.py` |\\n\\n---\\n\\n## 📈 Trazabilidad Evolutiva\\n\\n| Vuelta | Radio | Madurez | Gen | Bloque | Commit sugerido |\\n| --- | --- | --- | --- | --- | --- |\\n| V1 | R2 | C1 | cleaner | b.1 | `feat(D): limpieza semántica con control por flags - cleaner.py` |\\n| V1 | R2 | C1.2 | cleaner | b.2 | `test(D): cobertura total de limpieza y normalización` |\\n| V1 | R2 | C1.3 | cleaner | b.3 | `refac(D): reestructuración en funciones puras y reutilizables` |\\n\\n---\\n\\n## 📊 Resultados Semánticos del Gen\\n\\n| Indicador | Resultado |\\n| --- | --- |\\n| Casos de ruido visual correctamente filtrados | ✅ 100% |\\n| Markdown generado con estructura | ✅ `## encabezados` detectados |\\n| Compatibilidad con clasificación posterior | ✅ Total |\\n| Tests en `test_cleaner.py` | ✅ Todos aprobados (5/5) |\\n| Versión Markdown usable en `.md` | ✅ Compatible con exportación final |\\n\\n---\\n\\n## 🔍 Análisis Diferencial (r′(t), c′(t))\\n\\n- ∆r = +1.0 → Se agrega nuevo flujo funcional completo de limpieza semántica\\n- ∆c = +1.0 → Madurez completa: integración, flags, markdown, testing, documentación\\n\\n---\\n\\n## 🧠 Reflexión Final del Gen cleaner.py\\n\\n> \\\"Este módulo confirmó algo clave: sin limpieza, no hay comprensión. El texto puede estar ahí, pero sin estructura, es solo ruido. Cleaner.py me enseñó a escribir funciones como filtros mentales: silenciosas, eficientes y seguras para todo lo que vendrá después.\\\"\\n> \\n> \\n> — *Curador de Texto · Vuelta 1 · Dewey Pipeline*\\n> \\n\\n---\\n\\n## 🧬 Transición a siguiente Gen – `classifier.py`\\n\\n**Contexto**: Ahora que el texto está limpio y estructurado, podemos extraer metadatos clave.\\n\\n**Hipótesis**: La precisión de `classifier.py` aumenta significativamente si recibe textos ya normalizados y marcados semánticamente.\\n\\n**Próximo gen**: `classifier.py` – Clasificación temática y detección de autor/título vía heurísticas.\\n\\n---\\n\\n## 📇 Ficha Helicoidal\\n\\n| Elemento | Valor |\\n| --- | --- |\\n| 🧬 Gen | `cleaner.py` |\\n| 🌀 Tag funcional | `🌀 Limpieza y Preparación de Texto` |\\n| 🔁 Vuelta activa | `V1` |\\n| 🔮 Futuras vueltas | `V4` (estilos y markdown extendido), `V6` (chunking IA) |\\n| ⚙️ Función principal | `limpiar_texto_completo()` |\\n| 🧠 Tipo de expresión | Preparatoria / Semántica |\\n| 📈 r(t) | 1.0 |\\n| 📈 c(t) | 0.8 |\\n| 📉 r′(t) | +0.3 |\\n| 📉 c′(t) | +0.5 |\\n| ✅ Estado actual | ✅ Estable, 100% testeado, integrada en producción |\\n| 🔗 Relacionado con | `parser.py`, `enhancer.py`, `classifier.py`, `exporter.py` |\",\"type\":\"text/markdown\",\"title\":\"🌀 Limpieza y Preparación de Texto\",\"modified\":\"20250423141636698\",\"tags\":\"[[🌀 Limpieza y Preparación de Texto]] [[--- 🌀 Helices de desarrollo]] [[--- Codigo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🌀1️⃣ Vuelta #1]] -src_cleaner.py -tests_test_cleaner.py -main.py\",\"tmap.id\":\"ebb20608-0256-4e5c-b83c-a2782679bd4f\",\"color\":\"DarkGreen\"},{\"created\":\"20250422040400443\",\"text\":\"# 🧬 Pre Impacto del Gen `ocr.py` – Vuelta 2\\n\\n📅 **Fecha de inicio proyectada:** 2025-04-24\\n\\n🌀 **Vuelta:** `V2` – Primera expresión del gen OCR\\n\\n🔬 **Estado:** Planificación validada, implementación inminente\\n\\n📈 **Parámetros iniciales:**\\n\\n`t = 2`, `r(2) = 2` (impacta 2 módulos), `c(2) = 1.5`\\n\\n`∆r = +2`, `∆c = +0.5`\\n\\n---\\n\\n## 🧭 Enfoques a considerar\\n\\n| Enfoque | Descripción |\\n| --- | --- |\\n| 🧠 OCR Inteligente | Procesamiento local de PDFs escaneados combinando `pdf2image`, `pytesseract` y `PIL` |\\n| 🛡️ Procesamiento Ético | 100% local, sin uso de servicios externos ni nubes |\\n| 🔍 Heurística inicial | Uso de `es_pdf_escaneado()` en `parser.py` para detectar necesidad de OCR |\\n| 🔗 Postprocesado Integrado | El texto extraído por OCR pasará por `enhancer.py` y luego `cleaner.py` |\\n\\n---\\n\\n## 📂 Archivos por involucrar\\n\\n| Archivo | Acción prevista | ∆r | ∆c |\\n| --- | --- | --- | --- |\\n| `ocr.py` | 🧬 Nuevo gen funcional OCR | +1 | +0.5 |\\n| `parser.py` | 🧬 Mutación: detección `necesita_ocr()` y fallback | +1 | +0.3 |\\n| `main.py` | 🧠 Integración condicional del OCR | +1 | +0.2 |\\n| `enhancer.py` | 🧬 Reutilización para limpiar salida OCR | +0 | +0.2 |\\n| `tests/test_ocr.py` | 🧪 Nueva batería de tests | +1 | +0.3 |\\n\\n---\\n\\n## 🧪 Posibles Dependencias a usar\\n\\n| Paquete | Función | Estado |\\n| --- | --- | --- |\\n| `pytesseract` | OCR engine basado en Tesseract | ✅ Compatible |\\n| `pdf2image` | Conversión de PDF a imágenes | ✅ Compatible |\\n| `Pillow` | Manipulación de imágenes OCR | ✅ Compatible |\\n| `reportlab` | Generación de PDFs simulados para testing | ✅ Opcional |\\n\\n---\\n\\n## 🧠 Funciones del Módulo a desarrollar (`ocr.py`)\\n\\n```python\\npython\\nCopyEdit\\nocr_completo(pdf_path: str) -> str\\nconvertir_pdf_a_imagenes(pdf_path: str) -> list[PIL.Image]\\nextraer_texto_ocr(imagen: PIL.Image) -> str\\nocr_mix_mode(pdf_path: str) -> str\\n\\n```\\n\\n---\\n\\n## 🔧 Detalle Técnico a implementar\\n\\n| Componente | Detalle |\\n| --- | --- |\\n| 📁 Carpeta temporal | `temp_ocr/` para guardar imágenes por página |\\n| 🔁 Limpieza post-OCR | Borrado de archivos temporales tras OCR |\\n| 🧾 Logging OCR | Logs por página (`ocr_pagina_1`, ...) en consola y archivo |\\n| 🔗 Integración | Concatenación del resultado y paso por `enhancer.py` |\\n| 🔍 Fallback | Si `extract_text()` falla, se activa `ocr_completo()` automáticamente |\\n\\n---\\n\\n## 📘 Aprendizajes Clave por adquirir\\n\\n| Área | Pregunta técnica |\\n| --- | --- |\\n| ⏱️ Rendimiento | ¿Cuál es el tiempo promedio por página OCR? |\\n| 🧹 Postprocesamiento | ¿Cuánto mejora `enhancer.py` la legibilidad? |\\n| 🤖 Semántica | ¿Qué tan distintos son los `.jsonl` con y sin OCR? |\\n| 🧬 Robustez | ¿Se pueden recuperar errores parciales página a página? |\\n\\n---\\n\\n## 📈 Estado del Módulo actual\\n\\n| Gen / Archivo | Estado | Observación |\\n| --- | --- | --- |\\n| `ocr.py` | 🧬 En diseño | Funciones bosquejadas, no implementadas |\\n| `parser.py` | 🧬 Mutado | `es_pdf_escaneado()` implementado |\\n| `main.py` | 🧠 Preparado | Flujo listo para incluir `--ocr` |\\n| `tests/` | ⏳ Pendiente | Fixtures OCR con imágenes aún no creadas |\\n\\n---\\n\\n## 🧩 Bloques funcionales por trabajar\\n\\n| Bloque | Nombre | Tipo de expresión |\\n| --- | --- | --- |\\n| `b=1` | `ocr_completo()` | feat |\\n| `b=2` | `convertir_pdf_a_imagenes()` | feat |\\n| `b=3` | `extraer_texto_ocr()` | feat |\\n| `b=4` | `ocr_mix_mode()` | feat |\\n| `b=5` | `test_ocr_pdf_con_imagen()` | test |\\n| `b=6` | `main → if necesita_ocr()` | feat/refac |\\n\\n---\\n\\n## 💬 Commits para asociar (planificados)\\n\\n```bash\\nbash\\nCopyEdit\\nfeat(D): ocr_completo() – primera expresión OCR - (V2.R2.C1 / gen=ocr, b=1, ∆r=+1, ∆c=+0.5)\\n\\nfeat(D): parser.py detecta necesita_ocr() - (V2.R1.C1 / gen=parser, b=5, ∆r=+1, ∆c=+0.3)\\n\\nrefac(p): main.py prepara flujo OCR - (V2.R1.C1 / gen=main, b=6, ∆r=+0.5, ∆c=+0.2)\\n\\ntest(D): pruebas básicas para OCR - (V2.R1.C1 / gen=ocr, b=5, ∆r=+1, ∆c=+0.3)\\n\\n```\",\"type\":\"text/markdown\",\"title\":\"🌀 OCR Inteligente con Tesseract\",\"modified\":\"20250423141736212\",\"tags\":\"[[🌀 OCR Inteligente con Tesseract]] [[--- 🌀 Helices de desarrollo]] [[--- Codigo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🌀2️⃣ Vuelta #2]] -src_parser.py -tests_test_parser.py -main.py\",\"tmap.id\":\"98486f0b-5d59-477a-81f5-18fcec80b13e\",\"color\":\"DarkGreen\"},{\"created\":\"20250422002747253\",\"text\":\"# 🧬 Impacto Genético – Gen main.py\\n\\n> El gen main.py actúa como el núcleo orquestador del organismo computacional. No codifica funciones individuales, sino que coordina la expresión ordenada de todos los genes. Su rol es asegurar que el flujo vital del sistema ocurra correctamente: desde la ingestión de PDFs hasta la exportación semántica final.\\n> \\n\\n---\\n\\n## 📂 Archivos Activados\\n\\n| Archivo | Cambio funcional | ∆r | ∆c |\\n| --- | --- | --- | --- |\\n| `src/main.py` | Integración completa del pipeline | +1 | +1.0 |\\n| `logger.py` | Activado desde `main` para feedback visual | +0.5 | +0.6 |\\n| `parser.py`, `cleaner.py`, `classifier.py`, `exporter.py` | Usados como genes funcionales en cadena | +0 | +0 |\\n| `input/`, `output/` | Directorios implicados en el flujo | +0 | +0 |\\n\\n---\\n\\n## 🧠 Funciones del Gen main.py\\n\\n| Función | Expresión genética | Tipo de mutación | Comentario |\\n| --- | --- | --- | --- |\\n| `main()` | Orquestación modular del pipeline | Nueva expresión | Coordina todas las fases funcionales |\\n| `Path(INPUT_DIR).rglob(\\\"*.pdf\\\")` | Recorrido recursivo de input | Adaptación estructural | Soporta subcarpetas y organización compleja |\\n| `log_mensaje(...)` | Mensajes visuales por etapa | Expresión simbiótica | Retroalimentación multilingüe contextual |\\n| `try/except` por archivo | Manejo de errores sin detener el sistema | Mutación defensiva | Permite procesar documentos parcialmente válidos |\\n\\n---\\n\\n## 📈 Trazabilidad Evolutiva\\n\\n| Vuelta | Radio | Madurez | Gen | Bloque | Commit sugerido |\\n| --- | --- | --- | --- | --- | --- |\\n| V1 | R3 | C1 | main | b.1 | `feat(D): main – orquestación general y procesamiento batch` |\\n| V1 | R3 | C1.1 | main | b.2 | `refac(D): validación por metadatos antes de exportar` |\\n| V1 | R3 | C1.2 | logger | b.1 | `feat(D): logger visual por etapa desde main.py` |\\n\\n---\\n\\n## 📊 Resultados Semánticos del Gen\\n\\n| Indicador | Resultado |\\n| --- | --- |\\n| PDFs procesados correctamente | ✅ Todos los de `input/` |\\n| Archivos fallidos aislados | ✅ Se loguean sin frenar el pipeline |\\n| Integración modular completa | ✅ Sí |\\n| Subcarpetas reconocidas | ✅ Con `.rglob()` |\\n| Logs en `es/en` según entorno | ✅ `LANG` dinámico |\\n\\n---\\n\\n## 🔍 Análisis Diferencial (r′(t), c′(t))\\n\\n- ∆r = +1.0 → Introduce flujo vital completo, conectando todos los genes funcionales.\\n- ∆c = +1.0 → Madurez total en la orquestación modular, feedback y tolerancia a fallos.\\n\\n---\\n\\n## 🧠 Reflexión Final del Gen main.py\\n\\n> \\\"Este gen es el corazón de OpenPages Pipeline. Une cada mutación en un todo funcional. Si cleaner.py prepara, y classifier.py decide, main.py es quien da el compás. Aprendí que orquestar no es controlar, es permitir que todo fluya en armonía.”\\n> \\n> \\n> — *Ingeniero de Flujo · Dewey Pipeline · Vuelta 1*\\n> \\n\\n---\\n\\n## 🧬 Transición a siguiente Gen – `cli.py`\\n\\n**Contexto**: Ahora que `main.py` está consolidado, el usuario necesita invocar sus funciones con flexibilidad.\\n\\n**Hipótesis**: Incorporar `argparse` o `typer` permitirá personalizar la experiencia (idioma, input, flags) y preparar al pipeline para despliegues reales.\\n\\n**Próximo gen**: `cli.py` – Controlador evolutivo desde la línea de comandos.\\n\\n---\\n\\n## 📇 Ficha Helicoidal\\n\\n| Elemento | Valor |\\n| --- | --- |\\n| 🧬 Gen | `main.py` |\\n| 🌀 Tag funcional | `🌀 Orquestador del Pipeline` |\\n| 🔁 Vuelta activa | `V1` |\\n| 🔮 Futuras vueltas | `V2` (integración CLI), `V4` (parámetros personalizables) |\\n| ⚙️ Función principal | `main()` |\\n| 🧠 Tipo de expresión | Integradora / Ejecutora |\\n| 📈 r(t) | 1.1 |\\n| 📈 c(t) | 0.9 |\\n| 📉 r′(t) | +0.4 |\\n| 📉 c′(t) | +0.4 |\\n| ✅ Estado actual | ✅ Estable, probado, con soporte a logs, validación y fallback |\\n| 🔗 Relacionado con | `parser.py`, `cleaner.py`, `classifier.py`, `logger.py`, `exporter.py` |\",\"type\":\"text/markdown\",\"title\":\"🌀 Orquestador del Pipeline\",\"modified\":\"20250423151618961\",\"tags\":\"[[🌀 Orquestador del Pipeline]] [[--- 🌀 Helices de desarrollo]] [[--- Codigo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🌀1️⃣ Vuelta #1]] [[--🧬 src/]] -src_classifier.py -src_cleaner.py -src_exporter.py -src_logger.py -src_parser.py -src_utils.py -src_validator.py [[--📥 input/]]\",\"tmap.id\":\"0766912e-a04b-465d-bb9a-d6b33f681222\",\"color\":\"DarkGreen\"},{\"created\":\"20250422004559627\",\"text\":\"---\\n\\n# Gen [[-src_logger.py]]: 🌀 Persistencia con loguru, logs por archivo\\n\\n> Segunda vuelta de madurez del sistema: introducción de **logs estructurados y trazables** como mecanismo de expresión genética persistente. Este gen evoluciona para proveer transparencia, trazabilidad semántica y conexión con sistemas de auditoría externos como dashboards.\\n\\n---\\n\\n## 📂 Archivos Involucrados\\n\\n| Archivo | Descripción |\\n| --- | --- |\\n| `src/logger.py` | 🧬 Gen funcional: registra eventos multilingües, estructurados y visuales |\\n| `tests/test_logger.py` | 🧪 Validación genética: verifica estabilidad de expresión |\\n| `main.py` | 🧠 Núcleo: activa el gen `logger` en el flujo principal |\\n| `README.logger.md` | 📜 Regulación epigenética: documenta misión, estructura y uso del gen |\\n\\n---\\n\\n## 🧠 Funciones del Gen `logger`\\n\\n| Función | Rol |\\n| --- | --- |\\n| `log_evento()` | Expresión principal: emite logs multilingües, visuales y persistentes |\\n| `EXECUTION_ID` | Identificador por ejecución: trazabilidad por vuelta helicoidal |\\n| `LANG`, `LOG_LEVEL` | Epigenética activa: personaliza la expresión del gen por entorno |\\n\\n---\\n\\n## 🔧 Detalles Técnicos Evolutivos\\n\\n- Implementación con `loguru`\\n- Logs por ejecución con UUID único\\n- Exportación dual: `.log` humano / `.jsonl` para IA\\n- Estructura compatible con dashboards externos (Superset, Metabase)\\n- Uso de `try/except` para evitar fallas silenciosas\\n\\n---\\n\\n## 📘 Aprendizajes Evolutivos\\n\\n- Diferencia entre logging humano y machine-readable\\n- Uso de logs como forma de trazabilidad funcional (c(t))\\n- Epigenética en `.env`: permite logs multilingües y configurables\\n- Diseño de pruebas sin `capsys`: expresiones observables desde funciones\\n\\n---\\n\\n## 📈 Estado Genético\\n\\n| Gen | Estado | r(t) | c(t) |\\n| --- | --- | --- | --- |\\n| `logger.py` | 🧬 Activo | +1.5 | +1.2 |\\n| `test_logger.py` | ✅ 100% cobertura | +0.5 | +0.6 |\\n| `main.py` | ✅ Integrado | +0.2 | +0.3 |\\n\\n---\\n\\n## 🧪 Mutaciones Detectadas y Solucionadas\\n\\n| Problema | Solución |\\n| --- | --- |\\n| `LANG` no aplicaba en CI | Relectura dinámica del entorno |\\n| `.jsonl` malformado | Manejo defensivo con `try/except` |\\n| `capsys` frágil en test | Uso de retornos explícitos desde `log_evento()` |\\n\\n---\\n\\n## 💬 Commits Asociados (Estructura helicoidal genética)\\n\\n```bash\\nfeat(D): estructura base log_evento() - (V2.R1.C0.6 / gen=logger, b=1)\\nrefac(D): UUID único por ejecución - (V2.R1.C0.9 / gen=logger, b=2)\\ndocs(D): README.logger.md actualizado - (V2.R2.C1 / gen=logger, b=docs)\\ntest(D): test_logger con retorno explícito - (V2.R1.C1 / gen=logger, b=test)\\nfix(D): validación de línea corrupta en log.jsonl - (V2.R1.C1 / gen=logger, b=3)\\n```\\n\\n---\\n\\n## 🧭 Reflexión Helicoidal\\n\\n> “Este gen es más que un logger: es el sistema nervioso del organismo computacional. Permite rastrear, auditar y entender su comportamiento a través del tiempo. Aprendí que la trazabilidad no es un lujo, sino un derecho funcional.”\\n\\n— *Profe del OpenPages Pipeline*\\n\\n---\\n\\n## 📇 Ficha Helicoidal\\n\\n| Elemento | Valor |\\n| --- | --- |\\n| 🧬 Gen | `logger.py` |\\n| 🌀 Tag funcional | `🌀 Persistencia con loguru, logs por archivo` |\\n| 🔁 Vuelta activa | `V2` |\\n| 🔮 Futuras vueltas | `V4` (niveles de log CLI), `V5` (dashboard logs) |\\n| ⚙️ Función principal | `log_event()` |\\n| 🧠 Tipo de expresión | Trazabilidad / Retroalimentación |\\n| 📈 r(t) | 0.9 |\\n| 📈 c(t) | 0.7 |\\n| 📉 r′(t) | +0.5 |\\n| 📉 c′(t) | +0.5 |\\n| ✅ Estado actual | ✅ Activo, logs visuales y estructurados por PDF |\\n| 🔗 Relacionado con | `main.py`, `validator.py`, `enhancer.py`, `exporter.py`, `CI/CD` |\",\"type\":\"text/markdown\",\"title\":\"🌀 Persistencia con loguru, logs por archivo\",\"modified\":\"20250423055834104\",\"tags\":\"[[🌀 Persistencia con loguru, logs por archivo]] [[--- 🌀 Helices de desarrollo]] [[--- Codigo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🌀2️⃣ Vuelta #2]] -src_logger.py -tests_test_logger.py -main.py -README.logger.md\",\"tmap.id\":\"82074380-e024-469b-9a78-07226e52a87c\",\"color\":\"DarkGreen\"},{\"created\":\"20250417164631886\",\"text\":\"# 🧬 Impacto Evolutivo – Vuelta 1 del OpenPages Pipeline\\n\\n> Primera transcripción génica completa. Esta vuelta da origen al organismo computacional Dewey Pipeline, con expresión funcional mínima viable, trazabilidad básica, y estructura modular estable. Marca el nacimiento del sistema como entidad semántica preparada para madurar.\\n> \\n\\n---\\n\\n## 🎯 Objetivo helicoidal\\n\\n> Dar vida al sistema: extraer, limpiar, clasificar y exportar conocimiento desde documentos científicos PDF, creando la base estructural del pipeline con un diseño modular, semántico y AI-ready.\\n> \\n\\n---\\n\\n## 🧬 Genes activados en V1\\n\\n| Gen / Módulo | Expresión funcional | Estado | r(t) | c(t) |\\n| --- | --- | --- | --- | --- |\\n| [[🧬`parser.py`]] | `extract_text()` – lectura inteligente de PDFs | ✅ | 1.0 | 0.3 |\\n| [[🧬`cleaner.py`]] | `limpiar_texto_completo()` – limpieza legible y markdown-ready | ✅ | 1.0 | 0.4 |\\n| [[🧬`classifier.py`]] | `clasificar_documento()` – categorización Dewey heurística | ✅ | 1.1 | 0.4 |\\n| [[🧬`exporter.py`]] | `exportar_archivos()` – generación `.txt`, `.md`, `.jsonl` | ✅ | 1.0 | 0.5 |\\n| [[🧬`logger.py`]] | `log_mensaje()` – feedback multilingüe en consola | ✅ | 0.8 | 0.4 |\\n| [[🧬`utils.py`]] | `es_pdf_complejo()`, `contiene_formula()` – soporte heurístico | ✅ | 1.0 | 0.3 |\\n| [[🧬`main.py`]] | `main()` – orquestación secuencial del pipeline | ✅ | 1.0 | 0.5 |\\n\\n---\\n\\n## 📈 Derivadas observadas – ∂r/∂t, ∂c/∂t\\n\\n| Gen | r′(t) | c′(t) | Nota |\\n| --- | --- | --- | --- |\\n| `parser.py` | +1.0 | +0.3 | Primer extractor funcional |\\n| `exporter.py` | +1.0 | +0.5 | Salida semántica en múltiples formatos |\\n| `classifier.py` | +1.1 | +0.4 | Nacimiento de la clasificación temática |\\n| `logger.py` | +0.8 | +0.4 | UX multilingüe y estructurada |\\n\\n---\\n\\n## 🛠️ Funciones expresadas\\n\\n| Función | Gen origen | Rol |\\n| --- | --- | --- |\\n| `extract_text()` | `parser.py` | Lectura PDF (fitz) |\\n| `limpiar_texto_completo()` | `cleaner.py` | Reestructura y normaliza texto |\\n| `clasificar_documento()` | `classifier.py` | Detecta título, autor, categoría |\\n| `exportar_archivos()` | `exporter.py` | Exporta `.md`, `.jsonl`, `.txt` |\\n| `log_mensaje()` | `logger.py` | Da feedback visual al usuario |\\n\\n---\\n\\n## 📦 Expresión fenotípica – Output\\n\\n| Archivo generado | Tipo | Propósito |\\n| --- | --- | --- |\\n| `output.jsonl` | Proteína semántica | Ingesta por IA |\\n| `output.md` | Documento legible | Debug y revisión |\\n| `output.txt` | Base plana | Lectura o extracción básica |\\n\\n---\\n\\n## 🔍 Problemas detectados (anomalías en expresión)\\n\\n| Problema | Corrección / Mutación |\\n| --- | --- |\\n| PDFs vacíos o escaneados | `es_pdf_complejo()` |\\n| Fórmulas como ruido | `contiene_formula()` |\\n| Clasificación frágil | Output en `dict` + fallback `000 - General` |\\n| Lectura limitada a `/input` | `Path().rglob(\\\"*.pdf\\\")` |\\n\\n---\\n\\n## 📘 Reflexión genética\\n\\n> “Esta vuelta fue la prueba de que el sistema podía respirar. Extraer, limpiar y clasificar era más que funcionalidad: era expresión. El pipeline empezó a tener forma de organismo computacional capaz de evolucionar.”\\n> \\n> \\n> — *diegoabeltran_16 · Fundador del Genoma Dewey*\\n> \\n\\n---\\n\\n## 🧬 Estado helicoidal – V1\\n\\n| Indicador | Valor |\\n| --- | --- |\\n| Vuelta | V1 |\\n| Amplitud funcional r(t) | 2.0 |\\n| Madurez semántica c(t) | 1.0 |\\n| Módulos expresados | 7 |\\n| Test coverage básico | ✅ Sí |\\n| Output generado | ✅ `.txt`, `.md`, `.jsonl` |\\n\\n---\\n\\n## 📘 Nombre técnico\\n\\n```\\ncss\\nCopyEdit\\n(V1.R2.C1) – Nacimiento del pipeline modular con expresión genética funcional mínima viable.\\n\\n```\",\"type\":\"text/markdown\",\"title\":\"🌀1️⃣ Vuelta #1\",\"modified\":\"20250423054003480\",\"tags\":\"[[--- 🌀 Helices de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🎯 Plan de desarrollo]] [[🎯 Estructura]] [[🌀1️⃣ Vuelta #1]] [[🌀 Extracción Inteligente de Texto]] [[🌀 Clasificación Temática y Dewey]] [[🌀 Limpieza y Preparación de Texto]] [[🌀 Generación de Archivos de Salida]] [[🌀 Feedback Multilingüe]] [[🌀 Orquestador del Pipeline]] [[🌀 Herramientas Auxiliares]]\",\"tmap.id\":\"1f9bdfac-c4a5-403a-ac96-661a934ea5ed\",\"color\":\"#9cdb00\"},{\"created\":\"20250422003956619\",\"text\":\"# 🧬 Impacto Evolutivo – Vuelta 2 del OpenPages Pipeline\\n\\n> Segunda expresión helicoidal. Marca la transición del sistema hacia la trazabilidad semántica, validación estructural y preparación para integración externa. Se activa la conciencia del pipeline como organismo responsable, confiable y preparado para ser entendido por humanos y máquinas.\\n> \\n\\n---\\n\\n## 🎯 Objetivo helicoidal\\n\\n> Elevar la madurez y trazabilidad del sistema mediante validación, enriquecimiento semántico, logging estructurado y activación opcional vía CLI. Esta vuelta integra retroalimentación humana y prepara la evolución hacia datasets IA-ready.\\n> \\n\\n---\\n\\n## 🧬 Genes activados en V2\\n\\n| Gen / Módulo | Expresión funcional | Estado | r(t) | c(t) |\\n| --- | --- | --- | --- | --- |\\n| [[🧬`validator.py`]] | `validar_documento()` – verificación semántica | ✅ | 1.0 | 0.6 |\\n| [[🧬`logger.py`]] | `log_event()` + persistencia multilingüe | ✅ | 0.9 | 0.7 |\\n| [[🧬`enhancer.py`]] | `fix_unicode()`, `reparar_cid()` – limpieza profunda | ✅ | 1.1 | 0.5 |\\n| [[🧬`ocr.py`]] | `ocr_completo()`, `ocr_mix_mode()` – fallback OCR | ⚠️ | 1.5 | 0.4 |\\n| [[🧬`trainset_builder.py`]] | `guardar_jsonl_etiquetado()` – exportar corpus IA | 🟡 | 1.0 | 0.3 |\\n| [[🧬`cli.py`]] | `handle_flags()`, `--ocr`, `--lang` | 🟡 | 1.2 | 0.2 |\\n| [[🧬`parser.py`]] | `extract_text_with_fallback()` – con heurística OCR | ✅ | 0.8 | 0.6 |\\n\\n---\\n\\n## 📈 Derivadas observadas – ∂r/∂t, ∂c/∂t\\n\\n| Gen | r′(t) | c′(t) | Nota |\\n| --- | --- | --- | --- |\\n| `ocr.py` | +1.5 | +0.4 | Gen emergente en construcción |\\n| `cli.py` | +1.2 | +0.2 | Activación de interfaz externa |\\n| `logger.py` | +0.5 | +0.5 | Consolidación auditiva y visual |\\n| `validator.py` | +0.9 | +0.6 | Filtrado semántico sólido |\\n\\n---\\n\\n## 🛠️ Funciones expresadas\\n\\n| Función | Gen origen | Rol |\\n| --- | --- | --- |\\n| `validar_documento()` | `validator.py` | Filtrado de documentos inválidos |\\n| `fix_unicode()` | `enhancer.py` | Corrección de mojibake |\\n| `ocr_completo()` | `ocr.py` | OCR sobre PDF completo |\\n| `ocr_mix_mode()` | `ocr.py` | OCR parcial como fallback |\\n| `log_event()` | `logger.py` | Logging estructurado por documento |\\n| `extract_text_with_fallback()` | `parser.py` | Detección inteligente de necesidad de OCR |\\n| `guardar_jsonl_etiquetado()` | `trainset_builder.py` | Salida IA supervisada |\\n| `handle_flags()` | `cli.py` | Interacción vía CLI |\\n\\n---\\n\\n## 📦 Salidas helicoidales\\n\\n- `[[🧾log.jsonl]]` estructurado por documento\\n- `[[📤classifier_IA.jsonl]]` con corpus IA semántico\\n- Archivos `.md`, `.jsonl`, `.txt` exportados con validación previa\\n- CLI funcional con `-ocr`, `-lang`, `-debug`\\n- Stats por documento (`stats.json`) para dashboards\\n\\n---\\n\\n## 📘 Reflexión de la hélice\\n\\n> “La Vuelta 2 no solo integró validaciones y trazabilidad: fue el primer momento donde el sistema comenzó a pensar en sí mismo. Dejó de ser solo funcional y empezó a ser confiable, auditable, y semánticamente consciente.”\\n> \\n> \\n> — *Ingeniero de Significado · OpenPages Helix V2*\\n> \\n\\n---\\n\\n## ✅ Proceso evolutivo – genes expresados\\n\\n## . [[🌀 Persistencia con loguru, logs por archivo]]\\n\\n## . [[🌀 Chequeo previo a exportación]]\\n\\n## . [[🌀 Limpieza avanzada]]\\n\\n## . [[🌀 OCR Inteligente con Tesseract]]\\n\\n## . [[trainset_builder.py - ]]\\n\\n## . [[[cli.py](http://cli.py/) - ]]\\n\\n## . [[extract_text() - ]]\",\"type\":\"text/markdown\",\"title\":\"🌀2️⃣ Vuelta #2\",\"modified\":\"20250423053751275\",\"tags\":\"[[🌀2️⃣ Vuelta #2]] [[--- 🌀 Helices de desarrollo]] [[--- Codigo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]\",\"tmap.id\":\"6ecd20bc-013d-4462-bd81-1d1994ffad57\",\"color\":\"#9cdb00\"},{\"created\":\"20250417013235155\",\"text\":\"---\\n\\n# 📊 Algoritmos y Fundamento Matemático – OpenPages Pipeline\\n\\nEste documento describe los algoritmos centrales y la lógica matemática que sustentan el funcionamiento de **OpenPages Pipeline**. Cada módulo corresponde a una unidad funcional (gen) dentro de una arquitectura helicoidal basada en cálculo diferencial, lo que permite trazar y entender el progreso semántico y técnico del sistema.\\n\\n---\\n\\n## 🧠 Modelo Helicoidal Diferencial\\n\\n### Fórmula del desarrollo:\\n\\\\[\\n\\\\vec{r}(t) = \\\\begin{pmatrix}\\nr \\\\cos(t) \\\\\\\\\\nr \\\\sin(t) \\\\\\\\\\nc \\\\cdot t\\n\\\\end{pmatrix}\\n\\\\]\\n\\n| Símbolo | Significado |\\n|---------|-------------|\\n| `t` | Vuelta del desarrollo (tiempo/iteración) |\\n| `r` | Amplitud funcional: qué tanto cambia el sistema |\\n| `c` | Nivel de madurez técnica alcanzada |\\n\\nLa derivada de esta curva describe la **velocidad de evolución del sistema**:\\n\\\\[\\n\\\\vec{r}'(t) = (-r \\\\sin(t),\\\\ r \\\\cos(t),\\\\ c)\\n\\\\]\\n\\nEsto guía decisiones sobre cuándo intensificar testing, modularización o innovación.\\n\\n---\\n\\n## 🧩 Algoritmos por Módulo Funcional\\n\\n### 1. `classifier.py` – Clasificación heurística Dewey\\n**Objetivo:** Asignar categoría temática a un documento\\n```python\\nfunction clasificar_texto(texto):\\n    texto_normalizado = normalizar_texto(texto)\\n    for palabra, categoria in MAPA_CLAVES.items():\\n        if palabra in texto_normalizado:\\n            return categoria.nombre, categoria.dewey\\n    return \\\"Desconocida\\\", \\\"000\\\"\\n```\\n**Base:** coincidencia semántica + mapeo jerárquico → futura expansión a clustering y embeddings.\\n\\n---\\n\\n### 2. `parser.py` – Extracción textual desde PDF\\n**Lógica:** Usa `PyMuPDF` para recorrer páginas y bloques de texto, con fallback heurístico (`pdfplumber` para complejidad alta).\\n\\n---\\n\\n### 3. `validator.py` – Validación semántica\\n**Función:**\\n```python\\nfunction es_pdf_complejo(ruta):\\n    bloques = contar_bloques_por_pagina(ruta)\\n    promedio = media(bloques)\\n    return promedio == 0 or promedio > umbral\\n```\\n**Base matemática:** media y umbral para definir complejidad estructural.\\n\\n---\\n\\n### 4. `exporter.py` – Formateo y salida estructurada\\n**Lógica:**\\n```python\\nfunction exportar_salida(texto, metadata):\\n    nombre = formatear_nombre(metadata)\\n    guardar_txt(nombre, texto)\\n    guardar_md(nombre, texto, metadata)\\n    guardar_jsonl(nombre, dividir_en_parrafos(texto))\\n```\\n**Apoyo matemático:** chunking = segmentación por longitud y puntuación → base para vectores.\\n\\n---\\n\\n### 5. `logger.py` – Retroalimentación multilingüe\\n**Modelo:**\\n```python\\nfunction mostrar_mensaje(evento, lang=\\\"es\\\"):\\n    mensaje = DICCIONARIO[evento][lang]\\n    print(mensaje.format(...))\\n```\\n**Estructura:** Diccionario multinivel indexado por evento e idioma. Extensible vía archivo de configuración.\\n\\n---\\n\\n### 6. `main.py` – Coordinación orquestada (vuelta completa)\\nCada ejecución registra una vuelta del pipeline con su `t`, `r` y `c` correspondientes.\\n\\n```python\\ndef vuelta(t):\\n    r = amplitud_del_cambio(t)\\n    c = madurez_alcanzada(t)\\n    return vector_helicoidal(t, r, c)\\n```\\n---\\n\\n## 🔢 Medidas y métricas futuras\\n\\n- `c(t)` será cuantificable con:\\n  - % de módulos con tests\\n  - nivel de logging estructurado\\n  - número de formatos de salida\\n- `r(t)` dependerá de:\\n  - líneas de código afectadas\\n  - número de módulos modificados\\n  - nueva funcionalidad incorporada\\n\\n---\\n\\n## ✅ Conclusión\\n\\nEste enfoque algorítmico-matemático permite que OpenPages Pipeline no solo evolucione técnicamente, sino que lo haga de forma trazable, auditable y comprensible.\\n\\n> Cada función es una mutación dirigida. Cada iteración, una expresión helicoidal de conocimiento computacional.\\n\\n\",\"type\":\"text/markdown\",\"title\":\"🎯 Algoritmos y matematicas\",\"modified\":\"20250423014613016\",\"tags\":\"[[🎯 Algoritmos y matematicas]] [[🎯 Componentes]] [[🎯 Requisitos]] [[🎯 Estructura]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] Español\",\"color\":\"#00c3db\",\"tmap.id\":\"b6627e77-1d0b-450e-94c9-a89ed66a8b66\"},{\"created\":\"20250417012641075\",\"text\":\"---\\n\\n# 🏗️ Arquitectura – OpenPages Pipeline\\n\\n**OpenPages Pipeline** es un sistema modular, ético y offline-first que transforma documentos científicos en PDF en archivos estructurados, listos para tareas de inteligencia artificial, recuperación semántica o estudio humano. Su arquitectura helicoidal está pensada para crecer por **vueltas de madurez**, permitiendo escalar desde un script CLI hasta una plataforma IA-ready integrada con RAGs, embeddings, APIs y visualizaciones.\\n\\nEste diseño se inspira en un modelo **genético-semántico**, donde cada módulo funcional es un *gen*, cada ejecución una *expresión*, y cada iteración una *vuelta helicoidal* de madurez creciente.\\n\\n---\\n\\n## 🧱 Capas arquitectónicas\\n\\n1. **Capa de Interacción con el Usuario**\\n2. **Capa de Lógica de Aplicación**\\n3. **Capa de Datos**\\n4. **Capa de Integración Externa**\\n5. **Capa de Seguridad y Ética (Transversal)**\\n\\n---\\n\\n## 🎛️ 1. Capa de Interacción con el Usuario\\n\\n**Descripción:** Entrada del sistema. Actualmente funciona desde CLI, con soporte futuro para Web UI o scripts remotos.\\n\\n**Componentes:**\\n- CLI básica (`main.py`)\\n- *(Próximo)* CLI extendida (`cli.py` con Typer)\\n- *(Futuro)* Web UI simple (upload, preview, export)\\n\\n**Responsabilidades:**\\n- Capturar inputs del usuario\\n- Mostrar mensajes multilingües (`LANG`)\\n- Activar vueltas del pipeline de forma controlada\\n\\n---\\n\\n## 🧠 2. Capa de Lógica de Aplicación\\n\\n**Descripción:** Núcleo del sistema. Coordina los módulos funcionales o *genes computacionales* del sistema.\\n\\n| Módulo | Función |\\n|--------|---------|\\n| `main.py` | Orquestación general |\\n| `parser.py` | Extracción textual desde PDF (`fitz`) |\\n| `cleaner.py` | Limpieza y normalización de texto |\\n| `classifier.py` | Clasificación temática (heurística Dewey) |\\n| `validator.py` | Reglas de calidad, filtro semántico |\\n| `exporter.py` | Generación `.txt`, `.md`, `.jsonl` |\\n| `logger.py` | Logging estructurado bilingüe |\\n| `utils.py` | Heurísticas auxiliares y formatos |\\n\\n**Responsabilidades:**\\n- Modularidad desacoplada\\n- Ejecución secuencial y clara\\n- Diseño tipo *genoma funcional*: cada módulo puede mutar, escalar o especializarse, manteniendo trazabilidad semántica\\n\\n---\\n\\n## 🗃️ 3. Capa de Datos\\n\\n**Descripción:** Entrada, salida y almacenamiento de información procesada.\\n\\n| Elemento | Rol |\\n|---------|-----|\\n| `/input/` | PDFs originales organizados por carpeta |\\n| `/output/` | Archivos de salida (limpios, AI-ready) |\\n| `.jsonl` | Chunking por párrafos para NLP/embeddings |\\n| `.md` | Markdown con YAML de metadatos |\\n| `.txt` | Texto plano legible |\\n\\n**Responsabilidades:**\\n- Estructura reproducible y auditable\\n- Preparación para base de datos o vector stores\\n- Cada archivo es una *proteína informacional* del sistema\\n\\n---\\n\\n## 🔌 4. Capa de Integración Externa\\n\\n**Descripción:** Conectores y módulos expansibles para incorporar el pipeline en sistemas mayores.\\n\\n| Módulo | Propósito |\\n|--------|-----------|\\n| `embedding.py` | Convertir `.jsonl` en vectores semánticos |\\n| `ocr.py` | Procesamiento de PDFs escaneados |\\n| `api.py` | Web API con FastAPI (próximo) |\\n| `cli.py` | CLI extendida con Typer |\\n\\n**Responsabilidades:**\\n- Conectar con FAISS, LangChain, Weaviate\\n- Proveer endpoints o plugins personalizados\\n- Soporte para pipelines IA, notebooks, servidores\\n\\n---\\n\\n## 🔐 5. Capa de Seguridad y Ética (Transversal)\\n\\n**Enfoque de privacidad por diseño:**\\n\\n| Práctica | Aplicación |\\n|----------|------------|\\n| ✅ Validación y filtro | Tipos de archivo, longitud mínima, filtros semánticos |\\n| ✅ `.env` | Configuraciones sensibles separadas |\\n| ✅ Trazabilidad | Logging multilingüe y por vuelta helicoidal |\\n| ✅ Offline-first | No requiere conexión, privacidad total |\\n| ✅ Compatible con HTTPS/OAuth | En capas de integración API |\\n\\n---\\n\\n## 🔄 Mejoras arquitectónicas proyectadas\\n\\n- CLI robusta con subcomandos y flags\\n- Logger persistente (`loguru`, `.json`, `.log`)\\n- OCR (`ocr.py`) para PDFs escaneados\\n- Clasificador IA con LLMs y taxonomías abiertas\\n- Modo servidor (FastAPI) para trabajo en equipo\\n- UI Web accesible (Flask + Tailwind)\\n- Sistema de plugins (hot-swap para `classifier`, `exporter`...)\\n- Contenedorización (`Dockerfile`, `docker-compose`)\\n- Internacionalización extensible (i18n + autotraducción)\\n\\n---\\n\\n## ✅ Conclusión\\n\\nOpenPages Pipeline es más que un extractor de PDFs: es un **organismo computacional vivo**, cuya arquitectura está pensada para madurar helicoidalmente, como una hélice de conocimiento técnico-semántico.\\n\\nSu diseño modular, ético y trazable garantiza que:\\n\\n- 👨‍🏫 Sea comprensible para estudiantes\\n- 🧑‍💻 Escalable para desarrolladores\\n- 🤖 Preparado para integrarse con IA y evolucionar\\n\\n> *Cada capa es una hebra de ADN computacional. Cada vuelta, una nueva expresión funcional. Juntas, forman un sistema que aprende, muta y se conecta con sistemas vivos de conocimiento.*\\n\\n\",\"type\":\"text/markdown\",\"title\":\"🎯 Arquitectura\",\"modified\":\"20250423014207700\",\"tags\":\"[[🎯 Arquitectura]] [[🎯 Flujo de interaccion]] [[🎯 Componentes]] [[🎯 Requisitos]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] Español\",\"color\":\"#00c3db\",\"tmap.id\":\"5350baec-c84e-487d-bd02-ea09e1cd5268\"},{\"created\":\"20250417024025172\",\"text\":\"\",\"type\":\"text/markdown\",\"title\":\"🎯 CI/CD\",\"modified\":\"20250423005135790\",\"tags\":\"[[🎯 CI/CD]] [[🎯 Plan de desarrollo]] [[🎯 Estructura]] [[🎯 Flujo de interaccion]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]\",\"color\":\"#00c3db\",\"icon\":\"$:/core/images/github\",\"tmap.id\":\"91d11c09-a695-4f3a-b85a-84261d229ce7\"},{\"created\":\"20250417013128906\",\"text\":\"---\\n\\n# 🧩 Componentes – OpenPages Pipeline\\n\\nEste apartado detalla los componentes principales de **OpenPages Pipeline**, una herramienta modular, semántica y matemáticamente trazable, que transforma documentos PDF científicos en estructuras listas para su reutilización por humanos o IA. Todos los componentes responden al **modelo helicoidal**, donde cada módulo es un *gen computacional* y cada ejecución, una *expresión funcional*.\\n\\n---\\n\\n## 🧠 Manejador de Vueltas y CLI (`main.py` / `cli.py`)\\n\\n**Funcionalidad:**\\n- Punto de entrada orquestador del pipeline helicoidal\\n- Permite ejecutar `python main.py` o subcomandos (`--export`, `--summary`, etc.)\\n- Calcula parámetros de vuelta: `t`, `r(t)`, `c(t)`\\n\\n**Modelo helicoidal:**\\n- Cada ejecución activa un vector `\\\\(\\\\vec{r}(t)\\\\)` que registra el estado semántico del sistema\\n\\n---\\n\\n## 📄 Módulo de Extracción (`parser.py`)\\n\\n**Funcionalidad:**\\n- Usa `PyMuPDF` (`fitz`) para extraer texto y estructura por bloques\\n- Fallback para PDFs complejos (`pdfplumber`)\\n\\n**Base matemática:**\\n- Análisis por bloques para inferir complejidad estructural (apoya `validator.py`)\\n\\n---\\n\\n## 🧹 Módulo de Limpieza (`cleaner.py`)\\n\\n**Funcionalidad:**\\n- Normaliza texto para NLP (saltos, Unicode, espacios)\\n- Convierte secciones en Markdown legible\\n\\n**Expresión semántica:**\\n- Prepara texto para chunking y salida `.jsonl`\\n\\n---\\n\\n## 🧠 Módulo de Clasificación (`classifier.py`)\\n\\n**Funcionalidad:**\\n- Clasifica temáticamente vía heurísticas + keywords\\n- Devuelve diccionario con metadatos (`dewey`, categoría, título, autor)\\n\\n**Extensión futura:**\\n- Reemplazo o validación con embeddings y modelos de lenguaje\\n\\n---\\n\\n## 📈 Módulo de Validación (`validator.py`)\\n\\n**Funcionalidad:**\\n- Detecta PDFs escaneados, vacíos o inservibles\\n- Evalúa si el texto extraído supera umbrales de calidad\\n\\n**Base matemática:**\\n- Usa funciones de conteo, media y heurísticas booleanas para marcar documentos complejos\\n\\n---\\n\\n## 💾 Módulo de Exportación (`exporter.py`)\\n\\n**Funcionalidad:**\\n- Genera `.txt`, `.md` y `.jsonl` con nombre semántico\\n- Usa metadata para formatear nombres (`essay_530_fisica_cuantica_nombre_autor.jsonl`)\\n- Fragmenta texto en párrafos (ideal para embeddings)\\n\\n---\\n\\n## 🗂 Módulo de Utilidades (`utils.py`)\\n\\n**Funciones comunes:**\\n- `normalizar_texto()` – limpieza previa a chunking\\n- `contiene_formula()` – detectar expresiones matemáticas\\n- `es_pdf_complejo()` – filtra por densidad de bloques\\n\\n---\\n\\n## 💬 Módulo de Logging (`logger.py`)\\n\\n**Funcionalidad:**\\n- Mensajes multilingües dinámicos (`es` / `en`)\\n- *(Futuro)* Logging persistente por vuelta (`logs/V1_R2_C1.json`)\\n\\n---\\n\\n## 📂 Estructura de Carpetas\\n\\n```\\nopenpages-pipeline/\\n├── input/              # PDFs organizados por carpeta\\n├── output/             # Archivos exportados (txt, md, jsonl)\\n├── src/                # Módulos funcionales (genes)\\n├── docs/               # Manifiestos, vueltas, principios\\n├── tests/              # Unitarios, fixtures PDF, cobertura\\n├── main.py / cli.py    # Entrada al sistema\\n├── .env                # Configuración externa segura\\n```\\n\\n---\\n\\n## 🧪 Sistema de Testing (`/tests/`)\\n\\n**Cobertura actual:**\\n- Extracción (`test_parser.py`)\\n- Limpieza (`test_cleaner.py`)\\n- Clasificación (`test_classifier.py`)\\n- Exportación (`test_exporter.py`)\\n\\n**Preparación para CI/CD:**\\n- GitHub Actions (`test.yml`)\\n- Fixtures semánticos (`pdf_limpio.pdf`, `pdf_vacio.pdf`, `pdf_errores.pdf`)\\n\\n---\\n\\n## 🔮 Componentes proyectados (helices futuras)\\n\\n| Módulo | Propósito |\\n|--------|-----------|\\n| `embedding.py` | Generación de vectores semánticos (`.jsonl` → FAISS) |\\n| `ocr.py` | Procesamiento de PDFs escaneados |\\n| `api.py` | API web para carga, preview y auditoría |\\n| `db.py` | Registro en SQLite o vector store |\\n| `plugin/*.py` | Sistema de extensiones personalizadas |\\n\\n---\\n\\n## ✅ Conclusión\\n\\nCada componente de OpenPages Pipeline es un gen diseñado para ser expresado en una vuelta semántica específica. Su diseño no solo busca funcionalidad inmediata, sino madurez técnica y semántica progresiva.\\n\\n> *“Un pipeline no solo debe ejecutar tareas, debe expresar conocimiento con estructura, trazabilidad y propósito evolutivo.”*\\n\\n\",\"type\":\"text/markdown\",\"title\":\"🎯 Componentes\",\"modified\":\"20250423015046128\",\"tags\":\"[[🎯 Componentes]] [[🎯 Requisitos]] [[🎯 Estructura]] [[🎯 Algoritmos y matematicas]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] Español\",\"color\":\"#00c3db\",\"tmap.id\":\"05ad41c1-67f3-4447-8237-6e3ebc92fdcd\"},{\"created\":\"20250417011018809\",\"text\":\"---\\n\\n# 🧬 DOFA – OpenPages Pipeline (Modelo Helicoidal y Genético)\\n\\nEste análisis DOFA (Debilidades, Oportunidades, Fortalezas y Amenazas) permite reflexionar estratégicamente sobre el enfoque evolutivo, modular y semántico de OpenPages Pipeline.\\n\\n---\\n\\n## ✅ F – Fortalezas\\n\\n| Fortaleza | Descripción |\\n|-----------|-------------|\\n| 🧠 Enfoque conceptual sólido | Basado en modelos científicos: hélice, genética, semántica. |\\n| 🧩 Modularidad total | Cada módulo es un gen funcional, activable y extensible. |\\n| 🔍 Trazabilidad y transparencia | Logging estructurado, evolución por vueltas, commits semánticos. |\\n| 📦 Exportación lista para IA | `.jsonl` y `.md` optimizados para NLP, RAG, embeddings. |\\n| 🤝 Filosofía ética y abierta | Local, sin telemetría, diseñada para comunidad investigadora. |\\n\\n---\\n\\n## 🌱 O – Oportunidades\\n\\n| Oportunidad | Descripción |\\n|-------------|-------------|\\n| 🚀 Educación e investigación | Ideal para docentes, bibliotecas, laboratorios y autodidactas. |\\n| 🌍 Internacionalización | Soporte multilingüe e interfaz adaptable. |\\n| 🤖 Integración con IA | Clasificación por LLMs, embeddings vectoriales, RAG. |\\n| 🧬 Ciencia abierta y FAIR | En línea con principios de interoperabilidad, accesibilidad y reutilización. |\\n| 👥 Comunidad activa | Documentación clara, enfoque pedagógico, contribución abierta. |\\n\\n---\\n\\n## ⚠️ D – Debilidades\\n\\n| Debilidad | Descripción |\\n|-----------|-------------|\\n| 🐣 Etapa inicial | Actualmente en vuelta 1: falta CLI extendida, UI, DBs. |\\n| 🔄 Requiere estructura manual | El usuario debe organizar `/input/` y `/output/`. |\\n| 🧪 Testing parcial | Faltan pruebas avanzadas, edge cases y benchmarking. |\\n| 🧱 Complejidad creciente | La escalabilidad helicoidal necesita documentación viva. |\\n\\n---\\n\\n## 🚨 A – Amenazas\\n\\n| Amenaza | Descripción |\\n|---------|-------------|\\n| 🏗️ Competencia con proyectos maduros | Herramientas comerciales o académicas con más recursos. |\\n| 🌀 Malinterpretación del enfoque helicoidal | Puede parecer \\\"conceptual\\\" sin guía pedagógica. |\\n| 📉 Riesgo de pérdida de trazabilidad | Si no se respeta el modelo genético en commits y versiones. |\\n| 💥 Escalabilidad sin control | Puede acumular deuda técnica si no se refactoriza con cada vuelta. |\\n\\n---\\n\\n## 🧭 Recomendaciones estratégicas\\n\\n- 📘 Documentar **cada vuelta** como unidad de madurez (con DOFA, changelog, test, reflexión).\\n- 📊 Medir evolución técnica: `c(t)` (madurez) y `r(t)` (impacto por vuelta).\\n- 🗣 Recoger feedback de usuarios reales con mecanismos accesibles.\\n- 🧑‍🏫 Fomentar una comunidad pedagógica y experimental.\\n\\n---\\n\\n# 🛡️ Mitigación de Debilidades y Amenazas\\n\\n| Categoría | Riesgo | Estrategia de Mitigación |\\n| --- | --- | --- |\\n| 🐣 Etapa inicial (v1) | Falta de CLI, UI, DBs | **Plan helicoidal por vueltas:** declarar qué no hace todavía, y documentar claramente la evolución esperada (Roadmap.md, manifiesto por vuelta). |\\n| 🔄 Dependencia de estructura manual | `/input/` y `/output` rígidos | Introducir un archivo de configuración (`.yaml`, `.toml`) o CLI (`typer`) para permitir rutas flexibles. |\\n| 🧪 Testing parcial | Faltan edge cases y cobertura | Aplicar TDD progresivo por vuelta. Dedicar parte de la vuelta 2 a fixtures, tests con documentos dañados y falsos positivos. |\\n| 🧱 Complejidad creciente | Riesgo de caos modular | Usar el modelo genético para documentar cada módulo como un **gen** con expresión, dependencias y mutaciones (`docs/genoma/*.md`). |\\n\\n---\\n\\n## 🔥 Amenazas Externas\\n\\n| Amenaza | Mitigación Propuesta |\\n| --- | --- |\\n| 🏗️ Competencia con proyectos grandes | Enfocarse en lo que otros no hacen: trazabilidad semántica, ética, offline, pedagógica. Posicionar como *“inteligencia documental libre y transparente”*. |\\n| 🌀 Malinterpretación del modelo | Crear un onboarding claro (tipo `00_principios.md`) con ejemplos visuales. Usar analogías (biología, arquitectura, espirales) para distintos públicos. |\\n| 📉 Pérdida de trazabilidad | Establecer estándares de commits (`(Vx.Ry.Cz)`), documentación por vuelta, changelogs, y estructura tipo `docs/vuelta-N/`. |\\n| 💥 Deuda técnica por escalar sin refactor | Planificar un **corte técnico** cada 2 vueltas para evaluar la estructura, refactorizar genes y eliminar código obsoleto. |\\n\\n---\\n\\n## 🧬 Estrategias transversales\\n\\n1. **Documentar como si fuera una célula viva:**\\n    - Módulo = gen\\n    - Archivo generado = proteína\\n    - Commit = mutación\\n    - Vuelta = expresión coordinada del sistema\\n2. **Crear plantillas de contribución vivas:**\\n    - `CONTRIBUTING.md` con ejemplos y convenciones helicoidales\\n    - `plantilla_vuelta.md` para registrar cada fase\\n3. **Automatizar el análisis del genoma del sistema:**\\n    - Scripts que calculen cuántos genes activos hay, cuánto maduraron (`c(t)`), etc.\\n    - Dashboards simples (Markdown, CLI) para visualizar estado del pipeline\\n\",\"tags\":\"[[🎯 DOFA]] [[🎯 Requisitos]] [[🎯 Arquitectura]] [[🎯 Plan de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] Español\",\"title\":\"🎯 DOFA\",\"modified\":\"20250423013844446\",\"type\":\"text/markdown\",\"color\":\"#00c3db\",\"tmap.id\":\"4fd827ad-66c0-4733-b0fb-66a83f4ad752\"},{\"created\":\"20250417015323156\",\"text\":\"---\\n\\n# 🧬 Estructura General del Proyecto – OpenPages Pipeline (Modelo Helicoidal)\\n\\nEsta organización refleja la evolución helicoidal de OpenPages Pipeline. Cada carpeta, módulo y documento responde a una **vuelta de madurez** técnica, con trazabilidad semántica, modularidad extensible y preparación para integración con inteligencia artificial.\\n\\n---\\n\\n## 🌀 Vuelta 1 – MVP Offline ✅\\n\\n### 🎯 Objetivo:\\nProcesar PDFs localmente: extraer, limpiar, clasificar y exportar en múltiples formatos (`.txt`, `.md`, `.jsonl`).\\n\\n### 📁 Estructura Inicial:\\n```\\nopenpages-pipeline/\\n├── input/                # PDFs a procesar\\n├── output/               # Archivos generados\\n├── main.py               # Entrada al sistema (v1)\\n├── src/                  # Módulos funcionales\\n│   ├── parser.py         # Extracción de texto\\n│   ├── cleaner.py        # Limpieza estructural\\n│   ├── classifier.py     # Clasificación heurística\\n│   ├── exporter.py       # Exportación en múltiples formatos\\n│   ├── utils.py          # Heurísticas auxiliares\\n│   ├── logger.py         # Mensajes multilingües\\n├── tests/                # Pytest y fixtures\\n├── requirements.txt\\n├── .env (opcional)\\n```\\n\\n---\\n\\n## 🧪 Vuelta 2 – Validación y CLI Extendida (en curso)\\n\\n### 🎯 Objetivo:\\nMejorar la robustez del sistema: validación semántica, logging persistente, CLI flexible.\\n\\n### 📁 Nuevos módulos:\\n```\\nsrc/\\n├── validator.py         # Validación semántica y estructural\\n├── loguru_logger.py     # Registro persistente\\n├── cli.py               # CLI avanzada con Typer\\n```\\n\\n### ⚙️ CLI esperada:\\n```bash\\npython main.py --summary\\npython main.py --lang=es\\npython main.py --only=book\\n```\\n\\n---\\n\\n## 🧠 Vuelta 3 – Semántica Profunda y Vectores\\n\\n### 🎯 Objetivo:\\nEnriquecer el sistema con embeddings, clasificación IA y una base vectorial para navegación o búsqueda inteligente.\\n\\n### 📁 Módulos proyectados:\\n```\\nsrc/\\n├── semantic_classifier.py   # Clasificador por embeddings\\n├── embeddings.py            # Generador de vectores\\n├── db.py                    # Base de datos SQLite o CSV\\n```\\n\\n**Uso de `db.py` y `semantic_classifier.py`:**\\n- Permiten guardar metadatos, consultar por tema, hacer análisis por categoría o vectorizar por grupos.\\n\\n---\\n\\n## 🌐 Vuelta 4 – Interfaz Web e Interacción Visual\\n\\n### 🎯 Objetivo:\\nDiseñar una UI accesible para cargar PDFs, previsualizar clasificaciones y acceder a documentos enriquecidos.\\n\\n### 📁 Estructura esperada:\\n```\\nweb/\\n├── app.py             # API con FastAPI o Flask\\n├── templates/         # HTML (Jinja2)\\n├── static/            # JS, CSS, assets\\n```\\n\\n---\\n\\n## 📦 Soporte de Documentación y Control\\n\\n```\\ndocs/\\n├── manifiesto.md           # Modelo genético-helicoidal\\n├── vuelta-1.md             # Estado y reflexión MVP\\n├── vuelta-2.md             # Planificación actual\\n├── dofa.md                 # Análisis estratégico\\n├── algoritmos.md           # Estructura lógica y matemática\\n```\\n\\n---\\n\\n## ✅ Ventajas de esta estructura helicoidal\\n\\n| Ventaja | Explicación |\\n|--------|-------------|\\n| 🧠 Pensada como un sistema vivo | Cada módulo es un gen que puede mutar y escalar |\\n| 🧩 Evolución sin ruptura | Las vueltas no invalidan, sino expanden |\\n| 📊 Documentación por vuelta | Mejora trazabilidad, comunidad y auditoría |\\n| 🤖 Preparación IA real | Desde `.jsonl` hasta embeddings y clustering |\\n| 🌐 Transición natural a UI/API | Sin pérdida de control o transparencia |\\n\\n---\\n\\n## 📍 Estado actual\\n- ✅ Vuelta 1 completa y estable\\n- 🔄 Vuelta 2 en desarrollo activo\\n- 📐 Vuelta 3 en diseño matemático y arquitectónico\\n- 💡 Vuelta 4 con prototipo UI en planeación\\n\\n> *OpenPages Pipeline no se compone de carpetas. Se compone de capas vivas que maduran, se integran y giran hacia un sistema cada vez más consciente.*\\n\\n\",\"type\":\"text/markdown\",\"title\":\"🎯 Estructura\",\"modified\":\"20250423015332197\",\"tags\":\"[[🎯 Estructura]] [[🎯 Requisitos]] [[🎯 Objetivos]] [[🎯 Plan de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] Español [[🌀1️⃣ Vuelta #1]]\",\"icon\":\":construction_site: \",\"color\":\"#00c3db\",\"tmap.id\":\"79fb44c0-068d-410c-ab14-dc39ca4788ac\"},{\"created\":\"20250417011202744\",\"text\":\"---\\n\\n# 🤖 Flujo de Interacción – OpenPages Pipeline\\n\\nEste documento describe cómo interactúa el usuario con **OpenPages Pipeline**, abarcando desde la instalación inicial hasta la ejecución del sistema, generación de archivos, retroalimentación multilingüe y manejo de errores. El flujo está diseñado para uso por terminal/CLI, pero está preparado para evolucionar hacia interfaces web en vueltas futuras.\\n\\n---\\n\\n## 🪠 Instalación inicial y configuración\\n\\n### 👩‍💻 Paso 1: Clonar el repositorio\\n```bash\\ngit clone https://github.com/openpages/openpages-pipeline.git\\ncd openpages-pipeline\\n```\\n\\n### 🐍 Paso 2: Crear entorno virtual\\n```bash\\npython -m venv .venv\\nsource .venv/bin/activate      # Linux/macOS\\n.venv\\\\Scripts\\\\activate         # Windows\\n```\\n\\n### 📦 Paso 3: Instalar dependencias\\n```bash\\npip install -r requirements.txt\\n```\\n\\n---\\n\\n## 📂 Paso 4: Organizar archivos de entrada\\n```bash\\nmkdir input output\\nmkdir input/Book input/Essay input/Science_Article\\n# Copiar tus archivos PDF a las subcarpetas\\n```\\n\\nEjemplo de estructura:\\n```\\nopenpages-pipeline/\\n├── input/\\n│   ├── Book/\\n│   │   └── Filosofia_Moderno.pdf\\n│   ├── Essay/\\n│   │   └── GPT_Essay.pdf\\n│   └── Science_Article/\\n│       └── Ciencia_Cuantica.pdf\\n├── output/\\n```\\n✅ El sistema detecta automáticamente todos los PDFs dentro de `/input/` y sus subcarpetas.\\n\\n---\\n\\n## ▶️ Paso 5: Ejecutar el pipeline\\n```bash\\npython main.py\\n```\\n\\nSalida esperada:\\n```\\n📘 Procesando: Ciencia_Cuantica.pdf\\n✅ Clasificado como: Ciencias Naturales (500)\\n✔️ Exportación completa: [input/Science_Article/Ciencia_Cuantica.pdf]\\n📁 Archivos exportados en carpeta /output\\n```\\n\\n---\\n\\n## 📄 Convención de nombres de salida\\nTodos los archivos generados siguen el formato:\\n```\\n<tipo>_<dewey>_<categoria>_<titulo>_<autor>.<extensión>\\n```\\nEjemplo:\\n```\\nessay_100_philosophy_and_psychology_aprendizaje_automatico_diego_beltran.jsonl\\n```\\n\\n---\\n\\n## 📈 Archivos generados por documento\\n\\nPor cada PDF se generan:\\n- `.txt`: texto plano\\n- `.md`: Markdown con metadatos estructurados\\n- `.jsonl`: párrafos segmentados para NLP, embeddings o análisis RAG\\n\\n---\\n\\n## 🧠 Clasificación temática sugerida\\n\\n**Lógica actual (heurísticas):**\\n\\n| Tema | Dewey |\\n|------|-------|\\n| Inteligencia Artificial | `006.3` |\\n| Física Cuántica | `530.12` |\\n| Filosofía | `100` |\\n\\n📌 En futuras vueltas se implementará clasificación semántica por modelos de lenguaje (LLMs).\\n\\n---\\n\\n## ⚠️ Manejo de errores\\n\\n**Ejemplo de archivo no válido:**\\n```\\n⚠️ Error al procesar 'notas.docx': Formato inválido. Por favor usa PDF.\\n```\\n\\n**Ejemplo de archivo sin texto (escaneado):**\\n```\\n⚠️ Documento escaneado o vacío detectado: se omite\\n```\\n\\n---\\n\\n## 🔄 UX Multilingüe\\n\\nLos mensajes del sistema se adaptan al idioma definido por la variable de entorno `LANG`:\\n\\n| Idioma | Valor `LANG` |\\n|--------|--------------|\\n| Español | `es` |\\n| Inglés  | `en` |\\n\\nPróximas vueltas podrían incorporar más idiomas o detección automática.\\n\\n---\\n\\n## 💬 Ejemplo interactivo completo\\n\\n1. Usuario coloca `Intro_Matematicas.pdf` en `input/Book/`\\n2. Ejecuta: `python main.py`\\n3. Sistema responde:\\n```\\n📘 Procesando: Intro_Matematicas.pdf\\n✅ Clasificado como: Matemáticas (510)\\n✔️ Exportación completa\\n📁 Archivos guardados: output/book_510_mathematics_intro_matematicas.jsonl\\n```\\n\\n---\",\"type\":\"text/markdown\",\"title\":\"🎯 Flujo de interaccion\",\"modified\":\"20250423012424499\",\"tags\":\"[[🎯 Flujo de interaccion]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] Español\",\"color\":\"#00c3db\",\"tmap.id\":\"72822a6f-abd7-4fd0-a517-5f3fd44caba1\"},{\"created\":\"20250414234000289\",\"text\":\"# 🎯 Objetivos del Proyecto – OpenPages Pipeline\\n\\n---\\n\\n## 🧠 Objetivo General\\n\\nDiseñar y mantener una herramienta **modular, ética y evolutiva** que permita procesar, estructurar y clasificar documentos científicos en PDF, generando salidas reutilizables para humanos e inteligencia artificial, dentro de un modelo de desarrollo helicoidal.\\n\\n---\\n\\n## 🧬 Objetivos Específicos\\n\\n### 1. 📥 Procesamiento semántico de PDFs\\n\\n- Extraer texto desde PDFs científicos con heurísticas robustas.\\n- Detectar errores comunes (fórmulas, mojibake, CID) y corregirlos.\\n- Validar que los documentos tengan valor semántico antes de exportar.\\n\\n### 2. 🧩 Modularidad, trazabilidad y calidad estructural\\n\\n- Diseñar el sistema como una colección de **genes funcionales** (módulos independientes).\\n- Registrar todas las transformaciones en logs estructurados y multilenguaje.\\n- Asegurar la **testabilidad y mantenibilidad** de cada componente.\\n\\n### 3. 🧠 Clasificación temática inteligente\\n\\n- Clasificar los documentos según sistemas jerárquicos como **Dewey**, con posibilidad de adaptarse a otras taxonomías abiertas (UNESCO, folksonomías, etc.).\\n- Preparar el terreno para clasificación con modelos de lenguaje (NLP/LLMs).\\n\\n### 4. 📤 Exportación AI-ready\\n\\n- Exportar en formatos optimizados para humanos y modelos (ej. `.jsonl`, `.md`).\\n- Mantener la coherencia semántica y estructura en los outputs.\\n\\n### 5. 🧬 Evolución helicoidal\\n\\n- Consolidar cada vuelta como una capa de madurez creciente:\\n    - V1: Base funcional modular\\n    - V2: CLI y reportes\\n    - V3: Validación semántica y logging ético\\n    - … (y así sucesivamente)\\n\\n### 6. 🧪 Evaluación continua y reflexión técnica\\n\\n- Documentar cada vuelta como **una etapa de expresión genética** del sistema.\\n- Identificar mutaciones positivas, problemas recurrentes y mejoras pendientes.\\n- Medir el progreso no solo por features, sino por **madurez técnica y semántica**.\\n\\n### 7. 🤝 Comunidad y apertura del conocimiento\\n\\n- Promover una comunidad de desarrollo orientada a la colaboración ética.\\n- Ofrecer documentación clara, contextual y accesible.\\n- Estimular la experimentación responsable y la reusabilidad del pipeline.\\n\\n---\\n\\n## 🌀 En resumen\\n\\n> OpenPages Pipeline no procesa PDFs, sino que activa conocimiento.\\n> \\n> \\n> No es una herramienta fija, sino un sistema que **se expresa, madura y se adapta** con cada vuelta de la hélice.\\n>\",\"tags\":\"[[🎯 Objetivos]] [[🎯 Requisitos]] [[🎯 Estructura]] [[🎯 DOFA]] [[🎯 Componentes]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] Español\",\"title\":\"🎯 Objetivos\",\"modified\":\"20250423012056144\",\"text/x-markdown\":\"\",\"type\":\"text/markdown\",\"color\":\"#00c3db\",\"tmap.id\":\"a30a6844-bece-4f9c-add6-6f2d45090b42\"},{\"created\":\"20250417015650783\",\"text\":\"---\\n\\n# 🧩 Plan de Desarrollo – OpenPages Pipeline (Modelo Helicoidal)\\n\\n**Versión 2025 – Evolución Computacional Ética y Semántica**\\n\\nEste plan redefine el desarrollo de OpenPages Pipeline como un proceso **helicoidal**, inspirado en genética computacional y cálculo diferencial. Cada fase representa una **vuelta (`t`)**, con su respectiva amplitud funcional (`r(t)`) y madurez técnica (`c(t)`), según el modelo:\\n\\n\\\\[\\n\\\\vec{r}(t) = \\\\begin{pmatrix} r \\\\cos(t) \\\\\\\\ r \\\\sin(t) \\\\\\\\ c \\\\cdot t \\\\end{pmatrix}\\n\\\\]\\n\\n---\\n\\n## 🌀 Vuelta 1 – MVP Offline ✅\\n\\n**🎯 Objetivo:** Procesamiento básico local de PDFs → `.txt`, `.md`, `.jsonl`.\\n\\n**Genes expresados:**\\n- `parser.py`, `cleaner.py`, `classifier.py`, `exporter.py`, `logger.py`, `utils.py`\\n\\n**r(1) = 2:** aparición de 6 módulos\\n**c(1) = 1:** sistema usable, no automatizado\\n\\n✅ *Vuelta completada y funcional.*\\n\\n---\\n\\n## 🌀 Vuelta 2 – CLI Extendida y Validación 🔄\\n\\n**🎯 Objetivo:** Modularización avanzada y trazabilidad por CLI y logs\\n\\n**Genes nuevos:**\\n- `cli.py`, `validator.py`, `loguru_logger.py`\\n\\n**r(2) = 3:** validación + logging + CLI\\n**c(2) = 2:** control multiformato, logging persistente\\n\\n🧪 En desarrollo\\n\\n---\\n\\n## 🌀 Vuelta 3 – Semántica y Embeddings\\n\\n**🎯 Objetivo:** Hacer el pipeline compatible con RAGs y motores semánticos.\\n\\n**Genes nuevos:**\\n- `embeddings.py`, `semantic_classifier.py`, `vector_store.py`\\n\\n**r(3) = 4:** salto funcional con IA vectorial\\n**c(3) = 3:** IA-Ready semántico\\n\\n🔬 En diseño\\n\\n---\\n\\n## 🌀 Vuelta 4 – Interfaz Web y Experiencia Visual\\n\\n**🎯 Objetivo:** Permitir carga visual, resumen y exportación desde navegador.\\n\\n**Genes nuevos:**\\n- `web/app.py`, `templates/`, `static/`\\n\\n**r(4) = 3**, **c(4) = 3.5** (personalización UX + API)\\n\\n🌐 Planeado para docente, biblioteca, estudiante\\n\\n---\\n\\n## 🌀 Vuelta 5 – Testing Avanzado y CI/CD\\n\\n**🎯 Objetivo:** Integrar calidad automatizada, cobertura y métricas\\n\\n**Genes nuevos:**\\n- Tests para cada módulo (`tests/`)\\n- Config CI (`.github/workflows/test.yml`)\\n\\n**r(5) = 2**, **c(5) = 4**\\n\\n🚀 Planeado para despliegue continuo confiable\\n\\n---\\n\\n## 🌀 Vuelta 6 – Personalización Multilingüe y Estilos\\n\\n**🎯 Objetivo:** Adaptar tono, idioma, formato y contexto del usuario\\n\\n**Genes nuevos:**\\n- `user_prefs.json`, `translator.py`, presets por región\\n\\n**r(6) = 2**, **c(6) = 4.5**\\n\\n🌍 Multicultural, adaptable, listo para UI personalizada\\n\\n---\\n\\n## 🌀 Vuelta 7 – Publicación, Comunidad y FAIRness\\n\\n**🎯 Objetivo:** Establecer gobernanza abierta, publicación libre, educación ética\\n\\n**Genes nuevos:**\\n- `docs/`, `README.md`, `CONTRIBUTING.md`, `CODE_OF_CONDUCT.md`, `ethics.md`\\n- Dominio público + Notebooks + Wikis\\n\\n**r(7) = 3**, **c(7) = 5**\\n\\n🤝 Comunidad, accesibilidad, datos abiertos\\n\\n---\\n\\n## 📈 Evolución helicoidal proyectada\\n\\n| Vuelta | r(t) | c(t) | Objetivo principal |\\n|--------|------|------|--------------------|\\n| 1 | 2 | 1 | MVP local, AI-ready básico |\\n| 2 | 3 | 2 | CLI, validación, trazabilidad |\\n| 3 | 4 | 3 | Clasificador IA, vectores |\\n| 4 | 3 | 3.5 | UI visual, accesibilidad |\\n| 5 | 2 | 4 | CI/CD + calidad automatizada |\\n| 6 | 2 | 4.5 | Multilingüe y personalizada |\\n| 7 | 3 | 5 | Comunidad, gobernanza, FAIR |\\n\\n---\\n\\n## 🌟 Ventajas del modelo helicoidal\\n\\n| 🧬 Evolutivo | 📈 Medible | 🧩 Modular | 🤖 Ético e IA-Ready |\\n|-------------|-----------|------------|--------------------|\\n| Cada vuelta mejora y conserva lo anterior | Se pueden calcular `r(t)`, `c(t)` | Separación de genes y fenotipos | Trazabilidad total, sin APIs ocultas |\\n\\n> *El desarrollo no es lineal. Es helicoidal: evoluciona en capas, se expande en radio y escala en madurez.*\\n\\n\",\"type\":\"text/markdown\",\"title\":\"🎯 Plan de desarrollo\",\"modified\":\"20250423015526512\",\"tags\":\"[[🎯 Plan de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- 🌀 Helices de desarrollo]] Español\",\"color\":\"#00c3db\",\"tmap.id\":\"e5c8992c-a0fc-4b3c-a7ee-315a412d2516\"},{\"created\":\"20250414235517306\",\"text\":\"---\\n\\n# 📘 OpenPages Pipeline – Requerimientos del Sistema (Vuelta 1)\\n\\n---\\n\\n## ✅ Requerimientos Funcionales\\n\\n1. El sistema debe permitir al usuario procesar documentos PDF ubicados en la carpeta `/input/`.\\n2. El sistema debe extraer y limpiar el contenido textual de cada PDF.\\n3. El sistema debe generar archivos de salida en tres formatos: `.txt`, `.md`, y `.jsonl`, listos para uso humano y/o IA.\\n4. El sistema debe sugerir una categoría temática basada en la Clasificación Dewey, con posibilidad futura de incorporar taxonomías alternativas.\\n5. Los archivos generados deben almacenarse en `/output/` con un esquema de nombres semántico y organizado.\\n\\n---\\n\\n## ⚙️ Requerimientos No Funcionales\\n\\n1. El sistema debe procesar PDFs estándar (menos de 10 páginas) en menos de 2 segundos por documento.\\n2. Toda la funcionalidad debe estar disponible **offline** sin depender de servicios externos.\\n3. Las salidas deben ser **limpias, trazables y semánticamente consistentes**.\\n4. El sistema debe soportar procesamiento por lote de múltiples PDFs sin errores ni duplicaciones.\\n\\n---\\n\\n## 💻 Requerimientos de Software\\n\\n1. Python 3.10 o superior.\\n2. Librerías clave:\\n    - `PyMuPDF` (`fitz`) y `pdfplumber` para extracción\\n    - `ftfy`, `re`, `pathlib`, `json`, `os`\\n3. (Opcional) `dotenv` para configuración futura y variables de entorno.\\n\\n---\\n\\n## 🧑‍💻 Requerimientos Técnicos\\n\\n1. La arquitectura debe ser **modular y extensible**: módulos independientes para extracción, limpieza, clasificación, validación, exportación y logging.\\n2. El sistema debe permitir personalización de formatos de salida (Markdown, chunking, filtros).\\n3. Debe ser **containerizable** (compatible con Docker).\\n4. Preparado para futura integración con bases de datos relacionales o vectoriales (SQLite, PostgreSQL, FAISS).\\n5. Debe soportar versiones helicoidales del desarrollo, manteniendo trazabilidad por vuelta (`Vx.Ry.Cz`).\\n\\n---\\n\\n## 📦 Librerías Utilizadas\\n\\n| Librería | Propósito |\\n|---------|-----------|\\n| `pymupdf` | Extracción primaria de texto |\\n| `pdfplumber` | Fallback para PDFs complejos |\\n| `re`, `ftfy` | Limpieza y normalización |\\n| `json`, `pathlib`, `os` | Navegación y exportación |\\n| `dotenv` | Configuración segura (opcional) |\\n\\n---\\n\\n## ✅ Requerimientos de Pruebas\\n\\n1. Pruebas unitarias para cada módulo (`parser`, `cleaner`, `classifier`, `exporter`).\\n2. Validación de manejo de excepciones y PDFs dañados o vacíos.\\n3. Medición de tiempo promedio por documento.\\n4. Verificación visual de los archivos generados.\\n5. Preparación para cobertura total en vueltas futuras (V5+).\\n\\n---\\n\\n## 🧪 Requisitos de Calidad\\n\\n1. Estilo de código conforme a **PEP8**.\\n2. Documentación con **docstrings** claros y completos.\\n3. Estructura base del repositorio:\\n    - `README.md`\\n    - `LICENSE`\\n    - `requirements.txt`\\n    - Carpeta `/tests/`\\n4. CI mínimo con GitHub Actions: instalación + test (`pytest`).\\n\\n---\\n\\n## 🔐 Requisitos de Seguridad\\n\\n1. No deben almacenarse claves ni tokens en el código.\\n2. Configuraciones sensibles deben ir en `.env` y estar excluidas con `.gitignore`.\\n3. Los archivos procesados deben mantenerse **locales por defecto**.\\n4. Cualquier futura integración con APIs externas debe cumplir buenas prácticas (HTTPS, OAuth, etc.).\\n\\n---\\n\\n## 🚀 Tecnologías Base\\n\\n| Componente | Tecnología |\\n|------------|------------|\\n| Lenguaje | Python 3.10+ |\\n| Parser PDF | PyMuPDF, pdfplumber |\\n| Formatos de salida | `.txt`, `.md`, `.jsonl` |\\n| Control de versiones | Git + GitHub |\\n| CI/CD | GitHub Actions + Pytest |\\n| Licencia | Apache 2.0 |\\n\\n---\\n\\n## 🔮 Futuras Expansiones (Epigenética Proyectada)\\n\\n| Mejora | Propósito |\\n|--------|-----------|\\n| Clasificación por IA (LLMs) | Más allá de Dewey, taxonomías abiertas |\\n| Indexado semántico | Navegación de documentos por metadatos |\\n| Embeddings | Búsqueda vectorial, RAG, clustering |\\n| Interfaz web | Accesibilidad sin necesidad de consola |\\n| Clasificación multilingüe | Español, inglés y adaptabilidad lingüística |\\n| OCR (`ocr.py`) | Procesar PDFs escaneados o sin capa de texto |\\n\\n---\\n\\n\",\"title\":\"🎯 Requisitos\",\"modified\":\"20250423012250749\",\"type\":\"text/markdown\",\"tags\":\"[[🎯 Requisitos]] [[🎯 Estructura]] [[🎯 Flujo de interaccion]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] Español\",\"color\":\"#00c3db\",\"tmap.id\":\"b5be6915-32c3-4468-b4c2-768185bb58eb\"},{\"created\":\"20250417134213439\",\"text\":\"Esta sección apunta a que el código no solo funcione, sino que sea fácil de entender, mantener y evolucionar.\\n\\n## ✨ Principios de Código Limpio y Simplicidad\\n\\n| 🧩 Principio                          | 📘 Detalle                                                                 |\\n|--------------------------------------|--------------------------------------------------------------------------------|\\n| **Convención sobre Configuración**   | Inspirado en frameworks como **Rails** o **Spring**, minimiza archivos de configuración utilizando **valores por defecto coherentes**. Favorece productividad y coherencia entre proyectos. |\\n| **KISS – Keep It Simple, Stupid**    | Diseña de forma **clara, directa y comprensible**. Es el fundamento de la legibilidad y mantenibilidad. Facilita la aplicación de **DRY** y **YAGNI**. |\\n| **YAGNI – You Aren’t Gonna Need It** | No desarrolles funcionalidades **hasta que exista una necesidad real**. Reduce sobrecarga técnica y complejidad innecesaria. Complementa a KISS. |\\n| **DRY – Don’t Repeat Yourself**      | Evita **duplicaciones de lógica, estructuras o datos**. Mejora la mantenibilidad y previene errores de inconsistencia. Tiene una tensión natural con KISS (a veces duplicar clarifica). |\\n| **Evitar la Optimización Prematura** | **Optimiza solo cuando sea necesario**. La prioridad es la **claridad** y luego el rendimiento. Se alinea con YAGNI: “no optimices lo que no vas a usar todavía”. |\\n\\n---\\n\\n## 🔁 Relaciones internas entre principios\\n\\n| 🔗 Relación                             | 💡 Explicación                                                                          |\\n|----------------------------------------|-----------------------------------------------------------------------------------------|\\n| KISS → base para DRY y YAGNI           | El diseño simple permite identificar fácilmente duplicaciones o código innecesario.     |\\n| YAGNI ↔ Optimización Prematura         | Ambos advierten sobre la **sobrecarga técnica anticipada sin justificación clara**.     |\\n| DRY ↔ KISS (tensión creativa)          | Evitar duplicación mejora mantenimiento, pero a veces **duplicar clarifica el código**. |\\n\\n\",\"type\":\"text/markdown\",\"title\":\"🗂 Calidad del Código\",\"modified\":\"20250423005135830\",\"tags\":\"[[--- 🗂 Principios de programación]] [[🗂 Calidad del Código]] [[--- 🎯 Detalles del proyecto]]\",\"color\":\"#db5f00\",\"tmap.id\":\"edcd8959-4fd3-47c3-8d26-2d5635409ba8\"},{\"created\":\"20250417134125921\",\"text\":\"Estos principios garantizan que el código esté bien estructurado, extensible y mantenible. Su propósito no es solo escribir código que funcione, sino que pueda evolucionar sin romperse.\\n\\n## **Principios de Diseño Orientado a Objetos (OOP)**\\n\\n| 🧩 Principio                      | 📘 Detalle                                                                 |\\n|----------------------------------|--------------------------------------------------------------------------------|\\n| **SRP** – Single Responsibility | Cada módulo o clase debe tener **una sola razón para cambiar**. Favorece claridad y facilidad de pruebas. |\\n| **OCP** – Open/Closed            | El código debe estar **abierto a extensión pero cerrado a modificación**. Se puede agregar funcionalidad sin alterar lo existente. |\\n| **LSP** – Liskov Substitution    | Una subclase debe poder **reemplazar a su clase padre sin alterar el comportamiento** esperado. |\\n| **ISP** – Interface Segregation  | Se deben definir **interfaces específicas y pequeñas**, evitando forzar a los módulos a depender de lo que no usan. |\\n| **DIP** – Dependency Inversion   | Los módulos de alto nivel **no deben depender de detalles**, sino de abstracciones. Facilita pruebas y desacoplamiento. |\\n\\n---\\n\\n## **Composición sobre Herencia**\\n\\n| 🧩 Enunciado                        | 📘 Detalle                                                              |\\n|-----------------------------------|-------------------------------------------------------------------------|\\n| \\\"Has-a\\\" vs \\\"Is-a\\\"                 | Prefiere **composición** o **inyección de dependencias** sobre la herencia rígida. |\\n| Mantenimiento                     | Facilita **modificación, pruebas unitarias y extensión flexible**.     |\\n| Relación con otros principios     | Refuerza **DIP** (inversión de dependencias) y **OCP/LSP** al permitir estructuras desacopladas. |\\n\\n---\\n\\n## **Encapsulación**\\n\\n| 🧩 Enunciado                        | 📘 Detalle                                                              |\\n|-----------------------------------|-------------------------------------------------------------------------|\\n| Ocultamiento de estado interno    | Expone solo una **API mínima pública**, protegiendo la lógica interna del módulo. |\\n| Modularidad y estado              | Refuerza el control del estado global, facilita la **modularidad robusta y mantenible**. |\\n\\n---\\n\\n## **🔁 Relaciones internas entre principios**\\n\\n| 🔗 Relación                                  | 💡 Explicación                                                                 |\\n|---------------------------------------------|--------------------------------------------------------------------------------|\\n| Encapsulación → SRP y DIP                   | Ocultar detalles internos **facilita tener responsabilidades únicas** y manejar abstracciones. |\\n| Composición sobre herencia → OCP y LSP      | Usar composición permite **extender sin modificar** y mantener el principio de sustitución. |\\n\",\"type\":\"text/markdown\",\"title\":\"🗂 Diseño\",\"modified\":\"20250423005135834\",\"tags\":\"[[--- 🗂 Principios de programación]] [[🗂 Diseño]] [[--- 🎯 Detalles del proyecto]]\",\"color\":\"#db5f00\",\"tmap.id\":\"e5b186ac-9ddc-4f40-a57e-d6bcbbe7900d\"},{\"created\":\"20250417134249385\",\"text\":\"---\\n\\n# 🌀 Estrategia de Commits – OpenPages Pipeline (Modelo Genético-Helicoidal)\\n\\nCada commit representa una **expresión genética funcional del sistema**. Esta guía asegura que cada cambio pueda ser rastreado semánticamente en el tiempo, auditado, y visualizado en dashboards helicoidales.\\n\\n---\\n\\n## ✅ Estructura Sugerida de Commits\\n\\n```bash\\n[tipo](estado): descripción breve - (Vx.Ry.Cz / gen=nombre, b=#, ∆r=±n, ∆c=±n)\\n```\\n\\n### 🧠 Campos explicados\\n\\n| Campo         | Qué representa                                     | Ejemplo                      |\\n|---------------|-----------------------------------------------------|------------------------------|\\n| `[tipo]`      | Tipo de cambio (`feat`, `fix`, `refac`, `test`)     | `feat`                       |\\n| `(estado)`    | Estado del cambio: `(p)` progreso, `(D)` done       | `(D)`                        |\\n| `descripción` | Acción concreta y concisa                          | función `ocr_completo()`     |\\n| `Vx`          | Vuelta helicoidal (ciclo de madurez)               | `V2`                         |\\n| `Ry`          | Amplitud del cambio (cuántos módulos se tocaron)   | `R2`                         |\\n| `Cz`          | Nivel de madurez del sistema alcanzado             | `C1`                         |\\n| `gen`         | Gen activo o módulo afectado (sin `.py`)           | `ocr`                        |\\n| `b`           | Bloque o función específica                        | `b=1`                        |\\n| `∆r`, `∆c`    | Derivadas opcionales: amplitud y madurez incremental | `∆r=+1`, `∆c=+0.5`         |\\n\\n---\\n\\n### 📦 Ejemplo completo\\n\\n```bash\\nfeat(D): función ocr_completo() – primera expresión OCR - (V2.R2.C1 / gen=ocr, b=1, ∆r=+1, ∆c=+0.5)\\n```\\n\\n### 🧩 Sintaxis mínima viable\\n\\n```bash\\nfeat(D): nueva función ocr_completo() - (V2.R2.C1 / gen=ocr, b=1)\\n```\\n> Las derivadas pueden calcularse automáticamente por un script externo.\\n\\n---\\n\\n## 📊 Ventajas de esta estructura\\n\\n| Beneficio                           | Descripción                                                                 |\\n|-------------------------------------|-----------------------------------------------------------------------------|\\n| 📈 Trazabilidad helicoidal           | Agrupación por vuelta (Vx), gen, bloque                                    |\\n| 🧬 Contexto semántico por commit     | Cada acción se contextualiza como una mutación o expresión genética        |\\n| 🔁 Automatización con scripts        | Permite exportar a `.jsonl` y `.tid` para dashboards y TiddlyWiki          |\\n| 📦 Dashboards evolutivos posibles    | Podés graficar ∂c/∂t, evolución por gen, amplitud por vuelta, etc.         |\\n\\n---\\n\\n## 🚀 ¿Cómo empezar hoy?\\n\\n1. **Establecé esta convención para todos los commits desde ahora.**\\n2. (Opcional) Usá `git commit --template` o `cz-customizable`.\\n3. (Avanzado) Reescribí los últimos 10–20 commits con `git rebase -i`.\\n4. Conectá el script de extracción a tu CI/CD (`.github/workflows`).\\n\\n---\\n\\n## 🧠 Recordá:\\n\\n> Cada commit es una transcripción genética.  \\n> Cada refactor, una mutación.  \\n> Cada test, una verificación funcional.\\n\\nEste modelo no solo organiza el código, lo vuelve **inteligible para IA y humanos** por igual.\\n\\n\",\"type\":\"text/markdown\",\"title\":\"🗂 Estructura de commits\",\"modified\":\"20250423034349965\",\"tags\":\"[[--- 🗂 Principios de programación]] [[--- 🎯 Detalles del proyecto]] [[🗂 Estructura de commits]] [[--- Codigo]]\",\"color\":\"#db5f00\",\"tmap.id\":\"bf7ef23c-b5b2-4035-8622-71c1635ce7e0\"},{\"created\":\"20250423003522758\",\"text\":\"---\\n\\n# 🧬 Modelo de las Hélices de Desarrollo\\n### *OpenPages Pipeline como un sistema genético-semántico en espiral*\\n\\n---\\n\\n## 📘 Introducción\\n\\nEste manifiesto define el marco conceptual y matemático del desarrollo de **OpenPages Pipeline** a través de hélices de desarrollo, una visión inspirada en la **biología molecular**, el **cálculo diferencial** y los **sistemas de IA evolutivos**.\\n\\n> Aquí no construimos versiones, construimos vueltas de madurez.  \\n> No diseñamos código lineal, sino **cadenas funcionales** que se reescriben con mayor profundidad en cada iteración.  \\n> OpenPages Pipeline **no crece por bloques**: gira, muta, aprende y escala.\\n\\n---\\n\\n## 🧭 Principios Fundamentales\\n\\n- **Cada módulo funcional del sistema es un gen**  \\n  Define un comportamiento estable, reutilizable y esencial (ej. `parser.py`, `validator.py`, `exporter.py`).\\n\\n- **Cada vuelta helicoidal representa una nueva capa de expresión funcional**  \\n  En vez de reescribir el sistema, expresamos sus genes con mayor madurez. A más vueltas, más robustez.\\n\\n- **El sistema se representa como una hélice tridimensional**  \\n  Donde el tiempo (`t`), el cambio estructural (`r`) y la madurez (`c`) evolucionan juntos:\\n\\n\\\\[\\n\\\\vec{r}(t) = \\\\begin{pmatrix}\\nr \\\\cos(t) \\\\\\\\\\nr \\\\sin(t) \\\\\\\\\\nc \\\\cdot t\\n\\\\end{pmatrix}\\n\\\\]\\n\\nLa derivada de esta curva representa la **velocidad de evolución** del sistema:\\n\\n\\\\[\\n\\\\vec{r}'(t) = \\\\begin{pmatrix}\\n-r \\\\sin(t) \\\\\\\\\\nr \\\\cos(t) \\\\\\\\\\nc\\n\\\\end{pmatrix}\\n\\\\]\\n\\n- **El cambio puede ser visible o invisible**  \\n  Visible: arquitectura, nuevos módulos, estructuras.  \\n  Invisible: calidad interna, refactors, documentación, testing, integración continua.\\n\\n- **La IA y el humano deben poder leer esta estructura**  \\n  Cada cambio, expresión funcional o mutación debe ser **navegable, auditable y comprensible**.\\n\\n---\\n\\n## 🧬 Estructura Genética del Desarrollo\\n\\n| Elemento Biológico | Equivalente en OpenPages |\\n|--------------------|----------------------------|\\n| Gen | Módulo funcional (ej. `validator.py`) |\\n| Genoma | Proyecto completo |\\n| Expresión génica | Ejecución del módulo (CLI, API, test) |\\n| Mutación | Commit/refactor que cambia comportamiento |\\n| Epigenética | Configuración externa (`config.yaml`) |\\n| Proteína | Archivo generado (`.jsonl`, `.md`, logs…) |\\n| Fenotipo | Resultado visible para el usuario final |\\n| Vueltas helicoidales | Iteraciones de desarrollo con más madurez |\\n| Derivadas \\\\( c'(t), r'(t) \\\\) | Tasa de evolución del sistema en funcionalidad y robustez |\\n\\n---\\n\\n## 🔁 ¿Cómo se aplica esto?\\n\\n- Cada **gen** se documenta con su historia de mutaciones, expresiones, condiciones y productos.\\n- Cada **vuelta** representa un momento del desarrollo en el que varios genes se activan coordinadamente.\\n- La **madurez** no se mide solo en líneas de código, sino en:\\n  - Integración entre módulos\\n  - Nivel de automatización\\n  - Grado de abstracción\\n  - Cobertura de tests\\n  - Claridad semántica y documentación\\n\\n---\\n\\n## 🌐 Implicaciones del Modelo\\n\\n### 📦 Para la documentación\\nTodo módulo debe documentarse como un gen:\\n- ¿Qué hace?\\n- ¿Cuándo se activa?\\n- ¿Cómo ha cambiado?\\n- ¿Qué produce?\\n\\n### 🔬 Para el análisis del sistema\\n- Podemos **calcular tasas de madurez y cambio por módulo**.\\n- Podemos **visualizar el sistema como un conjunto de hélices sincronizadas**.\\n\\n### 🤖 Para la IA\\n- Un modelo como este permite a la IA:\\n  - Entender cómo y por qué cambió el sistema.\\n  - Anticipar errores.\\n  - Identificar puntos críticos.\\n  - Sugerir mejoras basadas en evolución previa.\\n\\n---\\n\\n## 📘 Conclusión\\n\\nEste manifiesto establece que **OpenPages Pipeline no es solo un proyecto técnico**, sino un **organismo semántico en evolución constante**.\\n\\n> Cada commit es una mutación,  \\n> cada vuelta una nueva etapa de expresión,  \\n> y cada archivo una proteína de conocimiento útil.\\n\\n> *“No construimos versiones. Codificamos hélices vivas.”*\\n\\n\",\"title\":\"🗂 Evolución Semántica\",\"modified\":\"20250423014037499\",\"type\":\"text/markdown\",\"tmap.id\":\"21bf1538-2546-4a2d-a53b-1c27b8b83f94\",\"color\":\"#db5f00\",\"tags\":\"[[--- 🗂 Principios de programación]] [[🗂 Evolución Semántica]] [[--- 🎯 Detalles del proyecto]]\"},{\"created\":\"20250417134313258\",\"text\":\"Aquí se define cómo dividir el sistema en piezas claras que cooperan de forma predecible y robusta.\\n\\n## 🧩 Principios de Modularidad y Estado\\n\\n| 🧠 Principio                             | 📘 Descripción                                                                 |\\n|-----------------------------------------|--------------------------------------------------------------------------------|\\n| **Separación de Intereses (SoC)**       | Cada módulo o componente debe abordar **una sola responsabilidad**. Favorece el **Single Responsibility Principle (SRP)** y mejora la **claridad, mantenibilidad y testeo** del sistema. |\\n| **Minimizar el Estado Global**          | Limita el uso de variables o configuraciones compartidas globalmente. Esto permite que los **módulos sean más predecibles, independientes y fáciles de probar**. |\\n| **Inmutabilidad Siempre que Sea Posible** | Promueve la creación de estructuras de datos que **no cambien después de ser creadas**, lo que reduce efectos secundarios, errores y facilita la depuración. |\\n\\n---\\n\\n## 🔁 Relaciones internas entre principios\\n\\n| 🔗 Relación                                   | 💡 Explicación                                                                                  |\\n|----------------------------------------------|-------------------------------------------------------------------------------------------------|\\n| Separación de Intereses ↔ SRP (de SOLID)      | Ambos establecen **límites claros de responsabilidad** para cada parte del sistema.             |\\n| Estado Global ↔ Inmutabilidad                 | Minimizar el estado global se vuelve más efectivo cuando los datos son inmutables.              |\\n| SoC + Inmutabilidad → Código más testeable    | Ambos principios facilitan la creación de **módulos desacoplados y con comportamiento predecible**. |\\n\\n\",\"type\":\"text/markdown\",\"title\":\"🗂 Modularidad y Estado\",\"modified\":\"20250423005135848\",\"tags\":\"[[--- 🗂 Principios de programación]] [[--- 🎯 Detalles del proyecto]] [[🗂 Modularidad y Estado]]\",\"color\":\"#db5f00\",\"tmap.id\":\"ebb5625d-d730-44ac-bf4c-61e53f3c079a\"},{\"created\":\"20250417134339248\",\"text\":\"Estas prácticas impactan directamente al usuario final y al equipo.\\n\\n## 🛡️ Principios de Usabilidad, Robustez y Convenciones\\n\\n| 🧠 Principio                                     | 📘 Descripción                                                                                 |\\n|--------------------------------------------------|----------------------------------------------------------------------------------------------|\\n| **Principio del Menor Asombro (PoLS)**           | El sistema debe comportarse de la forma **más intuitiva y predecible posible** para el usuario. Evita decisiones inesperadas. |\\n| **Convenciones Lingüísticas / de Framework**     | Mantener **nombres, estilos y patrones consistentes** facilita la comprensión, colaboración y reduce errores. |\\n| **Tratamiento de Errores y Programación Defensiva** | Validar entradas, manejar excepciones, controlar bordes y documentar comportamientos límite asegura **robustez y resiliencia** del sistema. |\\n\\n---\\n\\n## 🔁 Relaciones internas entre principios\\n\\n| 🔗 Relación                                             | 💡 Explicación                                                                 |\\n|----------------------------------------------------------|--------------------------------------------------------------------------------|\\n| PoLS + Convenciones                                      | Las interfaces intuitivas se refuerzan cuando el código sigue un estilo **coherente y familiar**. |\\n| Tratamiento de errores ↔ TDD                             | Las pruebas anticipan y verifican errores; la **programación defensiva** garantiza que se manejen correctamente. |\\n| Convenciones + Legibilidad → Mantenibilidad              | Códigos predecibles y legibles son más fáciles de mantener en equipo.         |\\n\\n\",\"type\":\"text/markdown\",\"title\":\"🗂 Usabilidad y Robustez\",\"modified\":\"20250423005135851\",\"tags\":\"[[--- 🗂 Principios de programación]] [[--- 🎯 Detalles del proyecto]] [[🗂 Usabilidad y Robustez]]\",\"color\":\"#db5f00\",\"tmap.id\":\"a65af17f-6a20-419b-b5f9-360d03355131\"},{\"created\":\"20250422003917477\",\"title\":\"Español\",\"color\":\"GhostWhite\",\"modified\":\"20250422003917477\",\"tmap.id\":\"73b473f2-b54e-4d44-937a-65f5fc1082f7\",\"text\":\"\"}]\n```",
  "tags": "[[--- 🧬 Por Clasificar]]",
  "type": "text/markdown",
  "created": "20250423165831826",
  "modified": "20250423165831826"
}