{
  "title": "-README.logger.md",
  "text": "## [[Tags]]\n-README.logger.md [[--- Codigo]] [[--📘 Documentacion]]\n\n```markdown\n# 📘 Logger – OpenPages-pipeline\n\nEste módulo permite registrar todos los eventos clave del procesamiento de PDFs de forma visual (emoji en consola) y persistente (archivos `.log` y `.jsonl`), con soporte multilenguaje y trazabilidad por ejecución.\n\n---\n\n## 🎯 Objetivo\n\n- Proveer retroalimentación amigable en tiempo real\n- Generar trazas auditables por ejecución\n- Facilitar debugging, revisión, métricas y transparencia\n\n---\n\n## 📁 Archivos generados\n\nTodos los archivos se guardan automáticamente en la carpeta:\n\n```\noutput/logs/\n```\n\n| Archivo | Descripción |\n| --- | --- |\n| `run_YYYY-MM-DD_HH-MM-SS.log` | Log plano legible para humanos |\n| `run_YYYY-MM-DD_HH-MM-SS.jsonl` | Log estructurado en formato JSONL (1 línea = 1 evento) |\n| `<nombre_archivo>.log` | Log individual por cada PDF procesado |\n\n---\n\n## 🔁 Formato JSONL estructurado\n\nCada línea representa un evento del pipeline:\n\n```json\n{\n  \"timestamp\": \"2025-04-10T15:42:21.543Z\",\n  \"ejecucion\": \"c78fbccbeed045b5919e8a7e79dd4d73\",\n  \"evento\": \"clasificado\",\n  \"archivo\": \"input/Libro.pdf\",\n  \"categoria\": \"Tecnología\",\n  \"dewey\": \"600\",\n  \"nivel\": \"INFO\"\n}\n```\n\n---\n\n## 📦 Campos incluidos\n\n| Campo | Significado |\n| --- | --- |\n| `timestamp` | Fecha y hora del evento |\n| `ejecucion` | ID único para toda la ejecución del pipeline |\n| `evento` | Nombre del evento registrado |\n| `archivo` | Ruta del archivo procesado |\n| `categoria` | Categoría asignada (si aplica) |\n| `dewey` | Código Dewey (si aplica) |\n| `nivel` | Nivel del log (`INFO`, `WARNING`, `ERROR`) |\n\n---\n\n## 🧠 Eventos disponibles\n\n| Evento | Emoji | Nivel sugerido | Contexto |\n| --- | --- | --- | --- |\n| `procesar` | 📘  | INFO | Inicio del procesamiento de un PDF |\n| `clasificado` | 📖  | INFO | Clasificación exitosa del documento |\n| `export_ok` | ✔️  | INFO | Exportación finalizada correctamente |\n| `warning_meta` | ⚠️  | WARNING | Metadatos faltantes o inválidos |\n| `warning_texto_corto` | ⚠️  | WARNING | El texto extraído es muy breve |\n| `error_parse` | ❌   | ERROR | Fallo al procesar o extraer texto |\n| `archivo_inaccesible` | ❌   | ERROR | No se puede abrir el archivo |\n\n---\n\n## ⚙️ Personalización vía variables de entorno\n\n| Variable | Descripción | Valor por defecto |\n| --- | --- | --- |\n| `LANG` | Idioma de mensajes (`es`, `en`) | `es` |\n| `LOG_LEVEL` | Nivel mínimo a registrar | `INFO` |\n| `EXECUTION_ID` | ID manual para auditoría externa | `auto-generado` |\n\n---\n\n## 📌 Recomendaciones\n\n- Revisar `run_*.jsonl` para análisis estructurado (Python, jq, dashboards)\n- Usar los `.log` individuales para depurar errores aislados\n- Integrar los logs en herramientas externas si se requiere trazabilidad continua\n\n---\n\n## 🧪 Pruebas\n\nEl archivo `test_logger.py` incluye pruebas para:\n\n- Mensajes visuales esperados\n- Verificación de archivos `.jsonl`\n- Logs individuales por PDF\n\n---\n\n> `logger.py` es el narrador silencioso del pipeline. Te dice qué pasó, cuándo y cómo — sin ruido, con trazabilidad y respeto.\n```",
  "tags": "-README.logger.md [[--- Codigo]] [[--📘 Documentacion]]",
  "type": "text/markdown",
  "created": "20250423165831794",
  "modified": "20250423165831794"
}