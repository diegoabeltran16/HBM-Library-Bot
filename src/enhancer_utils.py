"""
ðŸ“˜ enhancer_utils.py â€“ Funciones auxiliares para el gen enhancer

ðŸ§  PropÃ³sito del mÃ³dulo:
Este archivo actÃºa como un gen auxiliar especializado para `enhancer.py`, y contiene funciones de soporte
ligadas a:
- AcumulaciÃ³n de estadÃ­sticas de reparaciÃ³n
- AplicaciÃ³n de diccionarios OCR personalizados
- Futuras reglas heurÃ­sticas o nlp ligeras

Esta separaciÃ³n refuerza el principio de modularidad semÃ¡ntica y trazabilidad helicoidal.
"""

from typing import Dict, Tuple
import re

# â†’ Esta funciÃ³n permite combinar los resultados de varias reparaciones
# sin sobreescribir las claves, acumulando los valores numÃ©ricos.
def acumular_stats(global_stats: Dict[str, float], nuevos_stats: Dict[str, float]) -> Dict[str, float]:
    """
    ðŸ”¢ Acumulador de estadÃ­sticas numÃ©ricas de funciones correctoras.

    Ideal para contar cuÃ¡ntas correcciones se han hecho en total al texto.
    No modifica valores no numÃ©ricos.
    """
    for clave, valor in nuevos_stats.items():
        if isinstance(valor, (int, float)):
            global_stats[clave] = global_stats.get(clave, 0) + valor
    return global_stats

# â†’ Esta funciÃ³n aplica un diccionario de reemplazos OCR comunes
# El diccionario puede ser cargado desde un JSON externo (ej: "ocr_dict.json")
def aplicar_diccionario(texto: str, diccionario: Dict[str, str]) -> Tuple[str, Dict[str, int]]:
    """
    ðŸ“– Aplica un diccionario de reemplazos sobre el texto.

    Ideal para limpiar errores de OCR conocidos como:
    - "rn" por "m"
    - "1ntroducciÃ³n" por "IntroducciÃ³n"

    Args:
        texto: Texto a procesar
        diccionario: Diccionario con pares {"mal": "bien"}

    Returns:
        texto corregido y stats con cantidad de reemplazos
    """
    reemplazos = 0
    for clave, valor in diccionario.items():
        if clave in texto:
            ocurrencias = texto.count(clave)
            texto = texto.replace(clave, valor)
            reemplazos += ocurrencias

    return texto, {"reemplazos_dict": reemplazos}